<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[代码工匠]]></title>
  <link href="http://code4craft.github.com/atom.xml" rel="self"/>
  <link href="http://code4craft.github.com/"/>
  <updated>2020-12-22T23:50:04+08:00</updated>
  <id>http://code4craft.github.com/</id>
  <author>
    <name><![CDATA[code4craft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA['2020年总结']]></title>
    <link href="http://code4craft.github.com/blog/2020/12/22/2020nian-zong-jie/"/>
    <updated>2020-12-22T23:47:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2020/12/22/2020nian-zong-jie</id>
    <content type="html"><![CDATA[<p>2020年是个魔幻的一年，很多变化，有意料之内的，也有意料之外的。胖了20斤，换了工作，股票涨了，准备换房。</p>

<h2>疫情和票牛最后的时光</h2>

<p>在票牛最后的一段时间其实也可以用魔幻形容。疫情对票牛业务的影响其实非常大，数据基本跌零，做业务有种在岸上游泳的感觉。印象比较深的是，记得跟谋让做了一个搜索的项目，谋让开始用OpenSearch搭了一个平台，让威哥简单接了一下，反正疫情影响也小，就直接上线了。</p>

<p>疫情远程办公了一段时间，公司管理团队都表现了极强的控制欲，中间早启动晚复盘，还有要求全程开视频，晚来一天都不行，非常的焦虑。我最焦虑的是团队的流失，但是因为那时没有启动裁员，对比其他公司已经是幸事，所以大家还是挺珍惜这份工作的，整体大家工作状态反而在线。</p>

<!--- more ---->


<p>中间做了一次人才盘点，做了一次ppt管理者，倒也是学到一些东西。</p>

<p>后来启动了裁员，裁了1/3的人，度过了难关，这次裁员反而是轻车熟路，毕竟生死关头，也没啥愧疚感。谋让也被裁了，不过过了两个月就找到了新工作。</p>

<p>现在回想起来，最可怕的是那会自己已经开始做包装、附和，区分对上和对下，不敢说真话了。</p>

<h2>找工作的两个月</h2>

<p>在票牛最后管理层降薪了，生活周转也有点困难，最让我焦虑的是35岁了，担心再跳槽找不到工作，所以决定在生日之前先找个下家。一共找了拼多多、蚂蚁、饿了么、字节四家，因为履历还不错，虽然面试过程波折，总共前后拖了一两个月，但是最终基本上都过了面试。最终选择了字节，原因用狄公的话说是年初TikTok的增长太性感了。大厂的薪资自然不同，生活状态也有了不少改善，也算告一段落。离开票牛的时候挺不舍，印象很深的是铮鸣还喝多了。</p>

<h2>在字节的半年</h2>

<p>回过头来看，在字节的半年也不能算快。经历了团队的融入，整合了新团队，从10人发展到20多人的规模，做了一些事，也慢慢适应了字节范。离外部市场远了，反而重新开始重视专业性，重视坦诚清晰，用正确的原则去做事。职级低了，但是团队强了，自由度反而高了。</p>

<p>最开始加入字节，完全是学习的心态，慢慢的开始对事情和人有一些掌控，渐渐变得更有自信，能够去输出一些自己的东西了。整体回到了大概18年时的状态，还蛮好的。</p>

<h2>生活</h2>

<p>这一年基本算是没什么生活。无论是在票牛还是字节，心思基本都在工作上，回家也就是睡个觉。特别在字节后晚上休息很晚，早上9点起床，小妞们也见不到，有时周末感觉是才能见一面。美团的股票涨了，有了一点小收入，又开始考虑学区房的事了，也挺耗费精力的。</p>

<p>太晚了，就这样吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[票牛这几年]]></title>
    <link href="http://code4craft.github.com/blog/2020/05/26/piao-niu-zhe-ji-nian/"/>
    <updated>2020-05-26T10:40:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2020/05/26/piao-niu-zhe-ji-nian</id>
    <content type="html"><![CDATA[<p>两周前正式离开了票牛，心情十分的平淡。离开前的一周，不停的找人吃饭，也喝了不少酒，但是也没有喝多。可见我也不是一个十分恋旧的人，也可能年龄比较大了吧。倒是之前自以为已经没事的酒精过敏又发作了，全身痒了快一周。</p>

<p>在票牛的最后一周，知道超哥也想走了。难怪，毕竟带了这么久的团队，我自己走了，大家难免觉得丢了核心。青年节的时候约几个小弟吃了顿饭，大家发展都还不错，之前资质平平，现在去了大厂，也是没辜负大家。聚散离别，这方面看的已经比较淡了。倒是对票牛业务还是比较担心，这感觉就像自己的孩子养了好几年，现在要放手了。这两周写了快5000字的交接文档，把业务、技术都梳理了一遍，该交的账号都交掉，该交代的都交代完，剩下的，也就靠留下的人了。</p>

<!--more-->


<p>离职之后一周去宁波玩了一趟。买车以来就很少远出，这次算是我最长的一段自驾，从上海到舟山，大概250公里，3个多小时。一路上断断续续玩了3天，在东极岛住了两晚，又一天自驾回了上海。在旅途的路上，各家的Offer也陆续都给出，然后最终选择了字节。各方面都算比较满意的，杜老板也是老朋友了，字节的海外战略版图也很大，后面一段工作，也是令人期待的。</p>

<p><em>生命中真正重要的不是你遭遇了什么，而是你记住了哪些事，又是如何铭记的。</em></p>

<p>票牛这几年，经历了一个创业公司的大部分周期，也经历了经济环境下滑的几年，在大潮中起起落落，也是比较有代表性的。刚好下周才入职，就借这个时间写出来。这一两年，我们工作中都很迷恋思考、抽象、认知提升，这篇文章倒是想写的更加细细碎碎一点，不那么有逻辑性。</p>

<p>那么，开始吧！</p>

<h3>原来你也在这！</h3>

<p>2015年底，我在点评负责十几个人的团队，主管CRM系统，就是客户、资质、审核这些事。那时处于不写代码手痒的阶段，但是整个CRM系统也谈不上多复杂，事情不多也不算重要，我干的也不算开心。正好教练找我说，想创业搞一个项目，做二级票务平台。我有点纠结，那会还是有点舍不得点评的团队，毕竟点评的公司氛围很好，同事也都很nice。后来教练邀请我去项目那边看看，我于是找了个时间过去了。</p>

<p>办公室在顾村公园门口，进去的时候正好碰到恩泽正在鼓捣ansible，还给我秀了一下技术栈。你看，我们用Java8，还自己写了个daogen。结果半路的时候嘉轶跑过来了，我当时很震惊，“原来你也在这！”当时心里惊叹，没想到教练已经默默从点评找了好几个人过来了。路上看到一个背着包的人过来，立勇和教练说是投资人，要谈话，我就跟玉洁、恩泽、周敏一起去吃了个午饭。吃完饭，周敏说立勇交代，一定要他买单，然后我们就很开心的同意了。坦白的讲，这次见面是加入票牛的非常重要的原因，就是几个熟人很开心嘛。</p>

<p>加入票牛还有一个原因，我对于创业一直是有向往的，毕竟《沸腾十五年》之类的书看过不少，硅谷的故事谁都知道。我刚毕业加入的点点网就是一个创业公司。冬哥是在点点认识的同事，后来为了家庭回了成都。刚好我国庆节前去了一趟成都，东哥就请我吃了一顿鱼。我跟他讲要去创业了，公司A轮，融了一百多万美元，估值600万美元。冬哥说，不错啊，我们这波程序员里也有自己创业的了。冬哥人很实在，他对人的鼓励都能到心里去，之前WebMagic的广泛开源，他也是作为第一个用户使用，还在他们单位内部评了个优秀奖。</p>

<p>我九月底提了离职，十月底加入票牛，那个十一我写了七天的代码，还整理了一个创业公司的技术思维导图。那会真的超级开心。一年后我去iTechPlus上做了个分享，说的是“因为还想继续写写代码，所以就出来创业了”。确实后来在票牛几年写了很多代码。</p>

<h3>我们的APP上架了</h3>

<p>后来就加入票牛了。第一期办公室在顾村公园，每天要坐单程两小时地铁，所幸后半段人就比较少了，看看书也不无聊。嘉轶还在上海大学租了个房子，那会真是凭着一股劲去做事情。</p>

<p>当时整个团队大概是这样的，我跟恩泽做后端加运维等杂七杂八的事，嘉轶写客户端和前端，玉洁既作为设计师又作为产品经理，一共四个人的团队。商务这边则从当时的西十区挖了几个人过来，Freda、Tim和Eric，再加上主管市场的S，主管运营的Cookie。虽然他们都用英文名，但是其实一点都不洋气，整个是个有点欢乐和傻缺的团队。票牛一开始也没啥名气，对于其他加入的人来说，恐怕离家近是个很重要的原因。那会经常开会讲二级市场的模式、产品，大家真的觉得自己是在创造一个新东西，经常天马行空，但是团队合作效率却也很高。我现在还很怀念当初那段时光。</p>

<p>票牛整个系统上线并不复杂，APP撸了一个多月，后端则是阿里云买了几台服务器，部署上去就完事了。因为没有人来上架演出，我写了个从大麦爬演出和库存的爬虫，覆盖率就这么上去了。第一个版本还是比较简单的，有基本的交易功能，配色是蓝绿色的冷淡系，有点像豆瓣，因为我们觉得做一个演出类型的APP还是要有点文艺的调调。后来再大概是16年某个版本改成了喜庆的红色系，毕竟是做交易嘛，然后持续至今。</p>

<p>那会投资人会跟我们定GMV目标，好像有个是半年到每月一百万。说实话，当时也没怎么当回事，毕竟上线完了，勉强拉人才能凑成几单，觉得这个目标太远了。后来我们把H5站上线了，15年底微信公众号还有些余热，所以我们也搞了公众号去拉新。一开始的号叫“十分现场”，都写的是写很有调调的剧评，阅读也不太上得去，带不来什么交易。</p>

<p>后来开始给百度给钱，投关键词广告，结果效果非常好。我记得三月份的某一天，我刚好在外面办居住证来着，结果看到公司群里炸了。一看大盘，当天卖了快100万，要知道平时大概峰值是一千块左右。后来知道是BigBang的韩国组合演唱会开售，加上他们是告别场，非常火爆。那天我在外面，一个人也心情格外好，刚好路边上在卖烤红薯，结果去买了个最大的。从那之后开始，我们慢慢就成了百度的金主之一，当然他们也带给我们很可观的流量。</p>

<p>那会每个月会给投资人报告，然后就拿MySQL去数据库拉，也算出来我们的ARPU和获客ROI都是很高的。据说数据不掺水的公司没几家，但我们当时根本没这个概念。客观的讲，那会我们应该是在二级票务市场第一的位置，只是市场远未充分挖掘。我们从一个三线新闻网站上看到过一个叫“牛魔王”的平台，知道他们和一个大的票务代理合伙，但是也没有特别重视。</p>

<h3>又换办公室了</h3>

<p>顾村的办公室只能坐不到10个人，后面就有了换办公室。可能老板们觉得我们跑的太辛苦了，就暂时放弃了自己公司离家近的理想，搬到了西康路。据说点评之前办公的财富时代就在附近。票牛的一路办公室选择，都受到点评的影响很大，最近还搬到了德比易园，当然这是后话了。</p>

<p>后来找到第一任产品经理是庆青。我记得刚来的时候正好在“很高兴遇见你”吃了一顿饭。庆青对票牛产品的把控，依然是希望有些调性、面向用户的，做了很多交易的优化和用户体验的优化，在票牛后面的产品里，依然有这些影子。票牛当时产品的策略就是不断优化用户体验，做了选座、退票流程这些功能，在当时的演出行业还算是比较领先的。我们经常对外标榜自己是一个互联网团队。</p>

<p>用户带来的感动其实蛮多的。</p>

<h3>新来的技术小伙儿</h3>

<p>票牛最高峰是大概是三十个人的技术团队，基本上所有人招聘我都面试过。17年之前票牛的招聘策略还是很保守的。新乐是我们招进来的第一个技术，前端。因为当时只有嘉轶一个前端，他如果休假，我们整个研发都可以放羊了。</p>

<p>在余姚路的时候，每天个周五中午就一起去吃个饭，也是格外的开心。</p>

<h3>点亮全中国</h3>

<p>分站策略应该是票牛实践的最成功的策略之一。16年~17年，我们陆续在北京、广州、成都、南京、杭州、西安设立了办公室，做本地化的运营，并辐射周边城市。</p>

<p>我们是做团购出来的，知道地面部队是最难建设和管理的。所幸的是因为票务客单价比较高，订单相对不多，票纸的物流又比较简单，所以票务上的本地化运营，我们还是用比较少的人给做起来了。我们分站的负责人我们叫城市经理，那会要求蛮高的，一个人去一个分站，上到销售策略，下到办公室水电煤都要自己处理。</p>

<p>若菲是我们第一任的北京城市经理。</p>

<h3>傍大腿成功</h3>

<p>16年底的时候跟猫眼电影谈合作。我们的入口出现在了微信、美团点评里。</p>

<h3>演出行业和票牛这个公司</h3>

<p>票牛从一开始就在思考我们和演出行业的关系。而真正有所行动，应该是17年底开始，我们正式将团队拆分，成立了内容和行业业务，独立于交易主业务。</p>

<p>其实一开始也有压力，主要压力来自于想把一件事做好。</p>

<h3>CTO是做什么的？</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读罗素《幸福之路》]]></title>
    <link href="http://code4craft.github.com/blog/2019/02/24/du-luo-su-%3C%3Cxing-fu-zhi-lu-%3E%3E/"/>
    <updated>2019-02-24T07:25:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2019/02/24/du-luo-su-<<xing-fu-zhi-lu->></id>
    <content type="html"><![CDATA[<p>这其实是一本关于”人生观“的书。</p>

<p>这本书翻译于1943年，中文译者傅雷评价是帮助人们在“现存的重负之下挣扎出一颗自由与健全的心灵”。1943年的中国自然比现在困难数倍，但是痛苦往往来自于现状与期望的落差，经济寒冬之下，大家越来越焦虑，所以这本书于现在看也是合适的。书里观点密度太高，很多涉及哲学，我断断续续读了半个月，中间很多时候需要停下来思考，乃至查阅资料来理解其中的观点。读完之后，收获很多。生啃其实有些难过，所以虽然于我的文笔和知识，都有些不自量力，但也希望尝试来结合当前时代做一个解读。</p>

<!--more-->


<p>一、</p>

<p>接触这本书的前几天，正逢经济寒冬，我亲自劝退了好几个同事。其中一个同事昨天还在北京赶项目出差，回来面谈之后，第二天就再也不来，聊天的时候我一直很沮丧，他还安慰我说“没事的，和大家一起工作很开心”。</p>

<p>年前吃完最后一顿团餐，平时嘻嘻哈哈的团队，全程基本沉默无言，后来结束后，我在外面漫无目的的游荡了一个小时。人到中年，家室已立，工作也带了团队，难免会负重，经济寒冬深不见底，只希望2019年能够活的更轻松一点。</p>

<p>想要解决一个问题，只能更高层次的思考。我开始读了罗素的《幸福之路》，在南方温暖的阳光下，有些心结开始慢慢解开。爱因斯坦说，“阅读罗素的作品，是我一生最快乐的时光之一”。对我来说，也是如此。</p>

<p>二、</p>

<p><em>动物只要不生病，有足够的食物，便快乐了。我们觉得人类也该如此。</em></p>

<p>这本书最清晰脱俗的地方在于能把一些快乐和痛苦讲的非常的理性，理性中又有一些深邃的浪漫。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>我的目的，是想提出一张治疗日常烦闷的方子，那烦闷是文明国家内大多数人感着痛苦的，而且因为并无显著的外因，所以更显得无可逃避，无可忍受。我相信，这种不快乐大部分是由于错误的世界观，错误的伦理学，错误的生活习惯，终于毁掉了对一般可能的“事物”的天然的兴致和胃口，殊不知一切的快乐，不问是人类的或野兽的，都得以这些事物为根基。</span></code></pre></td></tr></table></div></figure>


<p>三、</p>

<p>我当时看完此书时，自以为受到了人生观的重塑。后来仔细一想，人生观其实早就养成，更何况也跟身处的环境，心情的状态有关，哪能重塑？一个人经历成功，旁人都为他欢呼，怎么可能不追求竞争的刺激？倒是对于各种痛苦的觉察和自知，使得不再为某些过于强烈的诉求而痛苦，可以让生活变得更加轻松一点，这也就够了。这倒也颇为类似中国的“中庸”之道。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018，雪，一个早到的年终总结]]></title>
    <link href="http://code4craft.github.com/blog/2018/12/08/2018%2Cxue-%2Cyi-ge-zao-dao-de-nian-zhong-zong-jie/"/>
    <updated>2018-12-08T05:42:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2018/12/08/2018,xue-,yi-ge-zao-dao-de-nian-zhong-zong-jie</id>
    <content type="html"><![CDATA[<p>2018于我而言，是一个有些不同的年份。</p>

<p>回想起来，上一次“发现新大陆”应该是在2013年，接触了Github这样的开源社区，开启了技术上的新视野。那一年看了很多源码，写了很多博客，也写了很多项目，包括现在的WebMagic。收获是巨大的，直接影响了我看待和学习技术的方式。</p>

<p>今年的新发现是关于技术之外的，因为接触了很多管理学、心理学的知识，发现关于“人”方面竟然也有如此多的方法论，乃至于在三十多岁的时候，还能使“世界观”发生了一些改变。</p>

<!--more-->


<h3>工作-不断更新的舒适区</h3>

<p>2018年是这三年创业中最丰富的一年。</p>

<p>年初的时候我们产品经理离职，我兼任了3个月产品经理。以及公司B轮融资成功，团队在半年时间扩张近一倍，竞对的压力、行业的变化、业务的增长、新成员的引入，对公司来说有不小的挑战，对于我个人能力方面，无论是专业能力还是管理能力上，也都产生了不少的挑战。</p>

<p>因为整个公司都处于紧绷的状态，所以其实也没有多少人能给我指导，只能在实践和学习中成长。过程其实颇为痛苦，也有过很低落的时候，大多数都是源自对于所做的事是否有价值、做事的方法是否正确的怀疑。我的解决办法是不断的寻求知识、思考，并与我遇到的问题结合，找到最合理、最合适的办法。</p>

<p>现在反观当时做的事，推动团队规划和调整、推动产品落地，无非就是&#8221;让正确的事能够发生&#8221;。寥寥几个字，看似容易，如人饮水，冷暖自知。感谢现代管理学之父彼得·德鲁克的《卓有成效的管理者》，教会了我看待“管理”这件事本身的视角。也要感谢杰克·韦尔奇的《赢》，把我变成了一个很有战斗力的人。</p>

<p>所幸年底的时候，我们的业绩第一次超过了友商，技术团队在中间也做出了不小的成绩。年底的时候再做回顾，发现技术和管理视野上确实有了一些不同。</p>

<p>感谢这段经历带给我的成长。</p>

<h3>生活-主动寻找更好的生活</h3>

<p>我要感谢工作中带来的成长，让我更好的去看待生活。</p>

<p>今年7月开始了减肥计划，这一次直接买了健身私教课。半年的课程花费，已经远远超过了我全年的生活费。当然结果肯定是值得的，首先体重下降了接近30斤，然后也学会了更好的自律能力。人近中年，什么投资都比不上对健康的投资，值了。</p>

<p>家庭上也很有意思，二宝也一岁多了，大宝也很聪明乖巧，很幸福。</p>

<p>但是大宝明年幼升小，有些焦虑不知不觉的蔓延，跟媳妇也有一些争吵，我为此还专门去咨询过心理老师。方案也很简单，七年之痒了，要跟媳妇更恩爱一些，其他问题都会迎刃而解，还推荐了我看《爱的五种语言》。实践下来效果很好，对于未来又更有信心了。</p>

<p>虽然开销越来越大，经济压力反而不那么担心了。毕竟富有富的过法，穷有穷的过法，之前经常跟老婆说我赚钱辛苦压力大，后来想想，其实只要身体健康家庭和睦，也就够了，努力工作只是为了有更好的未来而已。</p>

<h3>自我-成为更优秀的人</h3>

<p>史蒂芬·柯维的《高效能人士的七个习惯》应该是对我这一年的总结。今年初听人推荐就买了这本书，当时觉得成功学看不下去，到了年末的时候，才发现终其一年的收获，也不过就是书中讲到的“独立型”、“互赖型”阶段的提升罢了。“积极主动”的去承担更多的挑战，”以终为始“则是把结果放在第一位，”要事优先“是如何做规划和管理时间，”双赢思维“”知彼解及“”统合综效”则是如何有效的与其他人合作，”不断更新“则是如果进行自我提升。</p>

<p>值得一提的是，之前每年都会定年度计划，我发现17年的计划，17年的计划里，有两项：</p>

<ol>
<li>一定要减肥了</li>
<li>找一个技术以外的事情做做并坚持</li>
</ol>


<p>竟然首次完成的如此彻底，还是在最忙的18年。</p>

<p>今年看的书应该创下了新高，内容偏重于商业管理实践，充分体现了本年度的迷茫。希望明年心情能更平和，多读一些人文类、哲学类的书籍，了解一下世界的丰富和美好。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>产品类：《启示录》《结网》《点石成金》《增长黑客》《数据驱动：从方法到实践》
</span><span class='line'>
</span><span class='line'>传记类：《赢》《商业的本质》《只有偏执狂才能生存》《谁说大象不能跳舞》《旁观者：彼得德鲁克回忆录》《刷新：重新发现商业与未来》《激荡十年，水大雨大》《阿里传：这是阿里巴巴的世界》《第二次世界大战回忆录》《华为研发》《这才是最牛的团队：从携程到如家、汉庭》《进入空气稀薄地带》《顺势而为：雷军传》《九败一胜》《创京东》
</span><span class='line'>
</span><span class='line'>管理类：《卓有成效的管理者》《高效能人士的七个习惯》《创新者的窘境》《OKR：源于英特尔和谷歌的目标管理利器》《成为技术领导者》《原则》《穷查理宝典》《传习录》《清醒思考的艺术》
</span><span class='line'>
</span><span class='line'>技术类：《企业IT架构转型之道：阿里巴巴中台战略思想与架构实战》《颠覆完美软件》
</span><span class='line'>
</span><span class='line'>家庭类：《童年的秘密》《新家庭如何塑造人》《爱的五种语言》
</span></code></pre></td></tr></table></div></figure>


<p>今年还买了不少知识付费的产品，例如“混沌大学”、“得到”、“樊登读书会”，以及喜马拉雅和知乎Live的部分节目。总体而言质量自然比不上经典图书的收获，但是也有些大咖的经验还是很棒的。有些人排斥这类节目，觉得是贩卖焦虑，我认为有部分道理，但是如果对自己去伪存真的能力比较有自信的话，多一个知识源又何妨呢。</p>

<p>提一提明年的计划吧：</p>

<ol>
<li>公司做大做强</li>
<li>减肥成功并保持</li>
<li>做一个优秀的技术领导者</li>
</ol>


<p>对未来充满期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从工程师到产品经理(二)——学会借助他人的力量]]></title>
    <link href="http://code4craft.github.com/blog/2018/02/13/cong-gong-cheng-shi-dao-chan-pin-jing-li-er-xue-hui-jie-zhu-ta-ren-de-li-liang/"/>
    <updated>2018-02-13T23:12:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2018/02/13/cong-gong-cheng-shi-dao-chan-pin-jing-li-er-xue-hui-jie-zhu-ta-ren-de-li-liang</id>
    <content type="html"><![CDATA[<p>最近上线了一个功能，大致的内容是给用户发送一条提醒，告诉给了他一张优惠券，从而达到激活用户的目的。这个其实在互联网公司是非常常用的手段，但是在实施的过程中，也学到了一些东西。</p>

<!--more-->


<p>对于技术人员来说，在做架构设计的时候，更习惯一个人去思考、规划，一步步把不明朗的环节变得清晰。其他人的帮助反而很多时候是多余的。做这个功能的时候，因为整个过程所有页面都是现成的，觉得并不需要设计师和运营的帮助，所以我就按照之前的方式，独自去思考和规划，然后发PRD给开发，画好原型，最后测试上线，整个过程非常的顺利，也按期交付。就最后上线完抄送了一下大家就完事了。</p>

<p>中间有两件事情比较有意思：</p>

<p>第一个，测试发现提醒的排版比较丑，就让设计师同学看了一眼，大家一致觉得确实丑，然后给了一个新的排版，效果提高。</p>

<p>第二个，在最后咨询优惠券额度的时候，跟运营同学聊到这个东西，发现优惠券落地页，其实之前有更好的运营模板。于是商量之后，决定用模板来替代。</p>

<p>后来反思这件事，本来自己理好需求，按期交付，也算是达到了目的。但是好像跟技术不太一样，产品方案多多寻求其他专业方向的帮助，可以把事情做的更好。</p>

<p>当然了，也可能是我经验不足，不过这种方式在当前阶段，确实把产品变好了就是了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从工程师到产品经理(一)——适应变化]]></title>
    <link href="http://code4craft.github.com/blog/2018/02/10/cong-gong-cheng-shi-dao-chan-pin-jing-li-yi-gua-ying-bian-hua/"/>
    <updated>2018-02-10T23:20:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2018/02/10/cong-gong-cheng-shi-dao-chan-pin-jing-li-yi-gua-ying-bian-hua</id>
    <content type="html"><![CDATA[<p>因为最近公司业务拆分和人员变化，所以需要暂代产品经理一职。创业嘛，都体验一下挺好的。中间有些学习和思考，记录下来。</p>

<!--more-->


<h3>一、改变职位认同感</h3>

<p>我把它列到第一位，是因为认同感太重要了，它是能不能干好一个职位并且乐在其中的根本。一般来说，技术人员追求的是更好的技术，解决更难的问题。虽然很多工程师也很关注产品的业务价值，但是用人月神话的话来说，解决更难的问题会带来更多的乐趣，这个是客观规律（如果一个技术人员觉得解决难题没意思，反而只能说明他本身就不适合做技术）。比起做一个抢红包活动，肯定是做一个服务化平台更有意思啦！</p>

<p>但是我目前理解，产品经理的目标应该为公司带来业务的增长，让产品被更多人用到。“带来增长”、“优化体验”这些事本身的结果，获得职业的认同感。</p>

<p>当然了，这个问题在创业公司很好解决。毕竟来创业公司的技术人员，也是奔着公司业务发展来的，做的事哪怕没技术含量，有效果就行。所以这次的身份转换，让我能够参与更多事，这一点反而是我希望的。</p>

<h3>二、改变沟通方式</h3>

<p>技术人员应该都希望一件事，就是跟他沟通的人都“想清楚了再来跟我聊”，最好的沟通方式是邮件，其次IM也行，白纸黑字，别想不清楚做出来再改。但是身份转换后，听到业务方提需求，很多事情也只有个大概，需要问清楚why，然后站到他的角度去引导，最终把不确定变成确定。开始经常一件事微信聊半小时说不清楚，后来发现电话沟通效果好得多，所以现在经常别人弹个消息我就打个电话过去。不过结果说明，效果还是挺明显的。</p>

<p>就写这么多吧。写完之后，发现文风还是技术人员的文风，有点无聊，看来要学习的还挺多！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017年总结]]></title>
    <link href="http://code4craft.github.com/blog/2017/12/26/2017nian-zong-jie/"/>
    <updated>2017-12-26T22:54:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2017/12/26/2017nian-zong-jie</id>
    <content type="html"><![CDATA[<p>转眼2017又要结束了，今年写的文章数创了新低。到了年底跟风组里的同学买了个HHKB，重新练习打字，又提起了写博客的兴趣。</p>

<!--more-->


<p>一、得</p>

<p>2017年其实是很顺利的一年，无论从工作还是生活上。</p>

<p>工作上面，15年开始票牛这个项目，到现在这个规模，一年流水好几亿，真的是超过预期了。</p>

<p>生活方面，去年底买了车，经过一年的磨合，现在每天也开车上下班，路途半小时，周末自驾去吃个大闸蟹什么的，比起之前幸福感高了很多。</p>

<p>二宝出生了，很可爱，每次回家看到两个宝贝，幸福得不得了。</p>

<p>在爸妈的资助下买了二套房，爸妈过来也有着落了。</p>

<p>技术上，记得之前的理想是写个知名开源软件，现在WebMagic有5000个star，这个目标竟然好像已经实现了；还想用技术支撑一个公司从开始发展到很大规模，现在也算是在路上。</p>

<p>二、忧</p>

<p>最近关于中年危机的话题特别火。其实我直到去年都不觉得自己到了中年，毕竟之前工作和生活都在上升期，但是今年得到的东西太多，反而觉得有点焦虑。</p>

<p>有得到才害怕失去。</p>

<p>每个月的房贷、养车的钱、小孩的教育费，都是不小的开支，身体开始有小毛病了，胃痛什么的，偶尔也会影响生活质量。</p>

<p>二宝5个月了，大宝开始有很多的作业，每天陪她辅导作业和玩要两个小时。开始迷上了游戏，特别是最近手游越来越优秀，前两个月沉迷了王者荣耀。有段时间每天最开心的时光就是晚上小妞都睡了，跟老同学开黑，说的是重庆话，还能吹吹牛，真的感觉回到了当年一起在家里打游戏的时光。后来媳妇有意见了，不好好带小孩，现在差不多把这个游戏戒了，玩点休闲的。</p>

<p>三、展望</p>

<p>最后还是展望下2018年吧。</p>

<ol>
<li>一定要减肥了</li>
<li>找一个技术以外的事情做做并坚持</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二个宝贝]]></title>
    <link href="http://code4craft.github.com/blog/2017/07/25/di-er-ge-bao-bei/"/>
    <updated>2017-07-25T18:28:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2017/07/25/di-er-ge-bao-bei</id>
    <content type="html"><![CDATA[<p>黄二宝&mdash;晨晨出生了。</p>

<!--more-->


<p>小家伙来的比预想的早，姐姐生日的第二天晚上，老婆就说肚子痛，去医院到了凌晨就出生了。这次刚好有陪产的产房，目睹了小小妞出生的全过程，完了之后觉得老婆真是太伟大了。有意思的是，老婆知道是女孩后，第一句话是“这下不用换房子了”。</p>

<p>在医院的六人病房过了两天。一个新生命的诞生，当然是伴随着希望。但是病房的新妈妈们，穿着统一的病服，脸上的表情也伴随着痛苦和疲惫。母亲真是伟大。</p>

<p>对于男人来说，每个宝贝的出生也是一场成长。如果说一宝的出生让我感觉到了自己的责任，需要更加努力，二宝的出生就是，有了更大的责任和动力，只能向前飞跑了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017 LinuxCon见闻]]></title>
    <link href="http://code4craft.github.com/blog/2017/06/18/2017linuxconjian-wen/"/>
    <updated>2017-06-18T20:18:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2017/06/18/2017linuxconjian-wen</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/linus.jpeg" alt="" /></p>

<p>一个月前(<del>不知不觉LinuxCon回来都一个月了，拖延了一个月，所里这里是两个月了</del>)看到LinuxCon的推广，说是Linus要过来。还记得高中的时候，语文课老师要写一篇论文，讲一个你感兴趣的主题。其实当时对计算机的了解不多，我就写了Linux操作系统和Linus的故事，那时对这种的靠自由和共享精神改变世界的人，非常向往。想了下见到本人的机会不多，还是很愿意去看看。恰好oschina给开源作者争取了一些免费门票，于是就赶过去了。想想还是要特别感谢oschina的。</p>

<!--more-->


<p>因为地点在北京，所以坐了高铁过去，而且工作日还请了两天假，所以也是费了大心思了。想起来跟我们公司的用户看演唱会也差不多。</p>

<p>不过与其说是追星，倒不如说是充值信仰。这次因为是Linux Foundation主办的，很多开源项目和大佬都去了。两天之内见了很多不同的项目，例如大火的OpenStack、Kubernetes，还有最近热起来的区块链开源项目Hyperledger。听到这么多人讲软件的价值，讲开源的价值，也是很有意思。华为去了很多人，也参与和介绍了很多项目，看起来是跟LF走的比较近的。</p>

<p>遗憾的是因为英文不好，做的也是业务开发，领域也跟Linux系列差距挺远，所以没找到谁去交流。不过很有意思的是，基本上每个Speaker讲完自己的项目之后，都会欢迎大家去使用已经参与contribute。想了想，可能在github上离各种大神的距离，反而比现场要近，这也是开源的魅力所在。</p>

<p>最后讲下Linus的报告吧。因为懒得做准备，现场采用了访谈的形式。Linus本人跟《Just for Fun》书里讲的一样，以写代码为乐趣。问到他觉得25年都在维护Linux会累吗，他说有不啊很有意思，另外Linux还能help everyone。想想做开源的乐趣也是在于此吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Magic - 写在WebMagic0.7.0发布之时]]></title>
    <link href="http://code4craft.github.com/blog/2017/06/03/nomagic-xie-zai-webmagic0-dot-7-0fa-bu-zhi-shi/"/>
    <updated>2017-06-03T20:13:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2017/06/03/nomagic-xie-zai-webmagic0-dot-7-0fa-bu-zhi-shi</id>
    <content type="html"><![CDATA[<p><img src="http://webmagic.io/images/logo.jpeg" alt="logo" /></p>

<p>过节三天，没有安排长途旅游，除了带女儿出去活动一下，终于有点时间写点业余代码了。</p>

<p>WebMagic这次终于有比较大的重构，其实要感谢英语培训班，因为大部分代码都是女儿上课的时候完成的。她上课两个小时，我就在旁边的咖啡店等两小时，可以没什么干扰的写两小时代码。这个版本前前后后也拖了2个月了，终于在前两天测试完成，主要部分没什么大问题了，也可以发一个版本。</p>

<!--more-->


<p>这次发布主要针对两个诟病比较久的问题，一个是POST请求的处理，一个是代理的切换。老实说我自己遇到这两种场景都不多，所以之前一直用的是很简单的做法完成功能。</p>

<p>这次想重写，最难的部分就是如何定API。前前后后包括网友提交的，也有5、6个版本了。最终选择的API我还是比较满意的，好处就是它看起来很简单。好的API定义，应该给人的感觉是“啊，就应该是这样子的”。比如POST请求，有一个核心就是设置RequestBody。之前写了一版是根据参数和Content-Type去动态的做转换，例如Request.setParams(Object)，然后Request.setContentType(&ldquo;JSON&rdquo;)，就可以提交JSON。这个在Spring MVC等框架中也用的不少。后来改成了最基本的、最简单的方式：自己设置RequestBody，再将RequestBody的构造做封装，最终写起来是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Request</span><span class="o">(</span><span class="s">&quot;http://xxx/path&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="na">setMethod</span><span class="o">(</span><span class="n">HttpConstant</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">POST</span><span class="o">);</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="na">setRequestBody</span><span class="o">(</span><span class="n">HttpRequestBody</span><span class="o">.</span><span class="na">json</span><span class="o">(</span><span class="s">&quot;{&#39;id&#39;:1}&quot;</span><span class="o">,</span><span class="s">&quot;utf-8&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个接口看起来一点也不高级，但是挺容易理解。这里JSON是序列化好的结果，其实HttpRequestBody.json()也是多余，直接将Content-Type传过来，连.json()也省了。只不过考虑到对功能有一些“友好性”的引导，毕竟手写Content-Type容易出错，所以加上了。</p>

<p>之前看《Unix编程艺术》，觉得Keep It Simple, Stupid挺好。现在写的代码、读的代码越来越越多，也越来越发现简单的好处。</p>

<p>现在回过头来看WebMagic有挺多设计不合理的地方(幸好能发现不然这几年白混了)。</p>

<p>刚开始写的时候是4年前，那会取名是受“ImageMagick”影响，“Magic”是希望它可以让Web数据的获取变得很方便，跟魔法一样。那会对模块化已经比较有心得，所以宏观上没什么大问题，但是局部的实现和API上，有很多“试图多做事”的做法。例如html.regex()可以不写捕获组序号，默认取第一个捕获组（如果有的话），@Target()的正则匹配也是自己定制过的，将URL中最常用的&#8221;.&ldquo;直接替换成了&rdquo;&#46;&ldquo;。在使用中，相信也给不少人带来了困扰，从issue中就看得出来。</p>

<p>当然WebMagic本身这么多人喜欢，也是我没料到的，看各种评价，主要还是文档写的比较全面详细，另外API比较简单。最近有次分享，一个朋友找到我跟我合影，说是用到框架收益良多，也是让我很惊喜。</p>

<p>这次0.7.0之后，我会陆续重构一些组件，让它们变得更加简单。</p>

<p>No Magic, just K.I.S.S.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017年的一些计划]]></title>
    <link href="http://code4craft.github.com/blog/2017/02/12/2017nian-de-yi-xie-ji-hua/"/>
    <updated>2017-02-12T08:58:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2017/02/12/2017nian-de-yi-xie-ji-hua</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/stock-photo-92524253.jpg" alt="" /></p>

<p>回想了下<a href="http://code4craft.github.io/blog/2016/02/08/2016nian-mu-biao/">2016年的目标</a>，发现完成的并不好：</p>

<ol>
<li>减肥到180。 <code>0%</code></li>
<li>WebMagic发布至少两个大版本，完善代理、xpath等功能，并对基础代码进行部分重构。<code>60%</code></li>
<li>对至少3个典型的业务场景（例如：账号、订单、商品）架构方案做全面的综述，提出自己满意的通用方案，并整理成文章，如果能写出开源项目就更好。<code>70%</code></li>
</ol>


<!--more-->


<p>说来惭愧，1坚持了大概两个月，一路Keep刷榜，后来坚持不下去的真实原因其实是WOW军团再临开服，玩了一张季卡，结果这东西一旦松懈就很难继续了。这个是必须要做的，今年继续。减肥基本没效果。</p>

<p>2算是完成60%，发了一个大版本，其实大功能基本没做，但是面子工程是翻新了一遍，主页也改用jekyll重写了。不过去年有基于WebMagic的衍生项目，把管理后台做好了，代理那边也有个写的很好的项目参考，17年RoadMap也已确定，WebMagic从14年开始就没有大功能改动了，明年应该会有比较大的进展。</p>

<p>3算是70%。不考虑规模，去年做的业务功能基本上是前面几年的总和。“账号、订单、商品”，包括其他的进销存、钱包、权限，因为自己一直在做，所以确实有了一些心得，也把公司的这几块理顺了，但是因为这样才发现：很难有项目级的通用方案。做了5年半业务开发，才发现：当你把业务开发理顺了的时候，其实也是挺容易的。</p>

<p>定一下今年目标：</p>

<ol>
<li>减肥到180。</li>
<li>WebMagic发布两个大版本，完善监控和代理模块。<a href="https://github.com/code4craft/webmagic/issues/446">2017 RoadMap</a></li>
<li>重拾机器学习，特别是了解深度学习目前工业界的一些应用场景。</li>
<li>关于的公司的，把新人培养起来，组建一个有战斗力的团队。</li>
</ol>


<p>另外，今年二宝也要出生了，可见时间会越来越少，工作上因为一些杂事效率也慢慢变低，需要培养更高效的习惯。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016，不虚此行]]></title>
    <link href="http://code4craft.github.com/blog/2016/12/13/2016nian-zong-jie/"/>
    <updated>2016-12-13T09:35:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/12/13/2016nian-zong-jie</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/stock-photo-100057305.jpg" alt="" /></p>

<p>又到了一年一度的年终总结时间，今年过的还是丰富的，有很多东西值得说。</p>

<!--more-->


<h2>生活</h2>

<p>今年生活充满惊喜。</p>

<p>老婆怀上二宝是今年第一大事，小家伙应该跟安安一样都是盛夏出生，一个巨蟹座一个狮子座。现在心态没有当时那么紧张了，期待小宝的出生。</p>

<p>这一年安安又学会了很多东西，也有了自己的想法和脾气。随着安安入学，慢慢我们也有了本地的社交圈子，慢慢的已经习惯了上海这个城市。老婆怀孕之后，带安安玩的任务就是我一个人的了，让我欣慰的是用心陪她之后，小家伙反而有了更大的成长，对数学、英语都产生了很大的兴趣。</p>

<p>今年也终于拍到车牌，以后也是有车的人了。</p>

<p>今年最遗憾的是减肥没能坚持下来，明年要继续。</p>

<h2>工作</h2>

<p>今年因为参与创业，基本上是跟着公司成长的一年。</p>

<p>公司的发展超过了我去年的预期，无论如何都是不虚此行了。</p>

<p>技术上来说，参与了从0到1的再到10的架构，从权衡架构的能力上来说有了长足的进步。年末的时候开始混混社区，补补新知识，也没算落伍。有很多想研究的东西，但是很难像毕业一两年时去钻研了，这一块以后会多花点时间。</p>

<p>管理上来说，虽然今年基本没管几个人，比起之前在点评差得远，但是在目标管理上有了长足进步。创业跟在大公司最大的区别是，要做的事非常多，但是资源极其有限，要在各种各样的事情中选出最重要的做掉，对于那些哪怕非常不合理但是不影响生存的事，要学会接受。这一点对于做技术出身的我，算是比较大的一个思维改变。</p>

<p>WebMagic现在有了3600个star，已经是国内Java爬虫领域的No.1了，无心插柳柳成荫。我也从社区中得到了不少好处，比如今年的团队成员都是通过社区招聘来的。现在我每周都会抽几个小时，正儿八经的把它当做一个正式的项目去做。明年争取做成国际化的项目。</p>

<h3>2016，不虚此行。</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创业公司指南之办公室网络checklist]]></title>
    <link href="http://code4craft.github.com/blog/2016/11/26/chuang-ye-gong-si-zhi-nan-zhi-ban-gong-shi-wang-luo-checklist/"/>
    <updated>2016-11-26T20:33:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/11/26/chuang-ye-gong-si-zhi-nan-zhi-ban-gong-shi-wang-luo-checklist</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/netwire.png" alt="" /></p>

<p>作为软件出身的程序员，我发现在创业过程中遇到的最大的难题，不是缺运维，不是缺测试，而是缺网管！运营的妹子又来问你：“网络又连不上了，怎么办”，你该怎么回答？甚至自己有的时候也会抱怨：“怎么网又连不上了”！</p>

<p>作为兼职了一年的网管，却依旧停留在“把路由器重启一下”的阶段，觉得还是要补充一下基础知识，所以就学习了一下，并整理出了这篇文章。</p>

<!--more-->


<p>一般来说，在网络层面，TCP层往上都是程序员能解决的领域，所以让我们从路由器开始说起。另外，OSI七层模型不熟的可以去复习一下基础。</p>

<h2>IP层</h2>

<h3>路由器</h3>

<p>我记得有个经典的问题叫做：“路由器和交换机有什么区别？”其实当时也不清楚，现在想起来，最大的区别应该是：一个工作在网络层（OSI第三层），一个工作在数据链路层(OSI第二层)。一般路由器和交换机都是内置处理器，而越是上层，计算性能消耗越大，所以路由器是重点。不要太图便宜，一般路由器都会标明能承载的设备数，买个合适的就行了。</p>

<p>另外路由器如果有流量统计和限流，会方便很多，大致限一下流还是要的。</p>

<h2>链路/物理层</h2>

<h3>有线</h3>

<p>我们一般用的网线学名叫双绞线。夹水晶头似乎是网管必备技能，我们常用的水晶头是有标准的，叫RJ45，大致就是按顺序把线排上去，再用夹线钳夹上就可以了。一般我们都是排的直通线，排线的颜色顺序是橙白、橙；绿白、蓝；蓝白、绿；棕白、棕。其实不按颜色来，只要两边顺序一致也是可以用的。</p>

<p>一般有线连不上的原因都是：网线松了，需要重插。所以买好的水晶头挺重要的。</p>

<p>对了网线测试器也挺有用的，京东30多块一个，30块你买了不吃亏，30块你买了不上当。</p>

<h3>无线</h3>

<p>无线其实有一系列标准，例如802.11b/g/n，其中b/g是2.4G，n是5G，比较新的路由器会支持802.11ac，这样的也叫做5G。</p>

<p>对于同一个制式的同一个信道，总体速率都是恒定的，例如802.11g就是54M，哪怕你有多个SSID，或者多个无线路由也一样！所以必须同一个区域的多个API，选择不干扰的信道，否则其实加路由器也没什么用。对于最常用的802.11g，可以有13个信道可选，1、6、11是互不干扰的，另外也可以是2.4G和5G混用，效果会好一些。</p>

<p>无线的信号强度有个衡量标准叫dBm，一般是负的。注意dBm其实是10logP，P是功率，所以dBm减小，功率是指数级衰减的，-30dBm还挺好，到了-70dBm之后的应该很难连得上了。</p>

<p>另外安卓手机有个叫Wifi分析仪的神器，可以分析无线的信号强度，以及信道的拥挤程度，有个这个，同事问你为什么连不上无线的时候，依据也会多一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创业日志（四）——慢下来的技术团队]]></title>
    <link href="http://code4craft.github.com/blog/2016/11/07/chuang-ye-ri-zhi-%28si-%29-man-xia-lai-de-tuan-dui/"/>
    <updated>2016-11-07T07:25:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/11/07/chuang-ye-ri-zhi-(si-)-man-xia-lai-de-tuan-dui</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/camel.jpg" alt="camel" /></p>

<p>之前去参加一个技术大会，中间碰到一个前同事，跟他们聊起公司规模，他们说每个业务线都有十十几号人，我说我们团队只有几个人，他表示非常惊讶，几个人能做出这么多东西？然后他领导就很忧郁的说，“我也挺纳闷，我们当初也是这么几个人，怎么感觉事情还是那么些事情，突然就需要这么多人了？”</p>

<p>前几天也跟老板聊起来，感觉产品研发变慢了，随便做个需求就要排期。我粗略一想，相比之前两三个月就把各平台都上线，现在确实没有什么印象深刻的产品变化。可是我们甚至连人都还是那几个人，这里面好像有哪里出了问题。</p>

<!--more-->


<p>想到几个原因，列举一下。最终也没得到什么结论，记得去年定的目标是对软件性能做量化分析，给自己定个五年目标，对软件工作量和负责度做定量分析。</p>

<h3>变懒的开发人员？</h3>

<p>看到这个问题，第一个想法是投入度。毕竟初创人员从0到1的时候是投入度最高的，两三天撸出一个功能，没事回家了还要加班把代码写完。到了后面常规功能迭代，则是趋向于按部就班，细水长流嘛。</p>

<p>有没有办法考察这个问题？我第一个想到了代码commit数。一般来说，代码commit数根据人的习惯不同差异会比较大，不能作为工作量参考标准，但是对于同一个人来说，提交频率、代码质量基本不会有太多变化，还是能反应开发的工作量多少的。</p>

<p>我从gitlab上拉了我们主仓库的活跃记录，结果发现：代码提交量并没有下降，并且随着后面加入了一个新同学，反而是上升了。看来细水长流还是打鸡血不太重要，只要保证大家每天能写代码的时间是足够的，生产量其实都没有多少差别。</p>

<p><img src="http://code4craft.github.com/images/posts/piaoniu-commit.png" alt="piaoniu-commit" /></p>

<h3>产品的二八法则</h3>

<p>一般来说，我们会先用比较低的成本做出最小可用的版本，一般都会比较简陋，技术遗留问题也很多。后面增加的功能，可能效果并不突出，但是占用的开发量未必会小。</p>

<h3>规模的烦恼</h3>

<p>《人月神话》中有个观点，使用软件的人越多，发现的bug越多。最近几天专门记录了一下自己时间的分配，发现一半时间都是在处理问题、解决bug中。</p>

<p>偷懒，后面不写了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创业日志（三）一年来一些技术上的总结]]></title>
    <link href="http://code4craft.github.com/blog/2016/10/30/chuang-ye-ri-zhi-%28san-%29%5Byi%5D-nian-hou-%5Byi%5D-xie-ji-zhu-shang-de-zong-jie/"/>
    <updated>2016-10-30T09:55:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/10/30/chuang-ye-ri-zhi-(san-)[yi]-nian-hou-[yi]-xie-ji-zhu-shang-de-zong-jie</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/stock-photo-162930137.jpg" alt="" /></p>

<p>转眼又到11月，加入票牛也快一周年了，作为初创团队的一员，走完了从0到1的过程，有些东西，还是想记录下来。如果分享能帮到别人，就更好了。因为我的工作主要是后端开发，有些经验会偏向后端一点。</p>

<!--more-->


<h3>1. 初创公司中技术的定位</h3>

<p>先说说技术的定位。除了一些技术方向的创业，技术一般都不是核心竞争力。但是技术团队并非没有追求，我觉得初创项目中技术的定位就是：快速试错。</p>

<p>作为初创团队，产品方向一般都会有一个探索期，没有人知道产品做出来之后效果如何，这个时候，快速上线并保持迭代就非常重要了。</p>

<p>我们是做一个垂直电商平台，第一个产品上线前，几个竞争对手就已经PC、M站、APP该有的都有了。但是我们花了四个月的时间把这几个平台全部做了出来，结果对手才改了两个小版本，这一点确实是有些优势的。</p>

<h3>2. 技术团队的构建</h3>

<p>团队当然是最重要的。其实我之前一直很向往人人都是精英的创业技术团队，每个人独当一面，谈起技术无所不知，分分钟劈技术情操。可惜来之后发现，这样的人是宝贝，来一个是一个，想要客户端、后端、前端都是这样的人就是妄想了。</p>

<p>但是业务发展确实需要人，而且最好确实能独当一面，这个时候怎么办呢？</p>

<p>这点只有一个经验：多挑挑。多投渠道，多面试，多培养。现在创业大潮下，人员流动也不是那么慢，从非知名企业出来的同学，可能相对来说技术多少有些偏科，但是有一些实践能力不错，也聪明好学的，在好的团队氛围下，也能在团队发挥很大能量。多用用招聘渠道，多花点时间，总归能招到满意的人。</p>

<p>另一个经验是招人尽量提前，如果到了产品需要发力的时候，才觉得人手不够，工程师还要安排时间去面试，是会很难过的。</p>

<p>我们技术团队到现在也只是六个人的规模，小团队最大的优势就是沟通成本很低，效率是关键。</p>

<h3>3. 谈谈基础技术选型</h3>

<p>一般来说，在大公司做业务开发，基础技术受到的限制很多，一旦自己放手来干，分分钟就要搞出一个新天地。什么Docker、微服务，能上的都想要玩一遍。基础技术选型上我们属于比较保守的，也没有走多少弯路，总结下来大概几个原则：</p>

<h4>1. 主要技术挑团队熟悉的</h4>

<p>这里我认为的主要技术包括：开发语言、数据库，语言涉及到代码积累，数据库涉及到数据积累，这两个都是迁移成本非常高的。另外语言涉及到相应的框架、工具链，数据库则常常会成为流量上去之后第一个垮掉的，这两个多少会有些疑难杂症，有一些技术积累，处理问题才相对有底气。</p>

<h4>2. 能提高效率的技术，不遗余力的用，不排除自己造轮子</h4>

<p>首先推荐Java 8，lambda是提高效率利器，特别是集合的stream操作太好用了。我们用在生产环境很久了，也没碰到什么大坑。</p>

<p>我们基于MyBatis开发了一套SQL生成器，可以根据Dao的方法名约定生成SQL，还开发了Intellij插件可以根据Entity生成建表语句，基本上开发的Dao我们只需要写模型类的几个字段。</p>

<p>我们基于jade4j开发了一套模板渲染方式，后端只需要在Controller写数据，前端写Jade模板和ES6，最后模板可以独立发布上线。</p>

<p>这些轮子的开发投入也就是两三天的时间，但是给我们节省了很多时间。项目都开源了，这是我们的github地址：<a href="https://github.com/ipiaoniu">https://github.com/ipiaoniu</a></p>

<h4>3. 关于微服务</h4>

<p>最近微服务很火，但是我们采用的还是单WAR包部署的方式。我一直认为，当开始将人员按照业务拆分的时候，微服务才开始产生实际的价值。而且单个项目带来的重构实在太便利了，在业务变化期尤其好用。</p>

<p>贴一下我们的一些技术选型吧，并没有多高大上，但还是比较实用的：</p>

<pre><code>服务器：阿里云ECS
负载均衡：阿里云负载均衡(4层)+nginx(7层)
CDN：七牛
数据库：MySQL ECS自建和RDS都用过，其实差不多，RDS相对贵一点，嫌麻烦的可以选
语言：Java 8 谁用谁知道
框架：Spring MVC + MyBatis Spring MVC够用了，MaBatis我们写了daogen
模板：jade4j 项目不是很完善，改过几个bug，但是支持jade可以与前端无缝衔接
运维：Ansible 用于初始化、发布、配置更新等
APM：Cat 虽然接入有一些坑，但是功能够用
监控：Zabbix 多找找开源的template，如果搭起来嫌麻烦可以找找Docker镜像
代码托管：gitlab 其实git.oschina.com或者coding.net都不错，私有库不收钱
</code></pre>

<h3>4. 几个有用的业务架构经验</h3>

<p>最后谈谈最想说的业务架构方面。因为毕竟80%以上的时间都是在写业务代码，如何把业务代码写得高效，也是一个非常重要的事。除了之前提到的工具化，一个好的架构起到的影响会比预想的大。这里有几点经验：</p>

<h4>1. 建立简单的核心业务模型，并让业务依赖它而不是互相依赖</h4>

<p>核心模型越简单越好，复杂的模型，一个是本身就很难处理好。即使能处理的很好，没有模型本身维护的成本，也会有理解成本，很难保证使用者不犯错。</p>

<p>例如我们做交易，其实核心的就是商品和订单。商品有库存、价格、描述以及一些业务属性（也就是SKU），而订单则是承载起交易行为的实体，会连接起用户、商品、支付以及后续的配货流程。</p>

<p>我们之前实际上吃过一次亏。因为演出是一个多层结构的商品体系，一个演唱会会有全国巡演，每个城市的演出也会有不同时间，同一时间根据座位好坏也会有不同票价，同一价格也会分为不同区域，加上我们做C2C平台还会有商家，所以层级非常多。最早我们的商品有6个层级，一次购买行为依赖这么多层次的数据，维护起来很困难。</p>

<p>而如果将SKU单独抽象出一个实体，交易流程并不直接跟商品架构打交道，则会容易得多。</p>

<p>核心业务模型的确定其实是个很难的过程，例如我们就在很长一段时间为SKU到底是同一价格的一类票，还是每一个单独的确定座位的票举棋不定。实在不行，到了明确的时候，尽早重构它。</p>

<h4>2. 活用“拼凑式开发”</h4>

<p>我们做过很多种运营活动。去年水果团单什么的火过一阵子，我们做过尝试。后来还做过砍价、秒杀、投票、特卖、预约等，有些形式被证明了不适合这个行业，有些形式也留了下来成了常规活动。</p>

<p>拼凑式开发的意思就是，不要随便修改核心模型和流程，通过在外围增加一些触发逻辑来完成功能。</p>

<p>有个非常经典的案例是，我们是一个卖票的网站，订单上挂的商品都是票，之前也是这么设计的。后来有个需求是我们可以让用户用较低的价格购买优惠券，然后等到演出有票的时候再使用优惠券来买票。做的同学很快想到说既然用户买的是优惠券，那么能不能把商品的范围扩大到票和优惠券，看起来模型也很统一？</p>

<p>但是这个方案后来被我否决了，因为预约券其实是小场景，也无法确定效果如果，是否能持续做。而商品是什么的问题，已经牵扯到核心模型，核心模型的复杂度增加几乎是不可逆的。最后的方案是：买的还是票，购买后根据消息触发发优惠券的行为，同样可以满足需求。然后再后来，这个业务也默默的消亡了…</p>

<p>拼凑式开发会有两个结局，一个是业务不做了，那么记得删掉代码，不要心疼；另一个是业务做大了，来了更多的优化需求，这个时候再拼凑式，会越改越累，因为拼凑式开发是违反高内聚原则的，它可能分散在各种核心流程的环节。这个时候，将它独立出来，作为单独的模块来维护。</p>

<p>另外，在核心流程的生命周期中，留几个扩展点也是很好的做法。做业务开发，特别是项目初期，一般都不太讲究开闭原则，反正改起来也挺容易。这一点实在是应该向Java界最经典的框架Spring学习，核心IoC支撑起其他所有功能。核心模块是值得按照开闭原则去设计的。</p>

<h4>3. 单个项目仓库和不断重构</h4>

<p>这一点可以算是小团队的优势。对于人多的团队来说，同一个代码仓库最大的问题就是并行开发时候的合并和冲突，不得不将项目分离。但是人少的时候，即使大家频繁提交代码，冲突也不会太多，这个时候单代码仓库的一些优势就能体现出来。</p>

<p>重构的成本会非常小。方法改名或者参数修改，借助IDE完成是分分钟的事情，大的改动也可以有明确的范围。我们在受够了6个层级的商品后，有一天终于决定要进行重构，结果删除了其中一层，保证项目语法检查通过之后，测试，删表，发现竟然已经没有了问题，整个代码重构时间不到一天，要知道之前在大团队做类似事情，时间会是以月计的，甚至有筹划数月，最终根本推不下去而放弃的时候。</p>

<h3>5. 关于创业</h3>

<p>说了这么多技术，其实创业一年来感受最多的不是技术本身。</p>

<p>你不太会在生产环境用上了Docker、Scala或是其他高科技而欣喜。当我看到公司发出去的快递信封，从轻松装进快递员的小袋子，变成了篮子装，再变成了小车装的时候，就会感觉自己还是做了点事情的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[要有点危机感]]></title>
    <link href="http://code4craft.github.com/blog/2016/06/27/yao-you-dian-wei-ji-gan/"/>
    <updated>2016-06-27T22:15:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/06/27/yao-you-dian-wei-ji-gan</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/stock-photo-42998730.jpg" alt="" /></p>

<p>最近心里特别恐慌。</p>

<p>每天上班下班，平平淡淡，却感觉很累。公司的架构设计大体完成，从0到1算是走完了，应付到几个月后都没有什么问题，上班完成工作也是游刃有余。业务稳步增长，也不怎么操心。下班带小孩，时间被占了去，却总想做点其他事情，心思却也难集中到小家伙身上。最后却把时间消耗在看电视或者玩游戏这种快速满足的事情上。</p>

<p>感觉时间除了岁数，已经带不来变化。</p>

<!--more-->


<p>之前的关注点在技术上，最近接触的东西多了，对技术的执着却少了。找不到想要做的事。其实在一个松散的环境，总归有这样的问题，对于一个实用主义者来说更是如此。</p>

<p>如何保持充分的热情对待每一天？想想可能有几个方法。</p>

<p>有挑战的事情。之前写代码的时候，遇到一个难题会很兴奋。年初定了3个目标，分别是减肥、开源项目和文章。其实这些事情感兴趣就可以做，总归是有收获的。自视不要太高，要学的还很多。</p>

<p>发现生活的美和乐趣。王小波说过，科学教人什么是对的，艺术教人什么是美的。我觉得我需要接受一下美的熏陶。</p>

<p>多思考，坚持做自己定立的目标。所谓的走出舒适区吧。现在每天拿到电脑或者手机，已经习惯性的去点开那么几个按钮，比如微信，比如邮箱。时间管理很重要的，比有效的时间管理更重要的是，知道时间应该干什么。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在WebMagic快要三岁的时候]]></title>
    <link href="http://code4craft.github.com/blog/2016/03/31/xie-zai-webmagickuai-yao-san-nian-de-shi-hou/"/>
    <updated>2016-03-31T23:33:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/03/31/xie-zai-webmagickuai-yao-san-nian-de-shi-hou</id>
    <content type="html"><![CDATA[<p><img src="http://img.piaoniu.com/webmagic.jpeg" alt="webmagic" /></p>

<h2>一 得到的</h2>

<p>最近关于WebMagic发生了几件很好玩的事。</p>

<p>第一件事是2000个star诞生了。记得14年跟同事讨论，那时Netty这样的项目差不多也就这个数，就说如果有2000个star，应该算是世界级的项目了。没想到现在竟然达到了这个目标，回过头来想真是很有意思。</p>

<!--more-->


<p>第二件事我在<a href="http://webmagic.io">webmagic.io</a>挂了我们票牛的连接，带过来的UV竟然一度排到了引流的前五。大家都笑我找到了流量变现的渠道了。</p>

<p>第三件事是在WebMagic的用户群里招到了新同事。小伙子比较腼腆，刚好要换工作，我在群里吼了一声，就联系我了，专门从杭州过来面试，然后没多久就入职了。</p>

<p>第四件事是我14年写了一个文档，结果前几天有个美国的友人帮我把中文文档全部翻译成了英文以及…乌克兰语。地址在这里：[<a href="https://github.com/alex4ip/docs">https://github.com/alex4ip/docs</a>]。我正在等他给我提pull request，这样子就有了帅气的三国语言文档了。</p>

<p>第五件是发现最近国内最近新发起的几个爬虫项目，多少都带有WebMagic的影子。比如：<a href="https://github.com/CrawlScript/WebCollector">https://github.com/CrawlScript/WebCollector</a>，或是这个：<a href="http://git.oschina.net/xtuhcy/gecco">http://git.oschina.net/xtuhcy/gecco</a>，<a href="http://www.oschina.net/p/guozhongcrawler">http://www.oschina.net/p/guozhongcrawler</a>，<a href="http://www.oschina.net/p/egg">http://www.oschina.net/p/egg</a>。
记得当时写WebMagic文档时，脑子一发热就写过：</p>

<p><em>一个好的框架必然凝聚了领域知识。WebMagic的设计参考了业界最优秀的爬虫Scrapy，而实现则应用了HttpClient、Jsoup等Java世界最成熟的工具，目标就是做一个Java语言Web爬虫的教科书般的实现。</em></p>

<p>我记得“教科书般的实现”还被某个同事吐槽过。现在看来还是有点说服力的。在WebMagic之前也有很多Java爬虫，例如Crawler4j等等，但是整体架构基本上千差万别。想想自己把一些东西引入了国内的Java爬虫界，还是觉得比较激动的。</p>

<h2>二 将来的</h2>

<p>说来惭愧的是，整个项目从14年6、7月份开始就维护的比较少了，很多问题也没有时间回复。比起好多项目的劳模一般的作者，实在差得很远。</p>

<p>记得我14年还写过一个<a href="https://github.com/code4craft/tiny-spring">tiny-spring</a>，结果现在再看spring已经是千差万别了。项目需要进步，人也是。技术的世界日新月异，这两年我却一直专心做业务，已经好久没有精雕细琢的写过代码了。</p>

<p>人嘛，还是要有点理想的。（已经跟媳妇申请，可以有点时间来写写代码，感谢媳妇支持！）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[激荡三十年读后]]></title>
    <link href="http://code4craft.github.com/blog/2016/03/16/ji-dang-san-shi-nian-du-hou/"/>
    <updated>2016-03-16T22:37:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/03/16/ji-dang-san-shi-nian-du-hou</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/jidang30nian.jpg" alt="激荡三十年" /></p>

<p>最近想读点历史的书，也想接触点其他专业领域，这类书写的浅显、有趣的不多。之前读的《众病之王》是一本，吴晓波的《激荡三十年》也是这么一本书。</p>

<!--more-->


<p>这本书是讲的是改革开放三十年来的经济发展，但是基本不列数据，不讲术语，甚至不提自己的观点，仅仅从代表人物出发，做一些归纳，是非常轻松的读物。</p>

<p>但是讲述的其实是很严肃的内容，这三十年的故事实在跌宕起伏，而且自己正身处这个变革中，所以看的时候好像也用上帝视角来看着自己的经历，看着中国的崛起，实在是让人内心激荡不已。</p>

<p>第一个感想是，再强大的个体都没办法抵挡形势。</p>

<p>第二个感想是，死掉的企业很多，在这么长的时间里，没有犯错的都活下来了。就像《火星救援》里男主说的：“你只要开始，进行计算，解决一个问题，解决下一个问题，解决下下个问题。等解决了足够的问题，你就能回家了。”</p>

<p><em>在1978年到2008年的中国商业圈出没着这样的一个族群：他们出身草莽，不无野蛮，性情漂移，坚忍而勇于博取。他们的浅薄使得他们处理任何商业问题都能够用最简捷的办法直指核心，他们的冷酷使得他们能够拨去一切道德的含情脉脉而回到利益关系的基本面，他们的不畏天命使得他们能够百无禁忌地去冲破一切的规则与准绳，他们的贪婪使得他们敢于采用一切的手法和编造最美丽的谎言。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年目标]]></title>
    <link href="http://code4craft.github.com/blog/2016/02/08/2016nian-mu-biao/"/>
    <updated>2016-02-08T10:26:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/02/08/2016nian-mu-biao</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/2015_16.jpg" alt="2016" /></p>

<p>新的一年，还是要给自己定一些目标吧。</p>

<!--more-->


<ul>
<li>减肥到180。</li>
<li>WebMagic发布至少两个大版本，完善代理、xpath等功能，并对基础代码进行部分重构。</li>
<li>对至少3个典型的业务场景（例如：账号、订单、商品）架构方案做全面的综述，提出自己满意的通用方案，并整理成文章，如果能写出开源项目就更好。</li>
</ul>


<p>去年没有明确订过目标，一些大的事情列一列吧：</p>

<ul>
<li>接触团队管理。</li>
<li>对性能优化有了一些定量的认识。</li>
<li>处理了一年case，对业务开发考虑更全面了。</li>
<li>有了从0到1的产品开发经历，并且还在继续发展。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[沸腾十五年读后]]></title>
    <link href="http://code4craft.github.com/blog/2015/12/25/fei-teng-shi-wu-nian-du-hou/"/>
    <updated>2015-12-25T23:38:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/12/25/fei-teng-shi-wu-nian-du-hou</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/feiteng15nian.jpg" alt="沸腾十五年" /></p>

<p>最近读了一本书叫《沸腾十五年》。这本书讲的是从1995年到2009年之间，互联网大佬们的创业故事。</p>

<!---more-->


<p>中国互联网至今短短二十年，已经改变了人们的生活方式，并且正在继续深化。</p>

<p>我这个人比较功利，看这类书总想找到一些他们成功的原因来。结果找来找去，如果真要找共同点的话，就是他们都在非常早的时候就进入了这个行业。</p>

<p>书里有一个观点：</p>

<p><em>一部中国互联网史中出现的成功创业者，要么是兴趣驱动、有着技术背景的极客；要么是胸怀世界，而又脚踏实地的海归；要么是有着超强执行能力的商业奇才。</em></p>

<p>我倒是觉得，相比这个。在那个时候，在他们开始做自己的产品的时候，外人是不看好甚至不理解的。互联网精神，就是敢于创新的精神。</p>
]]></content>
  </entry>
  
</feed>
