<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[代码工匠]]></title>
  <link href="http://code4craft.github.com/atom.xml" rel="self"/>
  <link href="http://code4craft.github.com/"/>
  <updated>2016-10-30T11:46:29+08:00</updated>
  <id>http://code4craft.github.com/</id>
  <author>
    <name><![CDATA[code4craft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[创业日志（三）一年来一些技术上的总结]]></title>
    <link href="http://code4craft.github.com/blog/2016/10/30/chuang-ye-ri-zhi-%28san-%29%5Byi%5D-nian-hou-%5Byi%5D-xie-ji-zhu-shang-de-zong-jie/"/>
    <updated>2016-10-30T09:55:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/10/30/chuang-ye-ri-zhi-(san-)[yi]-nian-hou-[yi]-xie-ji-zhu-shang-de-zong-jie</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/stock-photo-162930137.jpg" alt="" /></p>

<p>转眼又到11月，加入票牛也快一周年了，作为初创团队的一员，走完了从0到1的过程，有些东西，还是想记录下来。如果分享能帮到别人，就更好了。因为我的工作主要是后端开发，有些经验会偏向后端一点。</p>

<!--more-->


<h3>1. 初创公司中技术的定位</h3>

<p>先说说技术的定位。除了一些技术方向的创业，技术一般都不是核心竞争力。但是技术团队并非没有追求，我觉得初创项目中技术的定位就是：快速试错。</p>

<p>作为初创团队，产品方向一般都会有一个探索期，没有人知道产品做出来之后效果如何，这个时候，快速上线并保持迭代就非常重要了。</p>

<p>我们是做一个垂直电商平台，第一个产品上线前，几个竞争对手就已经PC、M站、APP该有的都有了。但是我们花了四个月的时间把这几个平台全部做了出来，结果对手才改了两个小版本，这一点确实是有些优势的。</p>

<h3>2. 技术团队的构建</h3>

<p>团队当然是最重要的。其实我之前一直很向往人人都是精英的创业技术团队，每个人独当一面，谈起技术无所不知，分分钟劈技术情操。可惜来之后发现，这样的人是宝贝，来一个是一个，想要客户端、后端、前端都是这样的人就是妄想了。</p>

<p>但是业务发展确实需要人，而且最好确实能独当一面，这个时候怎么办呢？</p>

<p>这点只有一个经验：多挑挑。多投渠道，多面试，多培养。现在创业大潮下，人员流动也不是那么慢，从非知名企业出来的同学，可能相对来说技术多少有些偏科，但是有一些实践能力不错，也聪明好学的，在好的团队氛围下，也能在团队发挥很大能量。多用用招聘渠道，多花点时间，总归能招到满意的人。</p>

<p>另一个经验是招人尽量提前，如果到了产品需要发力的时候，才觉得人手不够，工程师还要安排时间去面试，是会很难过的。</p>

<p>我们技术团队到现在也只是六个人的规模，小团队最大的优势就是沟通成本很低，效率是关键。</p>

<h3>3. 谈谈基础技术选型</h3>

<p>一般来说，在大公司做业务开发，基础技术受到的限制很多，一旦自己放手来干，分分钟就要搞出一个新天地。什么Docker、微服务，能上的都想要玩一遍。基础技术选型上我们属于比较保守的，也没有走多少弯路，总结下来大概几个原则：</p>

<h4>1. 主要技术挑团队熟悉的</h4>

<p>这里我认为的主要技术包括：开发语言、数据库，语言涉及到代码积累，数据库涉及到数据积累，这两个都是迁移成本非常高的。另外语言涉及到相应的框架、工具链，数据库则常常会成为流量上去之后第一个垮掉的，这两个多少会有些疑难杂症，有一些技术积累，处理问题才相对有底气。</p>

<h4>2. 能提高效率的技术，不遗余力的用，不排除自己造轮子</h4>

<p>首先推荐Java 8，lambda是提高效率利器，特别是集合的stream操作太好用了。我们用在生产环境很久了，也没碰到什么大坑。</p>

<p>我们基于MyBatis开发了一套SQL生成器，可以根据Dao的方法名约定生成SQL，还开发了Intellij插件可以根据Entity生成建表语句，基本上开发的Dao我们只需要写模型类的几个字段。</p>

<p>我们基于jade4j开发了一套模板渲染方式，后端只需要在Controller写数据，前端写Jade模板和ES6，最后模板可以独立发布上线。</p>

<p>这些轮子的开发投入也就是两三天的时间，但是给我们节省了很多时间。项目都开源了，这是我们的github地址：<a href="https://github.com/ipiaoniu">https://github.com/ipiaoniu</a></p>

<h4>3. 关于微服务</h4>

<p>最近微服务很火，但是我们采用的还是单WAR包部署的方式。我一直认为，当开始将人员按照业务拆分的时候，微服务才开始产生实际的价值。而且单个项目带来的重构实在太便利了，在业务变化期尤其好用。</p>

<p>贴一下我们的一些技术选型吧，并没有多高大上，但还是比较实用的：</p>

<pre><code>服务器：阿里云ECS
负载均衡：阿里云负载均衡(4层)+nginx(7层)
CDN：七牛
数据库：MySQL ECS自建和RDS都用过，其实差不多，RDS相对贵一点，嫌麻烦的可以选
语言：Java 8 谁用谁知道
框架：Spring MVC + MyBatis Spring MVC够用了，MaBatis我们写了daogen
模板：jade4j 项目不是很完善，改过几个bug，但是支持jade可以与前端无缝衔接
运维：Ansible 用于初始化、发布、配置更新等
APM：Cat 虽然接入有一些坑，但是功能够用
监控：Zabbix 多找找开源的template，如果搭起来嫌麻烦可以找找Docker镜像
代码托管：gitlab 其实git.oschina.com或者coding.net都不错，私有库不收钱
</code></pre>

<h3>4. 几个有用的业务架构经验</h3>

<p>最后谈谈最想说的业务架构方面。因为毕竟80%以上的时间都是在写业务代码，如何把业务代码写得高效，也是一个非常重要的事。除了之前提到的工具化，一个好的架构起到的影响会比预想的大。这里有几点经验：</p>

<h4>1. 建立简单的核心业务模型，并让业务依赖它而不是互相依赖</h4>

<p>核心模型越简单越好，复杂的模型，一个是本身就很难处理好。即使能处理的很好，没有模型本身维护的成本，也会有理解成本，很难保证使用者不犯错。</p>

<p>例如我们做交易，其实核心的就是商品和订单。商品有库存、价格、描述以及一些业务属性（也就是SKU），而订单则是承载起交易行为的实体，会连接起用户、商品、支付以及后续的配货流程。</p>

<p>我们之前实际上吃过一次亏。因为演出是一个多层结构的商品体系，一个演唱会会有全国巡演，每个城市的演出也会有不同时间，同一时间根据座位好坏也会有不同票价，同一价格也会分为不同区域，加上我们做C2C平台还会有商家，所以层级非常多。最早我们的商品有6个层级，一次购买行为依赖这么多层次的数据，维护起来很困难。</p>

<p>而如果将SKU单独抽象出一个实体，交易流程并不直接跟商品架构打交道，则会容易得多。</p>

<p>核心业务模型的确定其实是个很难的过程，例如我们就在很长一段时间为SKU到底是同一价格的一类票，还是每一个单独的确定座位的票举棋不定。实在不行，到了明确的时候，尽早重构它。</p>

<h4>2. 活用“拼凑式开发”</h4>

<p>我们做过很多种运营活动。去年水果团单什么的火过一阵子，我们做过尝试。后来还做过砍价、秒杀、投票、特卖、预约等，有些形式被证明了不适合这个行业，有些形式也留了下来成了常规活动。</p>

<p>拼凑式开发的意思就是，不要随便修改核心模型和流程，通过在外围增加一些触发逻辑来完成功能。</p>

<p>有个非常经典的案例是，我们是一个卖票的网站，订单上挂的商品都是票，之前也是这么设计的。后来有个需求是我们可以让用户用较低的价格购买优惠券，然后等到演出有票的时候再使用优惠券来买票。做的同学很快想到说既然用户买的是优惠券，那么能不能把商品的范围扩大到票和优惠券，看起来模型也很统一？</p>

<p>但是这个方案后来被我否决了，因为预约券其实是小场景，也无法确定效果如果，是否能持续做。而商品是什么的问题，已经牵扯到核心模型，核心模型的复杂度增加几乎是不可逆的。最后的方案是：买的还是票，购买后根据消息触发发优惠券的行为，同样可以满足需求。然后再后来，这个业务也默默的消亡了…</p>

<p>拼凑式开发会有两个结局，一个是业务不做了，那么记得删掉代码，不要心疼；另一个是业务做大了，来了更多的优化需求，这个时候再拼凑式，会越改越累，因为拼凑式开发是违反高内聚原则的，它可能分散在各种核心流程的环节。这个时候，将它独立出来，作为单独的模块来维护。</p>

<p>另外，在核心流程的生命周期中，留几个扩展点也是很好的做法。做业务开发，特别是项目初期，一般都不太讲究开闭原则，反正改起来也挺容易。这一点实在是应该向Java界最经典的框架Spring学习，核心IoC支撑起其他所有功能。核心模块是值得按照开闭原则去设计的。</p>

<h4>3. 单个项目仓库和不断重构</h4>

<p>这一点可以算是小团队的优势。对于人多的团队来说，同一个代码仓库最大的问题就是并行开发时候的合并和冲突，不得不将项目分离。但是人少的时候，即使大家频繁提交代码，冲突也不会太多，这个时候单代码仓库的一些优势就能体现出来。</p>

<p>重构的成本会非常小。方法改名或者参数修改，借助IDE完成是分分钟的事情，大的改动也可以有明确的范围。我们在受够了6个层级的商品后，有一天终于决定要进行重构，结果删除了其中一层，保证项目语法检查通过之后，测试，删表，发现竟然已经没有了问题，整个代码重构时间不到一天，要知道之前在大团队做类似事情，时间会是以月计的，甚至有筹划数月，最终根本推不下去而放弃的时候。</p>

<h3>5. 关于创业</h3>

<p>说了这么多技术，其实创业一年来感受最多的不是技术本身。</p>

<p>你不太会在生产环境用上了Docker、Scala或是其他高科技而欣喜。当我看到公司发出去的快递信封，从轻松装进快递员的小袋子，变成了篮子装，再变成了小车装的时候，就会感觉自己还是做了点事情的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[要有点危机感]]></title>
    <link href="http://code4craft.github.com/blog/2016/06/27/yao-you-dian-wei-ji-gan/"/>
    <updated>2016-06-27T22:15:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/06/27/yao-you-dian-wei-ji-gan</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/stock-photo-42998730.jpg" alt="" /></p>

<p>最近心里特别恐慌。</p>

<p>每天上班下班，平平淡淡，却感觉很累。公司的架构设计大体完成，从0到1算是走完了，应付到几个月后都没有什么问题，上班完成工作也是游刃有余。业务稳步增长，也不怎么操心。下班带小孩，时间被占了去，却总想做点其他事情，心思却也难集中到小家伙身上。最后却把时间消耗在看电视或者玩游戏这种快速满足的事情上。</p>

<p>感觉时间除了岁数，已经带不来变化。</p>

<!--more-->


<p>之前的关注点在技术上，最近接触的东西多了，对技术的执着却少了。找不到想要做的事。其实在一个松散的环境，总归有这样的问题，对于一个实用主义者来说更是如此。</p>

<p>如何保持充分的热情对待每一天？想想可能有几个方法。</p>

<p>有挑战的事情。之前写代码的时候，遇到一个难题会很兴奋。年初定了3个目标，分别是减肥、开源项目和文章。其实这些事情感兴趣就可以做，总归是有收获的。自视不要太高，要学的还很多。</p>

<p>发现生活的美和乐趣。王小波说过，科学教人什么是对的，艺术教人什么是美的。我觉得我需要接受一下美的熏陶。</p>

<p>多思考，坚持做自己定立的目标。所谓的走出舒适区吧。现在每天拿到电脑或者手机，已经习惯性的去点开那么几个按钮，比如微信，比如邮箱。时间管理很重要的，比有效的时间管理更重要的是，知道时间应该干什么。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在WebMagic快要三岁的时候]]></title>
    <link href="http://code4craft.github.com/blog/2016/03/31/xie-zai-webmagickuai-yao-san-nian-de-shi-hou/"/>
    <updated>2016-03-31T23:33:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/03/31/xie-zai-webmagickuai-yao-san-nian-de-shi-hou</id>
    <content type="html"><![CDATA[<p><img src="http://img.piaoniu.com/webmagic.jpeg" alt="webmagic" /></p>

<h2>一 得到的</h2>

<p>最近关于WebMagic发生了几件很好玩的事。</p>

<p>第一件事是2000个star诞生了。记得14年跟同事讨论，那时Netty这样的项目差不多也就这个数，就说如果有2000个star，应该算是世界级的项目了。没想到现在竟然达到了这个目标，回过头来想真是很有意思。</p>

<!--more-->


<p>第二件事我在<a href="http://webmagic.io">webmagic.io</a>挂了我们票牛的连接，带过来的UV竟然一度排到了引流的前五。大家都笑我找到了流量变现的渠道了。</p>

<p>第三件事是在WebMagic的用户群里招到了新同事。小伙子比较腼腆，刚好要换工作，我在群里吼了一声，就联系我了，专门从杭州过来面试，然后没多久就入职了。</p>

<p>第四件事是我14年写了一个文档，结果前几天有个美国的友人帮我把中文文档全部翻译成了英文以及…乌克兰语。地址在这里：[<a href="https://github.com/alex4ip/docs">https://github.com/alex4ip/docs</a>]。我正在等他给我提pull request，这样子就有了帅气的三国语言文档了。</p>

<p>第五件是发现最近国内最近新发起的几个爬虫项目，多少都带有WebMagic的影子。比如：<a href="https://github.com/CrawlScript/WebCollector">https://github.com/CrawlScript/WebCollector</a>，或是这个：<a href="http://git.oschina.net/xtuhcy/gecco">http://git.oschina.net/xtuhcy/gecco</a>，<a href="http://www.oschina.net/p/guozhongcrawler">http://www.oschina.net/p/guozhongcrawler</a>，<a href="http://www.oschina.net/p/egg">http://www.oschina.net/p/egg</a>。
记得当时写WebMagic文档时，脑子一发热就写过：</p>

<p><em>一个好的框架必然凝聚了领域知识。WebMagic的设计参考了业界最优秀的爬虫Scrapy，而实现则应用了HttpClient、Jsoup等Java世界最成熟的工具，目标就是做一个Java语言Web爬虫的教科书般的实现。</em></p>

<p>我记得“教科书般的实现”还被某个同事吐槽过。现在看来还是有点说服力的。在WebMagic之前也有很多Java爬虫，例如Crawler4j等等，但是整体架构基本上千差万别。想想自己把一些东西引入了国内的Java爬虫界，还是觉得比较激动的。</p>

<h2>二 将来的</h2>

<p>说来惭愧的是，整个项目从14年6、7月份开始就维护的比较少了，很多问题也没有时间回复。比起好多项目的劳模一般的作者，实在差得很远。</p>

<p>记得我14年还写过一个<a href="https://github.com/code4craft/tiny-spring">tiny-spring</a>，结果现在再看spring已经是千差万别了。项目需要进步，人也是。技术的世界日新月异，这两年我却一直专心做业务，已经好久没有精雕细琢的写过代码了。</p>

<p>人嘛，还是要有点理想的。（已经跟媳妇申请，可以有点时间来写写代码，感谢媳妇支持！）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[激荡三十年读后]]></title>
    <link href="http://code4craft.github.com/blog/2016/03/16/ji-dang-san-shi-nian-du-hou/"/>
    <updated>2016-03-16T22:37:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/03/16/ji-dang-san-shi-nian-du-hou</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/jidang30nian.jpg" alt="激荡三十年" /></p>

<p>最近想读点历史的书，也想接触点其他专业领域，这类书写的浅显、有趣的不多。之前读的《众病之王》是一本，吴晓波的《激荡三十年》也是这么一本书。</p>

<!--more-->


<p>这本书是讲的是改革开放三十年来的经济发展，但是基本不列数据，不讲术语，甚至不提自己的观点，仅仅从代表人物出发，做一些归纳，是非常轻松的读物。</p>

<p>但是讲述的其实是很严肃的内容，这三十年的故事实在跌宕起伏，而且自己正身处这个变革中，所以看的时候好像也用上帝视角来看着自己的经历，看着中国的崛起，实在是让人内心激荡不已。</p>

<p>第一个感想是，再强大的个体都没办法抵挡形势。</p>

<p>第二个感想是，死掉的企业很多，在这么长的时间里，没有犯错的都活下来了。就像《火星救援》里男主说的：“你只要开始，进行计算，解决一个问题，解决下一个问题，解决下下个问题。等解决了足够的问题，你就能回家了。”</p>

<p><em>在1978年到2008年的中国商业圈出没着这样的一个族群：他们出身草莽，不无野蛮，性情漂移，坚忍而勇于博取。他们的浅薄使得他们处理任何商业问题都能够用最简捷的办法直指核心，他们的冷酷使得他们能够拨去一切道德的含情脉脉而回到利益关系的基本面，他们的不畏天命使得他们能够百无禁忌地去冲破一切的规则与准绳，他们的贪婪使得他们敢于采用一切的手法和编造最美丽的谎言。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年目标]]></title>
    <link href="http://code4craft.github.com/blog/2016/02/08/2016nian-mu-biao/"/>
    <updated>2016-02-08T10:26:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2016/02/08/2016nian-mu-biao</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/2015_16.jpg" alt="2016" /></p>

<p>新的一年，还是要给自己定一些目标吧。</p>

<!--more-->


<ul>
<li>减肥到180。</li>
<li>WebMagic发布至少两个大版本，完善代理、xpath等功能，并对基础代码进行部分重构。</li>
<li>对至少3个典型的业务场景（例如：账号、订单、商品）架构方案做全面的综述，提出自己满意的通用方案，并整理成文章，如果能写出开源项目就更好。</li>
</ul>


<p>去年没有明确订过目标，一些大的事情列一列吧：</p>

<ul>
<li>接触团队管理。</li>
<li>对性能优化有了一些定量的认识。</li>
<li>处理了一年case，对业务开发考虑更全面了。</li>
<li>有了从0到1的产品开发经历，并且还在继续发展。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[沸腾十五年读后]]></title>
    <link href="http://code4craft.github.com/blog/2015/12/25/fei-teng-shi-wu-nian-du-hou/"/>
    <updated>2015-12-25T23:38:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/12/25/fei-teng-shi-wu-nian-du-hou</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/posts/feiteng15nian.jpg" alt="沸腾十五年" /></p>

<p>最近读了一本书叫《沸腾十五年》。这本书讲的是从1995年到2009年之间，互联网大佬们的创业故事。</p>

<!---more-->


<p>中国互联网至今短短二十年，已经改变了人们的生活方式，并且正在继续深化。</p>

<p>我这个人比较功利，看这类书总想找到一些他们成功的原因来。结果找来找去，如果真要找共同点的话，就是他们都在非常早的时候就进入了这个行业。</p>

<p>书里有一个观点：</p>

<p><em>一部中国互联网史中出现的成功创业者，要么是兴趣驱动、有着技术背景的极客；要么是胸怀世界，而又脚踏实地的海归；要么是有着超强执行能力的商业奇才。</em></p>

<p>我倒是觉得，相比这个。在那个时候，在他们开始做自己的产品的时候，外人是不看好甚至不理解的。互联网精神，就是敢于创新的精神。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年总结]]></title>
    <link href="http://code4craft.github.com/blog/2015/12/18/2015nian-zong-jie/"/>
    <updated>2015-12-18T23:09:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/12/18/2015nian-zong-jie</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.com/images/20151219.jpg" alt="time" /></p>

<p>2015年接近尾声了，又到了一年一度总结的时间。</p>

<!-- more -->


<h2>1. 生活</h2>

<p>生活依然美好。</p>

<p>小安安已经两岁半了，会跟我们交流，还第一次去了小托班。在她两岁生日的时候，我终于做了一件打算做了很久的事情：将小家伙上百G的照片和视频整理起来，编了一个十几分钟的小电影。我老婆看笑了，又看哭了。</p>

<p>第一天接安安去小托班回家的时候，我们一家人去了。阳光很温暖，小家伙被妈妈抱着，一直跟我们说个不停，这种感觉真是无比幸福。</p>

<p>最近每天回家，还要和老婆一起跳郑多燕减肥操，小安安也会跟我们学，这已经成了我们每日的家庭时间。</p>

<p>当然，我依然很少帮忙家务，懒的毛病也没有改。老婆的脾气依然那么大。不过嘛，相处久了，就习惯了。</p>

<h2>2. 工作</h2>

<p>工作上其实是躁动的一年。</p>

<h3>2.1 转管理的半年</h3>

<p>之前的技术上的水平和成果陆续被得到了肯定。年初的时候做了个晋升述职，升职也比较顺利。年中的时候做了一个服务性能提升的项目，还得到了公司范围内的肯定。虽然是好事，但是也让我有了危机感，因为要想发展，就要有更多提高。当时正在做的是交易后台系统的业务开发，所以技术上提高也比较有限。刚好有个机会，领导就让我去转管理了。</p>

<p>转管理这事并没有细想，毕竟在当时的条件下是个比较好的选择。我这个人还是比较随遇而安的。管理做了半年，带了2个不同风格的团队，整体来说可以给自己打70分吧，60分及格，10分是团队技术氛围还培养的不错。总结一下，技术转管理，最重要的还不是技能方面的改变，而是心态和思考方式的改变。比如：重新看待技术的价值，不再唯技术至上；比如，从过程导向到结果导向。但是说真的，心态和思考方式一旦改变，也就很难和以前一样，单纯的去做技术了。总体来说也是好事吧，可能失去了一部分技术的深度，换取的是技术以外的广度。</p>

<h3>2.2 创业的两个月</h3>

<p>转管理的几个月，正好机缘巧合，前同事创业，也就跟着去了。然后之前点评和美团合并，突然又感觉到了自己一个员工真的太渺小，就更加确定了去创业的决心。</p>

<p>创业的时候还是挺有意思的。老板给个指示大概就是“给我们的产品做个M站吧”，然后大家就开始做了，有很多自由发挥的空间。也会和市场和运营的同学配合，交流想要做什么之类的。相对来说，比起关心个人发展，关心公司发展会多一点吧。</p>

<h2>3. 技术</h2>

<p>技术分两块说。</p>

<p>纯技术方面提高不多。今年做了一个全公司的服务性能优化项目，对性能优化又有了更深刻的理解。另外因为需要，运维、DBA、前端、测试的东西各做了一些，并且用到了生产中去，也算是不错吧。还有在生产环境用了Java 8也是个进步吧。</p>

<p>从业务方面来说，在新公司搭建了一个完整的产品系统，包括商品、用户、导航、订单、运营后台、统计等，整体架构还有一定的扩展性，对一个产品有了一个大局观，这是收获比较大的地方。</p>

<h2>4. 读书</h2>

<p>今年读书比较杂，30岁还是一个比较需要思考的年纪。</p>

<p>纯技术方面的书基本没有，就把《代码大全》多啃了一部分。技术方向上的，读了《软件开发者路线图》《你的灯亮着吗》。</p>

<p>管理方面读了德鲁克的经典《卓有成效的管理者》。</p>

<p>其他的，读了尼采的杂集《人性的，非人性的》，王小波的《一只特立独行的猪》《黄金时代》。主要是有些观点能有点共鸣。明年会继续读一些。</p>

<h2>5 明年的一点计划</h2>

<p>明天的计划自然是公司能发展好。</p>

<p>个人能力方面，之前一直是执行者的角色。明年开始，要培养要想做一件事情，并集合别人的力量，去完成事情的能力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创业日志(二)--从修行到旅行]]></title>
    <link href="http://code4craft.github.com/blog/2015/12/10/chuang-ye-ri-zhi-er-cong-xiu-xing-dao-lu-xing/"/>
    <updated>2015-12-10T07:45:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/12/10/chuang-ye-ri-zhi-er-cong-xiu-xing-dao-lu-xing</id>
    <content type="html"><![CDATA[<p><img src="http://77flic.com1.z0.glb.clouddn.com/HWXZ_005018.jpg" alt="leasure" /></p>

<p>创业是一种修行的论调早已不陌生。当然，因为创业总要面临各种各样的问题，即使你解决了这些问题，到达的也未必是一个好的结局。作为修行，比拼的当然是意志力了，最后好像都是意志力强大的人站到了最后。</p>

<p>前段时间一直把创业当做一种修行，觉得总需要更加努力。</p>

<p>昨天下午的时候，修好了一个BUG，让搜索结果更准确了一点，让提示更方便了，感觉产品更强大了一些，也不需要谁点赞，想到一切都在往前走，真是一种享受。</p>

<p>甘之若饴才能更长久。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创业日志(一)——路程等于速度乘以时间]]></title>
    <link href="http://code4craft.github.com/blog/2015/12/02/chuang-ye-ri-zhi-yi-lu-cheng-deng-yu-su-du-cheng-yi-shi-jian/"/>
    <updated>2015-12-02T08:09:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/12/02/chuang-ye-ri-zhi-yi-lu-cheng-deng-yu-su-du-cheng-yi-shi-jian</id>
    <content type="html"><![CDATA[<p><img src="http://7fv9ui.com1.z0.glb.clouddn.com/oscimages/Boy-Alone-on-Long-Road-HD-Wallpapers.jpg" alt="image" /></p>

<p>昨天iOS最新的版本终于审核通过，经过了大概2个月的团队构建和产品迭代，现在产品的APP和M站已经完成，每天也有几百块钱自然的交易额。做了几次活动，活动的时候能够提高到几千一天。如果说创业是个竞赛，大概产品本身已经拿到了入场券的样子。</p>

<p>当然了，就如上面所说，也没有发生产品一上线就引爆这种事。说实在的，之前在点评，虽然不是巨头，好歹几百万的日活用户，当然系统承载的是每天一亿的交易额，相比之下落差还是挺大的。</p>

<p>我第一家公司就是创业公司，人到了30岁，也早就过了廉价贩卖理想的年龄了。不过，人到了30岁，也不能不没有点自己的思想。之前做WebMagic的时候，最开始半年无人问津，但是一直在默默迭代，后来大概一天3个星，过了两年也是个比较成功的项目。我还是比较相信只要一直在往前走，终于能到个什么地方的。</p>

<p>产品的粉丝群大概有两百多人，因为iOS版本上线，昨天很热闹，在群里提了好多bug。我倒是觉得，产品大了，其实就没有那么多功夫来一个一个了解用户了。从0到1到10到100都是个不同的过程，都是经历。另外，如果不想个办法享受过程，创业也实在太无聊了点。自勉。</p>

<p>对了结尾广告时间，公司APP叫“票牛”，是个卖演出票的网站，各大应用市场都能搜索到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[清理你的Mac]]></title>
    <link href="http://code4craft.github.com/blog/2015/07/11/qing-li-ni-de-mac/"/>
    <updated>2015-07-11T09:44:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/07/11/qing-li-ni-de-mac</id>
    <content type="html"><![CDATA[<p>之前图便宜，买了128G的Mac Air，结果最大的苦恼就是空间不够。今天终于抽出时间，写了一些小工具，清理一下无用的文件。</p>

<!--more-->


<h2>1. 查找大文件夹</h2>

<p>第一步其实是要查找哪些文件占据了磁盘空间。finder对于文件夹大小统计是无能为力的，这时候还要借助<code>du</code>来进行查找。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>du -hd1 <span class="c">#查找一级目录下各文件大小</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这样的工具始终不太方便，首先无法排序，也不太方便按照指定大小过滤。所以干脆自己写了一个脚本来做这个事情，利用了awk的一些功能。程序比较糙，用了很多临时文件。不过shell的风格就是：能够解决问题才是最重要的不是嘛。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">depth</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">size</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>sudo du -d<span class="nv">$depth</span> &gt; dud.log
</span><span class='line'>ls -al | grep -v <span class="s1">&#39;\.\.&#39;</span> &gt; lsd.log
</span><span class='line'>cat dud.log | awk -F<span class="s1">&#39;\t&#39;</span> -v <span class="nv">size</span><span class="o">=</span><span class="s2">&quot;$size&quot;</span> <span class="s1">&#39;$1&gt;size {print$1,$2}&#39;</span> &gt; dularge_tmp.log <span class="c">#awk无法直接用环境变量，所以使用-v先设置变量</span>
</span><span class='line'>cat lsd.log | awk -v <span class="nv">size</span><span class="o">=</span><span class="s2">&quot;$size&quot;</span> <span class="s1">&#39;$5&gt;size {print$5,$9}&#39;</span> &gt;&gt; dularge_tmp.log
</span><span class='line'>sort -k1 -rn dularge_tmp.log &gt; dularge_tmp2.log
</span><span class='line'>human_readable_size dularge_tmp2.log &gt; dularge.log
</span><span class='line'>cat dularge.log
</span><span class='line'>sudo rm dud.log
</span><span class='line'>rm lsd.log
</span><span class='line'>rm dularge_tmp2.log
</span><span class='line'>rm dularge_tmp.log
</span></code></pre></td></tr></table></div></figure>


<p>因为awk无法直接用环境变量，所以使用-v先设置变量。而且<code>du</code>还有一个坑：du出来的数字，并不是字节数，根据观察，应该是0.5K为一个单位。于是在脚本中海做了一些转换。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat dud.log | awk -F<span class="s1">&#39;\t&#39;</span> -v <span class="nv">size</span><span class="o">=</span><span class="s2">&quot;$size&quot;</span> <span class="s1">&#39;$1*512&gt;size {print$1*512,$2}&#39;</span> &gt; dularge_tmp.log <span class="c">#计算大小的时候，需要*512</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. 删除无效文件</h2>

<p>一遍扫描下来，发现Java项目竟然占了很大的部分，原因是mvn编译好的war包和jar包。怎么办？删之：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s2">&quot;target&quot;</span> -type d -exec rm -rf <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有发现QQ聊天记录的图片占据了5G多空间。这里有点麻烦的就是，我也不太希望将这些文件删除，因为可能会有一些重要图片。怎么办呢？我是将所有文件备份，然后将时间多于一段时间的删除。使用finder做这件事太慢了，还是用shell吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -mtime +150 -exec rm <span class="o">{}</span> <span class="se">\;</span> <span class="c">#删除150天之前修改的文件</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，空间释放出10G以上，又可以撑一段时间了…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近作为团队管理者的工作和定位]]></title>
    <link href="http://code4craft.github.com/blog/2015/07/01/zui-jin-zuo-wei-tuan-dui-guan-li-zhe-de-gong-zuo-he-ding-wei/"/>
    <updated>2015-07-01T23:07:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/07/01/zui-jin-zuo-wei-tuan-dui-guan-li-zhe-de-gong-zuo-he-ding-wei</id>
    <content type="html"><![CDATA[<p>最近转管理之后，因为某些原因临时带了两个团队，其中有些工作方式又发生了改变，总结一下。</p>

<!--more-->


<h2>工作</h2>

<p>最近一段时间的工作大概包括几部分。</p>

<h3>1. 调整团队工作内容</h3>

<p>之前本来想写“决定工作内容”的，但是现在想想过于理想化了。基层管理员的能力有限，基本上不能决定不做什么。</p>

<p>帮助产品经理和各个业务方理清需求，确立可行并且合理的方案，其实是主要任务。</p>

<p>主要涉及到几个工作内容：</p>

<ol>
<li>思考方案的合理性，时间成本和维护成本。尽量避免workaround的方案，有些东西做起来一时快，维护起来是无底洞。这部分主要是跟产品经理开会，时间视产品经理的执着程度来定。不过基本上都是一条战线的，只要能满足需求，极少有产品经理对方案有要求。</li>
<li>跟其他团队扯皮，确定什么东西是谁做。这个问题很多人都偏向于自己最省事的角度考虑，需要他们跟他们讨论，从整个系统的时间成本和合理性来做事。这部分费时费力，经常会议主题还会跑偏。最后不行只能老大拍板。</li>
</ol>


<h3>2. 跟进团队工作进度</h3>

<p>跟进项目的进展，评估风险点也是开发应该做的。团队培养的好的话，早上10分钟的站会足矣。</p>

<h3>3. 处理日常琐事</h3>

<p>一般作为业务的负责人，系统运转的case、各种咨询总会第一时间落到你这里。这是业务运营逃不掉的部分，但是比较琐碎，一般成员都不太乐意处理。之前我刚转管理的时候，会极细的一一处理这些问题，慢慢的将业务拆分成几部分，各自确定负责人的时候，可能就只用转达一下了。</p>

<h2>定位</h2>

<p>我觉得定位分为对上和对下两部分。对上就是理解和实现业务价值，对下就是提高团队战斗力。</p>

<p>我觉得重点说说对下，这部分其实是基层的核心竞争力。这部分我觉得主要是：</p>

<p>合理安排工作，考虑到成员成长和自我实现的需求。如果一个leader只是觉得完成任务，是不够的。我一直对team里面的同学说，我们产出的一个是项目，一个是人，在可控的范围内，我是鼓励大家多折腾，多思考的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转型管理的一点思考]]></title>
    <link href="http://code4craft.github.com/blog/2015/05/28/zhuan-xing-guan-li-de-yi-dian-si-kao/"/>
    <updated>2015-05-28T22:05:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/05/28/zhuan-xing-guan-li-de-yi-dian-si-kao</id>
    <content type="html"><![CDATA[<p>一个月前领导找我，说有个带团队的机会，问我有没有兴趣。我的目标是技术和管理上都要会一些，目前工作上技术路线提升已经很小，而管理基本上不会，有些挑战，所以就同意了。</p>

<p>后来的这一个月确实只能用“疲于应付”来形容，中间还因为太累头痛请假了一天。直到现在事情才稍微理顺一点，闲下来还是写写博客吧。</p>

<!--more-->


<h2>1. 价值观</h2>

<p>从开发到管理，首先个人价值发生了变化。作为开发，投资的是个人的技术能力，正所谓到技术好到哪都不怕；作为管理，投资的其实是你的团队，有了有战斗力的团队，才能做事不慌。团队的培养成本很高，而且也未必一直跟你，这也是管理不一样的地方。（当然了，无论技术还是管理，一个重要因素叫做“资历”，最终做成了什么东西，才也是最核心的竞争力。）</p>

<p>另外有意思的是，家庭和社会关系发生了变化。之前做技术，我也是一个不大不小的开源项目的发起人，个人网站也有十万以上的PV，按follow数在github上海排到前十，也跟老外谈笑风生，是很多小伙伴崇拜的对象。可是这都没有用，这没有给家里带来一分钱，老婆依然嫌弃我怎么不带小孩弄什么项目，亲戚依然觉得我是个技术型呆子。</p>

<p>然后转管理之后呢？我不太善于慷慨陈词，画大饼，上传下达也执行的不出色，在同级的管理者中间实在只算是平庸。但是呢，老婆再也不嫌我回家晚了，会体谅我是工作忙；亲戚也刮目相看了，觉得这人综合实力还不错。于是我自己也有自己变牛逼了的想法，但是究竟如何，我也不知道。</p>

<h2>2. 方法论</h2>

<p>管理说到底还是跟人打交道的学问，对上级对下级都是。对上级需要理解上级的期望，对下级需要考虑下级的需要。周末去听了一个培训课，老师讲的挺实在，“说到底这都是人性”。说真的，这可比跟代码打交道没谱多了。当然，相对来说要求也没那么高，可能写代码要求没BUG，而管理上只要没有大BUG，关键事情做好就行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于“技术人生”的一些重新审视]]></title>
    <link href="http://code4craft.github.com/blog/2015/04/14/guan-yu-ji-zhu-ren-sheng-de-yi-xie-zhong-xin-shen-shi/"/>
    <updated>2015-04-14T20:45:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/04/14/guan-yu-ji-zhu-ren-sheng-de-yi-xie-zhong-xin-shen-shi</id>
    <content type="html"><![CDATA[<p>又有很久不写博客了。最近博客内容离技术越来越远，主要是系统学习的机会和动力太少，很多琐碎的技巧又不想单独记录。年纪大了，除了技术之外，又有了一些其他的思考，我倒是很想把这些东西分享出来。</p>

<!--more-->


<h2>1. 这段时间技术的收获</h2>

<p>稍微总结一下技术方面的收获吧。其实收获就是没什么大的收获。技术接触久了，虽然还在做开发，但是很难在一个技术实现点上有太大兴趣了，更关注的是如何解决问题。因为业务也转移到了后台系统，所以技术关注点也从高性能、高可用转移到了业务模型、数据、复用性上面来。这方面能说的其实不多，更多的是把业务挖深，规划和理解产品。</p>

<p>最近最大的收获，可能是中间做过一个HTTP的分享，看了好几个RFC，边边角角都考虑到了。这次分享应该是我至今为止做过的准备最多、效果最好的分享，slides已经上传了，其中有些历史还是挺好玩的：<a href="http://share.csdn.net/slides/13538">《漫谈HTTP》</a>。另外就是一直在用hive拉数据，sql精进了不少，当然仅仅是使用，也没什么好说的。</p>

<p>最近一直在跟进一个大项目，算是架构师的角色，已经差不多顺利上线。其中也有些管理的心得，但是太初级，还是想要积累一段时间再记录下来。</p>

<h2>2. 这段时间看的书</h2>

<p>这段时间看的书都比较形而上。一本是《软件开发者路线图》，讲的是如何成为工匠级的开发者。这本书给我的震动颇大，以至于还专门去写了书评<a href="http://book.douban.com/review/7392173/">http://book.douban.com/review/7392173/</a>。另外一本是温伯格的《你的灯亮着吗》，讲如何解决问题，很有趣，值得一读。</p>

<p>最近正在看了一本书《淘宝十年产品事》，也对产品是什么有了更多的理解。书里提到的问题也是现在我面临的，特别是关于商品、搜索的理解，看完感觉非常有用。</p>

<h2>3. 这段时间的想法</h2>

<p>最近看了一些互联网的历史。20多年前，互联网还没诞生，而现在，互联网影响人的生活方方面面。技术发展让不可能变为可能，而后续的逐渐成熟又将实现产品的成本逐渐降低。能掌握一门技术，为这个时代的发展做一点事情，比起当初简单的做出产品更要吸引人。</p>

<p>这段时间对业务了解也加深了。开始去学会懂产品，懂整个项目的运作，懂得技术在项目中，到底是怎样的位置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于代码质量的一些思考]]></title>
    <link href="http://code4craft.github.com/blog/2015/03/20/guan-yu-dai-ma-zhi-liang-de-yi-xie-si-kao/"/>
    <updated>2015-03-20T10:27:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/03/20/guan-yu-dai-ma-zhi-liang-de-yi-xie-si-kao</id>
    <content type="html"><![CDATA[<p>今天刚好看到同事写一段代码，跟同事聊到一个代码风格的问题，讨论了一会，也没得出什么结果。回来想了想，之所以大家观点不一样，其实是一开始代码追求的目的就不一样。</p>

<h2>1. 可读性</h2>

<p>我是一直认为代码的可读性是最重要的目标。太多的书都讲到一个观点：“代码是写给人阅读的，只不过刚好能被计算机执行”。</p>

<p>大部分做自己产品的团队，一个项目的维护时间可能是开发时间的5倍以上，而维护的常见内容都是一些小功能以及已有bug的修复。可读性带来的好处就是，非常容易弄清一段功能逻辑，从而定位问题。遇到团队人员变动，新人也能很快的熟悉。我在公司换过很多组，也接手过很多的项目（大多数的可读性并不好），就这一点来说，真是切肤之痛。</p>

<p>什么样的代码，算是可读性好？我跟别人提过一个标准：“你写的代码，过了几个月、半年、一年，跟你说道一个功能，即使你不记得这个功能怎么做，你也能说清楚这个功能写在哪个地方”。这个标准我自己认为还是很有效的。</p>

<p>那用什么方法可以增加可读性呢？合理的拆分和抽象会增加可读性。另外，我其实一直崇尚“用最常用的方法写程序，直到它发展到你已经理解困难的时候，再去重构”。</p>

<!--more-->


<h2>2. 代码美学与合理性</h2>

<p>经历过跟很多人的合作，我发现，很多非常优秀的开发者，会从直觉上把一个代码片段“是否优美”作为第一考虑的目标。他们会追求一些高级编程技巧的合理运用，或者开发一些公共组件，来达到行数足够少，或是表达足够清晰的目标。这个好像教材里也不曾提到的，我把它叫做“合理的代码美学”。</p>

<p>对于Java代码来说，有人就喜欢把一些常见功能，用自定义注解，然后用AOP来完成注解的解释。例如，一个功能需要随时可以打开或关闭，我可以通过一个注解来完成它而不是在业务处理中写一些if-else-check。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@NewFeatureEnabled</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">(){</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上，完成一个“优美的”小功能，也就是用自己心中认为最好的方法去完成一件事，这样的满足感，也是让人持续编程的动力。严格的说，这样的代码有没有给代码质量带来提升呢？肯定有。第一很多时候这样的代码会经过更多的考虑，必然有更高的质量；第二很多更好的开发技巧，都是来自这些“不一样”的追求。</p>

<p>但是我认为，软件开发与艺术最大的不同是，它是一个多人合作劳动，一个人觉得合理的，其他人未必会感同身受，甚至会恰恰相反。这样的代码是蛋糕上华丽的三层奶油，有时会给人眼前一亮的感觉，但是也可能会让人找不到蛋糕本身。所以我的建议是：“如果你要用一个新技巧，最好积极宣传，和团队达成共识”。</p>

<p>比如这个<code>@NewFeatureEnabled</code>的功能，我会想：“如果别人接手这个项目，他是不是知道NewFeatureEnabled是什么意思？即使知道，他怎么知道这个功能的开关，是由其他地方一个AOP来完成的呢？”但是如果大家都接受这个方式，知道AOP是在哪里配置，如何工作的，那么也就是一个还不错的尝试了。</p>

<h2>3. 可复用性</h2>

<p>追求复用性是开发者的一个本能。大家都希望少写代码，最好要用的时候，一切都准备好了。我见过太多的代码为了复用而设计，但是基本上所有以复用为第一目标的代码，都没有什么好质量。为了复用的抽象，常见的就是把一段公用的代码块独立出来成为函数或者类，而这部分的逻辑甚至都是无法独立存在，也单独无法被人理解的。</p>

<p>我不是说可复用性不重要，但是它确实容易让人走上歪路。比较好的复用方式，应该是零件式的复用，每一块都有各自的规范和存在，但是这样的复用是一个严肃的过程，往往也达不到最大化的“代码复用”；比较差的方式是拼接式的复用，类似于为了表示一只猫和一只狗，把猫的身体和狗的身体复用成一块，然后写一堆判断代码来告诉别人什么时候这个身体是猫，什么时候这个身体是狗，最后再跟各自的脑袋组合起来。当然了，没有人知道这个“既是猫又是狗的身体”是什么。如果你想知道猫长什么样，估计得把半个项目都看完了。</p>

<p>如果一个项目以这样的思路开发久了，你会发现代码逻辑散落在各处，各种业务场景互相交织，任何改动都会牵一发动全身。</p>

<p>如果要为可读性排个名的话，我认为大概是：</p>

<p>毫无头绪的抽象&lt;只为复用的抽象&lt;不做抽象&lt;简单的抽象&lt;局部优美的代码&lt;整体优美的代码&lt;清晰的层次结构并抽象&lt;整体优美并且被大家接受的代码</p>

<p>最后一个层级，这样的代码实际上已经是更高的生产力了，就像Spring之于满地new对象就是个进步。可能代码进化到最后，真的就是跟自然语言那么简单，到时候我们就需要研究怎么在代码里写诗了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在29岁的最后]]></title>
    <link href="http://code4craft.github.com/blog/2014/12/29/xie-zai-29sui-de-zui-hou/"/>
    <updated>2014-12-29T23:23:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/12/29/xie-zai-29sui-de-zui-hou</id>
    <content type="html"><![CDATA[<p>女儿和老婆已经睡觉了，小家伙乖得很，最近已经会大声的叫爸爸了，好不可爱。最近一直没心思写文章，在14年的最后，还是写一点东西吧。</p>

<!--more-->


<p>本来14年总结已经写了，但是心里还是有些不安定。不安定主要来自几个因素：一是过了年，明年就30岁了，而立之年，却觉得自己没有而立的迹象；二是昨天听一个创业的朋友讲到她的经历，对比自己打工的安稳生活，有一些触动；三是最近看了几篇文章，大致是讲工作和个人发展的关系，讲到工作未必能带给你一切。</p>

<p>于是心里有些不淡定。未必一定要做什么，但是整理一下思路，发散一下思维，总归会让自己安心一点。</p>

<p>生活上走的平稳，结婚、买房、生孩，比起在大城市的同龄人来说，可能已经算是走的很快了。家庭幸福，经济上也算是过得去，没什么可挑剔的。</p>

<p>工作上也是走的平稳。三年工作经历，在的公司大众点评也算是上海互联网知名企业，目前是可以独当一面的一线开发。就工作三年来说，完全是靠自己稳扎稳打，提高速度还算是比较快的。但是因为毕业比较晚，所以年龄跟身边的一线开发比起来算比较大了。</p>

<p>关于工作，我觉得有两点还是比较重要的：</p>

<h3>1. 关于自我认识</h3>

<p>年龄大了最怕同学会，怕看到大家各自混得多好多好之类的。其实我觉得到了而立之年，未必是要事业小成，毕竟人的事业还有好多年可发展。更重要的是自己的思想要形成了，要知道自己要追求的是什么，不再因为别人的评价而改变自己的目标了。</p>

<p>我之前其实想过很多目标，比如最开始觉得要多掌握技术，多学习东西，输出技术影响力，所以写了WebMagic，又写了很多博客；后来又由于岗位重要性增加，逐渐又往公司业务发展，想要用技术产生更大的价值。这些其实都是很简单的技术人员的目标，用技术影响更多人。现在想起来，也只有为这个目标在奋斗的时候，才会觉得最充实、最快乐。</p>

<h3>2. 关于职业发展</h3>

<p>年中的时候调了一次薪，又因为一些家庭的压力，对经济的要求更加高了。因为公司的一些业务导向的方式，又让我似乎又“清晰的认识到了纯做技术的瓶颈”，不得不考虑到以后的职业发展的问题。</p>

<p>于是我回到了那个经典的“技术还是管理路线”的问题。有好一段时间，我一直在linkedin上翻各种人的简历。然后我发现一个现象：好多架构师出去了也能胜任总监、CTO的角色，而现在的总监、CTO也多是从基层技术做起，他们唯一的共同点就是：在这个技术和业务领域有很长的工作经历。</p>

<p>另外一个我看到的就是，其实技术职业发展相对扁平，有2到3次机会（有同一公司，也有跳槽），也就差不多了。对于自己来说，倒不如问自己，如果这样的机会来了，你是否能胜任，欠缺什么，更为重要。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年总结]]></title>
    <link href="http://code4craft.github.com/blog/2014/12/22/2014nian-zong-jie/"/>
    <updated>2014-12-22T22:47:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/12/22/2014nian-zong-jie</id>
    <content type="html"><![CDATA[<p>又是一年年底。今年我跟老婆结婚第三年，女儿也有一岁半了，一切安好，有家人的陪伴真好。工作上，今年是工作第四年，有了更多的责任，也有了不少的突破。</p>

<!--more-->


<h2>1. 生活</h2>

<p>生活的重点都在小家伙上。小家伙很可爱，看着她一天一天长大，也觉得很开心。带小孩还是比较累的，现在每天下班之后都需要陪她到睡觉，早上起来还要带个把小时。</p>

<p>因为工资涨了一些，虽然有不少的房贷，但是也没有什么压力了。后来和老婆也定了一些理财计划，以后会慢慢的执行，让生活越来越好。</p>

<p>生活越来越平淡，平平淡淡才是真嘛。</p>

<h2>2. 工作成果</h2>

<p>今年工作中发生的事情还是比较多的。</p>

<p>一个是随着工作经验的积累和自己的表现还不错，也受到了更多的重视。参与了几个比较大的项目，也有不少是作为负责人参与，在小伙伴中的声望也比较高了。年中的时候做了一个大项目，整个部门30多个人封闭开发了2个多月，得到了不少锻炼，也作出了不错的成绩。</p>

<p>在做这个项目的同时，我也体会到了团队的重要，后面就更多的参与到团队建设中来。后面的半年，我组织了接近20次分享，目的是让大家都能得到提高。这也给我们团队起到了不少的推动作用。</p>

<p>业余上，写的博客数下降了，但是今年花了接近一个月时间，写了一个WebMagic的文档。这是个大工程。因为这个工作，WebMagic的推广更加的迅速，已经有了接近700个star，QQ群也突破了500人。</p>

<h2>3. 技术提高</h2>

<p>技术方面，也还是有一些收获的。主要是往上(架构设计)，往下(性能优化)。</p>

<p>一个是设计方面，随着经验的增加，分析问题也有了一些方法论，使得做设计更加有章可循。总体来说是进步。</p>

<p>关于性能优化方面。年前做了一次重构，重构对象是公司最重要、调用量最大的团单服务，重构的结果，无论从效率还是可用性上来说，基本上已经优化到了业务的极限，瓶颈反而到了RPC中间件、数据库、缓存等地方。我记得年初的目标是“能对性能做定量分析”，今年看来算是达到了50%。</p>

<p>实际上总结下来，我发现无论往上还是往下，详细的分析往往比方案要更有价值。这也算是成为了我的一种方法论吧。</p>

<p>其他的技术提高比较琐碎，也乏善可陈。确实今年变懒了。</p>

<p>年底换了组，做一些ERP性质的开发，挑战更小，必须要自我提高了。要有点危机感。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[追求的和得到的]]></title>
    <link href="http://code4craft.github.com/blog/2014/11/12/zhui-qiu-de-he-de-dao-de/"/>
    <updated>2014-11-12T23:31:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/11/12/zhui-qiu-de-he-de-dao-de</id>
    <content type="html"><![CDATA[<p>今天做了两个月的团单服务改造终于上线了，相比之前的服务，性能基本上提高了一个数量级，稳定性也增加不少。这是今年做的最有价值的一个项目，之前服务数次S1故障的场景历历在目。而这次重构是按照业务量增加几倍来设计的，相信再过一两年都不太会出问题了。</p>

<!--more-->


<p>这个项目的完成还是比较曲折的，中间人员组织调整了好几次。从开始连CEO都亲自过问，到最后连找人改个bug都很困难。最后我承担起了项目跟进的工作，说实话推进很困难，还好还是按时上线。就在今天完成的当天，就听说这些业务要交出去了。</p>

<p>交就交吧，KPI其实是个浮云，这个也不做多想了。无论怎样，只希望把事情做好，以后提到这件事的时候，还记得我的名字，也就够了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近几个月的总结]]></title>
    <link href="http://code4craft.github.com/blog/2014/11/01/zui-jin-ji-ge-yue-de-zong-jie/"/>
    <updated>2014-11-01T07:53:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/11/01/zui-jin-ji-ge-yue-de-zong-jie</id>
    <content type="html"><![CDATA[<p>从转部门开始，一晃已经半年过去了。这几个月可以说是非常充实的一个月，学会了很多技术以外的东西。但是相对的，除了项目经验增加了之外，技术方面的进步却比较少，特别是很少有业余时间来研究技术，写写博客了。我还是希望能达到一个更平衡的状态，所以先总结一下。</p>

<!--more-->


<h2>1.收获</h2>

<p>先说说收获吧。</p>

<p>这半年做了一些很大规模的项目。之前基本上是领导分配具体任务给我，完成就行了。现在变成了领导只提大致内容，需要自己去负责。所以这段时间，学会了如何和其他部门配合，如何评估任务时间，如何协调资源，如何培养新人。这些都是之前不曾接触过的。</p>

<p>我的理解这也算是管理的基本课程。虽然我并不喜欢管理，但是个人力量毕竟有限，有些东西确实需要团队作战，我的价值观是能够做成事情，所以与我的目标也并不相悖。</p>

<p>在做这些事情的时候，我也学到了一些东西。与技术不同的是，总结一下，这些经验好像跟公司文化有很大关系。相对来说，我觉得有两点算是比较通用和重要的。</p>

<ul>
<li><p>沟通到位</p>

<p>  一旦涉及到跨组甚至跨部门合作，沟通就会非常重要。一个是事情进度会变得不透明，二个是有些事情能不能做成，也不是自己能决定的了。第一个要及时沟通避免风险，第二个则是要让上面知道，到底瓶颈在哪里，是不是你的责任。很无奈的是，之前我是非常讨厌开会的人，现在却不得不体会到了开会的重要性。</p></li>
<li><p>要有靠谱的团队</p>

<p>  一个有战斗力的团队是非常重要的。之前做了几个时间很紧的项目，因为参与人都还不错，完成的很顺利。做技术的还是要避免“我最厉害，什么都能做”的想法，多多利用团队的力量。项目不忙的时候，多多给新人锻炼的机会，这样在重要的时候才能顶上。</p>

<p>  不过话说回来，人本身的素质和意愿其实也很重要，你只能提供一个成长的环境和机会，没有办法强迫别人成长。这段时间也参与了一些招聘，算是这方面也有些了解。在我看来，成长的意愿比技术实力更加重要，也难怪HR要强调“追求卓越”了。</p></li>
</ul>


<p>另外一个有意思的是，我学会了“设计要以人为本”。这个意思并不是要多么人性化，而是指设计项目要考虑组织结构、人员组成这些因素。这个一直想写个博客，以后有空整理一下来讲。</p>

<h2>2.不足</h2>

<p>这几个月技术上进步不算多。唯一比较有意思的是，接手了公司访问量和复杂度最大的一个服务，做了很多维护性的工作，对故障分析、JVM调优的知识有了很多进步。</p>

<p>至于业余时间，基本上没有什么提高。WebMagic有半年没更新了，这半年也没有系统的分析过什么项目，也没有完整的看过什么书。</p>

<p>先说说原因吧，主要还是工作上的。主要是杂事增加了，这些事情可以分几类：</p>

<ul>
<li>新部门是直接跟销售打交道，每天都会有很多问题需要技术处理。</li>
<li>手头负责的业务重要性提高，处理事务、与需求方沟通的时间增加。</li>
</ul>


<p>老实说，最开始出现这些事情的时候，我心情是比较开心的，好像自己是个“人物”了，每个问题也一一处理。后来事情越来越多，非常分散精力。导致一下班，什么都不想干，要么倒头就睡，要么看看电影，让大脑处于不工作的状态。</p>

<p>最近这段时间我开始控制这些事情了，第一类问题我们组也有了值日生，专门负责处理；第二类问题我也会缩短时间，指定优先级，最近也更多的使用TODO LIST这种东西来管理待办事项和优先级了。</p>

<p>再一个原因，我觉得是随着年龄的增长、眼界的增加，想要的东西更多，可用的时间却更少。这个东西是不是传说中的“技术人的中年危机”呢？今年我给自己定了很多技术方向，比如成为性能分析的专家，比如研究SOA的设计，比如学一门非计算机的学科，但是每件都做的不算满意。一个是对深度要求更高，另一个是时间有限。</p>

<p>我的经验是，一个目标，刚刚确定的一个月半个月是最有热情的，如果这个时候因为各种原因，没花够时间的话，以后也不太能继续下去了。今年有太多这样的例子了。想做的事情很多，还是一定要专注。</p>

<p>没了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十一贵州行记]]></title>
    <link href="http://code4craft.github.com/blog/2014/10/07/guo-qing-gui-zhou-xing-ji/"/>
    <updated>2014-10-07T21:40:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/10/07/guo-qing-gui-zhou-xing-ji</id>
    <content type="html"><![CDATA[<p>十一陪老婆回贵州，住了几天。主要以陪老婆见亲戚和带宝宝为主，中间也有些见闻心得，记录如下。</p>

<!--more-->


<h2>关于二三线城市</h2>

<p>最开始的感受是贵州物价便宜，一顿饭30-40块钱已经是请客吃饭的水平了，在上海大概是一顿好一点的工作套餐。</p>

<p>硬件设施上，贵州一些市区的建设已经不输于上海周边的水平。比如我家住在上海外环边上，大概跟安顺市比较热闹的地段差不多。</p>

<p>但是服务质量上就相差甚远。在贵州很难打到出租车，拼车也已经成为一种惯例了，因为我们是四个人出行，基本没有司机愿意载，导致最后打到车都要对司机有一些感激之情。特别是从贵阳火车站出来那一段，全程人挤人，出租车点直接被人群挤满，但是因为交通阻塞，根本没有出租车过得来。相比在上海，火车站、飞机场的出租车点总是井然有序，在街边打车也很少拒载，也很少有司机想要拼车。</p>

<p>其实关于这种现象，我无意归结为素质问题，更愿意认为是地区文化和发展程度的问题。因为服务质量这种概念还没有成为习惯，大多数都还停留在满足基本的功能需要上。</p>

<h2>关于团购</h2>

<p>这次回家，让我惊讶的是我们的竞争对手美团的团购已经推广到六盘水市了，而点评则没有。跟几个朋友聊了一下，他们都算是还比较追随潮流的的年轻人，说都知道美团和大众点评，倒是团购都用美团，但是不知道点评还有团购业务。</p>

<p>团购在用户端就是电商，知名度、产品价格、丰富程度、用户体验、服务质量都决定了用户的选择。而且移动端用户一般不会同时对多个团购网站进行比较，于是很容易出现强者越强的现象。这一点点评在二三线城市失去了大部分机会，要扳回非常困难了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一次参加校招的心得]]></title>
    <link href="http://code4craft.github.com/blog/2014/09/24/di-yi-ci-can-jia-xiao-zhao-de-xin-de/"/>
    <updated>2014-09-24T22:43:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/09/24/di-yi-ci-can-jia-xiao-zhao-de-xin-de</id>
    <content type="html"><![CDATA[<p>这几天第一次参加了公司的校招面试，地点是南京。有意思的是，被安排做了测试的面试官。这里面有两层意思：第一是面测试的以妹子居多，对于我这种技术向宅男来说，基本超过了十年来说过话的妹子之和；第二是面测试的以非计算机专业的居多，没得聊只能聊研究方向了，于是我在这几天已经迅速掌握了“LTE-A在MIMO场景下预编码下w矩阵求逆的凸优化问题”。</p>

<p>这一次面试收获很多，总结如下。</p>

<!--more-->


<h2>1. 学生——走出象牙塔</h2>

<p>这次最大的感受就是又回到了毕业找工作那段时光，只不过角色换了一下。一晃过去已经4年了，总的来说，当年的我属于不善沟通、埋头做研究、对外界一无所知的那种。面试有过好几次碰壁。等到真正工作了，发现能力与公司的内容相去甚远，还好遇到了陈老师这样技术好且有耐心的的人带，当时拼命的做需求，慢慢的就跟上节奏了。</p>

<p>这次面试基本上都是研究生，做的内容都是高大上的研究，这种算法优化那种优化等等。说实在的，我在学校做过3年算法应用方面的研究，又在公司做了3年码农，感觉确实是做工程的门槛确实要低一点，所以那些研究做的好的学生无疑是比较聪明的。</p>

<p>但是反过来说，做这些研究能够提供的就业岗位确实有限，很多人还是要出来公司，做一些工程上的东西的。这个时候，对自己未来的职业发展有没有规划，可能是决定就业竞争力最重要的因素了。</p>

<p>这个准备无非就是几个方面：主动学习了工程相关的知识，业余做过几个小项目，最好还有过一两段实习经历。</p>

<p>其实现在开源社区已经足够成熟，如果做开发的话，通过接触和编写一些开源项目，是一个非常好的提升途径，效果基本上比在一些小公司做项目都要好。如果做测试的话(好吧我刚好面试的是测试)，可能途径会少一点，基本上只有在一定规模的公司，才能做出有效的实践。但是相对来说要求就会低一点(至少我面试的是这样)，掌握了了基本理论，已经算是比较不错了。</p>

<p>另外，有的面试官只会问到一些工程技能，会不会写SQL会不会Java之类，我觉得这也有些偏颇了。对于研究生，研究能力也是挺重要的。因为只做工程的人可能缺乏一些钻研的精神，而研究生这方面就会强一点。毕竟一个概念理解一个月也是常有的事，这在搞研究的时候属于才入门。这点时间已经可以读懂一个中等规模项目的源码了，这个在工程界水平已经比较高了。</p>

<h2>2. 公司——招聘和成本</h2>

<p>最开始的感受是，第一次感觉到了公司招聘的成本。几十个人什么事都不干跑来外地一住就是几天，而且这些人一般还都是专业比能力较强的，对公司日常业务发展影响其实挺大的。有些觉得不错的候选人，就因为面试官安排不过来，最后只能放弃了。</p>

<p>反映到自己身上就是一天从早面试到晚，强度非常大，第一天一共面试了15个。所以这种情况下面试随机性其实也挺大的，每次到了下午某点就觉得理解力显著下降。所以有些人考察的不仔细，也只能说是没办法了。结合自己当年的经历，好像也能够释然一点。</p>

<p>关于面试的环节、面试的内容，其实本来我之前写了很多东西。后来想想，当你确定了对候选人的期望之后，这些东西反而是不重要的了。比如你想知道他的研究水平，就看他能不能讲清自己研究的背景，是不是了解领域的现状、相关的外延技术，在具体描述一下研究的改进点，最后看看发的论文如何。比如想知道对于职业有没有规划，就看有没有看过类似的书、做过类似的项目、有过类似的实习经验。前面也说到，这两个再加一个基本的专业知识(数据结构、数据库、操作系统、网络、写代码)，差不多就是考察的全部内容了。</p>

<p>最后说说手写代码吧。受到陈皓老大的影响，我非常反感在面试中出纯算法题。这样的题目存在两极分化，大部分人不会做，做出来的基本上是背答案或者特别牛的。但是这个环节想考察的总归是一般性的能力。我借鉴了陈皓那篇文章中的关于atoi()的题目。实际效果上，这道题还是比较有区分度的。思维是否有逻辑、是否严密，编程习惯是否好，一下子就能看得出来。</p>

<p>顺便说一句，这次我负责初面，面试的结果还可以，通过的比例不小，而且这些人基本都过了复试。用分类模型来说，召回率和准确率都还可以，算是比较好的完成了任务。</p>

<h2>3. 一些后话</h2>

<p>絮絮叨叨这么多，不是想给谁谁什么指导，只是对自己这几天思路的一个总结。我其实反应比较慢，有些东西也是边做边学，但是希望还是通过这样的方式慢慢变得更厉害，发现更多优秀的学生。做好伯乐，善莫大焉。</p>
]]></content>
  </entry>
  
</feed>
