<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[非典型代码强迫症]]></title>
  <link href="http://code4craft.github.com/atom.xml" rel="self"/>
  <link href="http://code4craft.github.com/"/>
  <updated>2014-08-15T00:14:02+08:00</updated>
  <id>http://code4craft.github.com/</id>
  <author>
    <name><![CDATA[code4craft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈谈技术在职业发展中的意义]]></title>
    <link href="http://code4craft.github.com/blog/2014/08/14/tan-tan-ji-zhu-zai-zhi-ye-fa-zhan-zhong-de-yi-yi/"/>
    <updated>2014-08-14T23:32:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/08/14/tan-tan-ji-zhu-zai-zhi-ye-fa-zhan-zhong-de-yi-yi</id>
    <content type="html"><![CDATA[<p>今天跟领导聊了一会天，收获很多，有些事情之前没想到的，现在又有了新的认识。</p>

<p>职业发展追求的是什么？无非是更高的职位，更高的薪水。更高的职位可以让你能做更多的事情，更高的薪水则是生活质量的保证。对于技术来说，也希望自己的产品能够影响更多的人。</p>

<!--more-->


<h3>技术不是技术人的一切</h3>

<p>之前一直混技术社区，向往的是技术大牛。</p>

<p>在geek的世界里，可能根本没有“职业发展”一说，他们成天钻研更酷的技术，活在自己的世界。知乎上有一篇帖子<a href="http://www.zhihu.com/question/24612523">《在北上广深一线城市年薪二十、三十、四十万的码农的真实生活状态是怎样的？》</a>，可以参考一下。</p>

<p>之前一直在纠结以后是管理路线还是技术路线，今天听到一段话，觉得特别有道理：“其实什么管理路线，技术路线，最终还就是看你这个团队在公司受不受重视”，说白了就是跟对人。其实软件开发本质上来说还是个工程内容，技术再好，没有项目，不能给公司提供价值，自然也没什么好的回报。</p>

<hr />

<h3>技术的意义是什么？</h3>

<p>在我看来，第一，是安身立命之本。职业发展不可能一帆风顺，但是技术水平过硬，至少可以保证生存不成问题。诺基亚的裁员就是个例子。我面试的时候见过所谓十几年经验的“项目经理”，技术水平一团糟，可能还不如一年两年的新人的水平，在逆境时真的是个悲剧了。</p>

<p>第二，技术过硬的领导，会更容易得到下属的支持和尊敬。注意我这里用了“尊敬”两个词，其实真的如此。虽然不是leader，但是最近也临时带了几个项目，尊敬级别谈不上，但是明显能感觉到大家还是比较配合的。我的一个支付宝来的同事，老是说起他们老大做的什么什么，确实推崇的很。</p>

<p>第三，技术太烂，确实会做不好事情。当然，这也不直接导致他混的好不好，混的好的大有人在。</p>

<p>第四，个人追求。</p>

<p>能想到的就这些了，我的意思倒不是说谁对谁错，但是没有目标，盲目的觉得技术至上，也不太可取。毕竟我也是一个俗人，上有老下有小，职业发展也是不得不考虑的事情了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细节之美]]></title>
    <link href="http://code4craft.github.com/blog/2014/08/12/xi-jie-zhi-mei/"/>
    <updated>2014-08-12T23:05:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/08/12/xi-jie-zhi-mei</id>
    <content type="html"><![CDATA[<p>最近一个大项目忙完，今天领导召集大家，又要重新做另外一个项目，本质上就是要把之前的业务重写一遍。</p>

<!--more-->


<p>站在领导的角度来说，看重的是“拉大旗好办事”，大项目相对来说好拉资源，小伙伴们也能得到锻炼，对于团队来说绝对有利，无可厚非。</p>

<p>但是从纯技术的角度来说，好的项目是需要打磨的，无论是设计还是实现层面，都是一个迭代的过程。webmagic断断续续维护了一年了，好像现在也有很多同类的框架出现，我觉得webmagic最有竞争力的方面，不是单纯的架构设计有多好，而是github上100多个issue。</p>

<p>一个好的项目，优秀的设计占比30%，那么后续维护和完善基本上要占据70%的比例，这是我的观点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[缓存使用中的抽象泄露问题]]></title>
    <link href="http://code4craft.github.com/blog/2014/07/28/huan-cun-shi-yong-zhong-de-chou-xiang-xie-lu-wen-ti/"/>
    <updated>2014-07-28T09:37:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/07/28/huan-cun-shi-yong-zhong-de-chou-xiang-xie-lu-wen-ti</id>
    <content type="html"><![CDATA[<p>最近做的业务遇到一个比较棘手的问题：有一个比较核心的数据获取服务，因为其数据库比较分散，从数据库读取效率很低，于是需要使用缓存来解决问题。</p>

<!--more-->


<p>这个业务是非常依赖缓存的，现在就遇到一个问题：大部分请求都能让缓存工作的很好，但是少量请求会导致缓存的大量失效。</p>

<p>举个例子，现在做一个博客类网站，那么将博客文章缓存起来，因为大部分文章都满足访问热点，所以并没有太多问题。但是如果有一个服务，需要获取某个博主历史的所有文章，或者获取某个人收藏的所有文章，这个时候缓存就不太管用了。</p>

<p>了解了一些缓存淘汰算法，例如LRU、FIFO、LFU，以及LIRS等。但是无论任何算法都是依赖局部性原理(<a href="http://en.wikipedia.org/wiki/Locality_of_reference">Locality of reference</a>)的。局部性显然是根据使用场景不同而不同的。</p>

<p>而实际情况下，我们倾向于把缓存和数据库一起作为数据访问层，这种抽象对上层使用很友好，但是在场景增多、量级增大的时候，很可能出现问题。我的理解这就是缓存使用中的抽象泄露问题。</p>

<p>关于博客这个例子，比较合适的方式是用LFU代替LRU，但是依然会有些其他问题。写记录下来吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在工作满三年的时候]]></title>
    <link href="http://code4craft.github.com/blog/2014/07/24/xie-zai-gong-zuo-man-san-nian-de-shi-hou/"/>
    <updated>2014-07-24T21:54:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/07/24/xie-zai-gong-zuo-man-san-nian-de-shi-hou</id>
    <content type="html"><![CDATA[<p>连续忙了大概1个半月，没有9点之前回家过，今天项目终于临近尾声，回家写个博客吧。</p>

<p>转眼间工作满三年了。</p>

<!--more-->


<h2>1.生活</h2>

<p>三年前我怀揣着梦想来到了北京，后来又为了家庭来了上海。在北京的一年，没有家庭负担，和女朋友过着甜蜜的日子，工作虽然忙但是没什么压力，整天玩玩游戏，玩玩摄影，非常自在。工资其实挺低的，但是两个人在北京，一个小单间，已经觉得很开心了。</p>

<p>来了上海之后，组建了家庭，随后有了宝宝，过上了有责任的生活。生活上基本都围着小家伙转了，失去了一些乐趣，也得到了一些乐趣。或许这就是人生吧。以后需要投更多的时间在生活上。</p>

<h2>2.工作</h2>

<p>论工作状态，其实没有发生什么变化，因为技术总归是喜欢的事情，无论做什么都能找到乐趣。闲的时候就做技术钻研，研究开源技术，也搞出了webmagic这个不错的项目，也提交过几个著名项目的patch。忙的时候除了完成任务，也会探索一些工具化的方式，提高效率，也能从工作中积累一些实践经验。</p>

<p>工作三年了，因为对技术比较专注，也成了一些新人小伙伴学习的对象。而之前更多是作为一个新人来看待自己，这一点倒是需要调整了。</p>

<p>例如最近做的一个大项目，学到了很多东西。变化最大的是，因为带了几个新人，从之前单打独斗的方式，开始学会安排任务，利用大家的力量。其中感受比较深的就是，要学会合作，既要给能力不足的同事及时的支援，也要给新人合适的锻炼机会。可能确实上手的时候有一段适应期，但是一旦上手起到的作用，可能会超过你的预期。</p>

<p>一个连Java类和接口都分不清的实习生，在指导了大概一两天之后，也能独立的开发出MVC结构的一个完整功能了。所以即使是考虑到项目紧张，也不要只安排最没有技术含量的工作给他们。</p>

<p>也有工作两年的同学，因为之前没做过相关业务，所以迟迟动不了手的，这些给他们指明道路之后，也能够很快的跟上。</p>

<p>这一点我前期做的不好。一个项目7个人，我大概写了50%以上的代码，其中包括全部框架性质的内容，大致留给他们的是一些接口的实现工作。最后的结果就是开发完成的很快，但是后期修改需求都堆积在我这里，导致进度缓慢。于是今天决定停下项目，把手头做的东西好好讲一讲，让大家能够参与进来。事实证明这个方法效果很好，大家基本上能够分担很多任务了。</p>

<p>工作满三年，已经过了急着要证明自己的时候了。带领团队的成长，才是更需要做的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安安满岁了]]></title>
    <link href="http://code4craft.github.com/blog/2014/07/21/an-an-man-sui-liao/"/>
    <updated>2014-07-21T23:59:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/07/21/an-an-man-sui-liao</id>
    <content type="html"><![CDATA[<p>今天安安满岁了，我却还在公司加班，都没有能见她一面。相信付出总会有回报，能力加上努力，一定会让家里变得越来越好！</p>

<p>爸爸也好喜欢安安啊！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码大全读书笔记]]></title>
    <link href="http://code4craft.github.com/blog/2014/07/01/dai-ma-da-quan-du-shu-bi-ji/"/>
    <updated>2014-07-01T23:01:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/07/01/dai-ma-da-quan-du-shu-bi-ji</id>
    <content type="html"><![CDATA[<p>最近项目开发比较密集，也遇到了一些方式的碰撞，这个时候再翻到《代码大全》，真是瞌睡时碰到枕头的感觉了。决定好好读一遍，记录一下。</p>

<!--more-->


<p>xxiv: 软件构建是项目必须完成的阶段，它要为小型项目75%的错误负责，为大型和中型项目50%-75%的错误负责。——我们在项目的错误中，往往只看重设计的重要性，其实大部分错误都来自软件构建（即编程）本身。</p>

<p>P11：如何利用隐喻Metaphors（对软件的建模），将影响如何解决这个问题。</p>

<p>P28：程序员是软件食物链的最后一环。架构师吃掉需求，设计师吃掉架构，而程序员则消化设计。</p>

<p>P35：前期做好准备的项目，返工的成本是最低的。如果无法做到完全的准备，准备80%的需求，并为20%留够时间是一个可行的做法。</p>

<p>P46：架构应该确定软件采用的组织结构，并尽量列举其他可能的方案以及选择最终方案的理由。依据80/20原则，架构可以对确定决定项目80%功能的20%的类进行详细说明。</p>

<p>架构设计的常规内容(挑几个觉得重要的)：</p>

<ol>
<li>程序组织 Program Orgnization</li>
<li>主要的类 Major Classes</li>
<li>数据设计 Data Design</li>
<li>业务规则 Business Rules</li>
<li>安全性 Security</li>
<li>性能 Performance</li>
<li>可伸缩性 Scalability</li>
<li>容错性</li>
</ol>


<p>P51：在软件开发的链条中，链条的强度不是等于最薄弱的环节，而是所有薄弱环节的乘积。</p>

<p>P53：架构应该描述决策的动机，谨防“我们向来这么做”的说法。有个有趣的例子：Beth 想做丈夫 Adbul 家祖传的炖肉。Adbul 说，先撒上胡椒和盐，然后去头去尾，最后放在锅里盖上盖子炖就好了。Beth 就问了，“为什么要去头去尾呢？” Abdul 回答说，我不知道，我一直这么做，这要问我妈。他打电话回家一问，母亲也说不知道，她一直这么做，这个问题要问奶奶。母亲就打了个电话给奶奶，奶奶回答说，“我不知道你为什么要去头去尾，我这么做是因为我的锅太小了装不下”。</p>

<p>P62：选择合适的编程语言很重要。如果C的表达能力是1的话，C++和Java就是2.5。而perl和python却有 6。</p>

<p>P69：“深入一种语言编程”，而不只是“使用一种语言编程”。</p>

<p>P74：设计是一个险恶(Wicked Problem)的问题——只有解决或者部分解决才能被明确的问题。</p>

<p>P75：设计是一个了无章法的过程(Sloppy Process)，优、劣设计之间的差异往往非常微妙。</p>

<p>P77：软件的首要使命是管理复杂度。人们很少把技术原因归结为项目失败的主要因素，项目的失败多数由差强人意的需求、规划和管理导致的。但是，当项目确实由技术因素导致失败时，其原因通常就是失控的复杂度。</p>

<p>P79：拆分实际上是一种“关注点分离”。</p>

<p>高代价、低效率的设计源于三种根源：</p>

<ol>
<li>用复杂的方法解决简单的问题。</li>
<li>用简单但错误的方法解决复杂的问题。</li>
<li>用不恰当的复杂方法解决复杂的问题。</li>
</ol>


<p>P81：</p>

<p>高扇入(high fan-in)：指底层工具类被更多的类使用。</p>

<p>低扇出(low fan-out)：指一个类尽量少的依赖其他的类。</p>

<p>P84：程序调用、组合、继承的依赖程度从轻到中。继承是非常重度的耦合。</p>

<p>P90：</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[缓存不是万灵药]]></title>
    <link href="http://code4craft.github.com/blog/2014/07/01/huan-cun-de-she-ji-ji-qi-ta/"/>
    <updated>2014-07-01T08:00:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/07/01/huan-cun-de-she-ji-ji-qi-ta</id>
    <content type="html"><![CDATA[<p>公司有个很重要的服务，因为数据需求非常杂，所以关联的数据表非常多。而这个服务就承担起提供如此多数据的使命。</p>

<!--more-->


<p>现在的做法是极度依赖缓存的，所以数据都读取出来，打包存到缓存中。一旦失效，一条数据大概会需要上百毫秒去读取，于是我们不得不提供一个预热缓存的程序，定期的去扫描。之前出过一次问题就是缓存失效之后，该服务出现大量超时，乃至线程池跑满，整个服务都不可用。</p>

<p>在我的理解中，缓存是一个提高性能的方案，但是绝对不是万灵药，哪痛贴哪。比如这个服务，有些数据可能只有极少需求方需要，但是之前是统统都读取出来，而我觉得正确的做法可能是理清数据需求，从更细粒度去提供。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分层开发论]]></title>
    <link href="http://code4craft.github.com/blog/2014/06/28/kiss/"/>
    <updated>2014-06-28T22:51:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/06/28/kiss</id>
    <content type="html"><![CDATA[<p>做Java开发的都喜欢分层的思想，似乎层次是越多越好。虽然之间我并不喜欢层次太多，但是也没有太多的理由让我去厌恶它。但是最近在做一些开发，刚好用了两种极端的方式来完成。</p>

<!--more-->


<p>最近在跟同事一起开发项目。两个类似的项目，大致都是一个中间层，从数据库载入一些数据，然后调用另外一个服务。从复杂程度上来说，差距并不大。前一个项目因为之前是他在做这块业务，所以由他主导，结果一开始就分成多层结构，从DAL,DOMAIN,BIZ一层一层往上写起，中间大概有5个对象来完成层级的隔离，转来转去。结果结对编程一个星期，终于弄出雏形。</p>

<p>后来我写另外一个项目，因为开发时间紧，所以理清了业务流程之后，划分为三个阶段，直接分为三个模块，模块内部不分层，从外到内开始写，结果半天就完成了。</p>

<p>到底是分层还是不分层好？分层的意思是隔离变化，核心业务与外部调用分开，降低系统与外部的耦合。但是一般来说，互联网应用内部逻辑相对简单，大部分时间都是在干一些数据相互转换的事情，这种事情你要说跟外部不耦合基本不可能。一般来说，考虑到成本问题，除非需求和数据发生变化，否则外部API变动的可能性极小。这样子耦合的成本并没有那么大。</p>

<p>相反，我觉得系统内部的简单性更加重要。越少开发效率越高，修改越容易，也越不容易出错，分层结构必定是增加了复杂度，但是收获却相对较少。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[没有银弹-谈谈软件设计的几个矛盾(二)]]></title>
    <link href="http://code4craft.github.com/blog/2014/06/17/conflict-cont/"/>
    <updated>2014-06-17T07:49:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/06/17/conflict-cont</id>
    <content type="html"><![CDATA[<h3>1. 关联与冗余</h3>

<p>数据库第三范式种约定，数据没有传递依赖性，但是在互联网应用中，会存在非常多冗余的情况。冗余的目的主要有几个：</p>

<ol>
<li><p>性能</p>

<p> 将所有需要的数据冗余到一起可以提高性能。</p></li>
<li><p>解耦</p>

<p> 一般来说，互联网行业一般都希望一个应用的逻辑尽可能简单，依赖方尽可能的少。冗余数据可以将多个数据源的数据整合到一个数据源，那么应用本身就无需关心这部分逻辑了。</p></li>
<li><p>允许变更</p>

<p> 如果系统A使用了B的数据之后，又有自己独立变更的需要，那么冗余就必不可少了。</p></li>
</ol>


<p>其实从某种意义上，我觉得2比1更重要。而3则是根据需要来决定。从优先级来说是3&gt;2&gt;1。</p>

<p>冗余的坏处有几个：</p>

<ol>
<li><p>有同步的成本</p>

<p> 如果冗余的是一个会发生更新的数据，那么数据同步的成本就不得不考虑了。</p></li>
<li><p>增加整体复杂度</p>

<p> 其实这个是基于1的基础上的。如果只是冗余了数据，后续无需同步，其实系统会相对简单。但是如果有同步的需求，那么可能会有很多个同步的逻辑甚至系统，最后会让整个系统变得复杂和不可控。</p></li>
</ol>


<p>其实第1条的同步机制总归是可以实现的，但是第2条的复杂度才是最需要考虑的地方。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[没有银弹-谈谈软件设计的几个矛盾]]></title>
    <link href="http://code4craft.github.com/blog/2014/06/16/ruan-jian-she-ji-de-ji-ge-mao-dun/"/>
    <updated>2014-06-16T09:30:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/06/16/ruan-jian-she-ji-de-ji-ge-mao-dun</id>
    <content type="html"><![CDATA[<p>最近在做项目的重构和功能改进，设计做了很多，也发生了一些争执。其实总结下来，很多争执的内容其实早就是经典的问题。这些问题没有孰优孰劣，具体采用哪种方案，还得因地制宜，详细分析项目需求和复杂度之后，再做决定。之前很多人都试图只从宏观指导思想来决定设计，最后大家谁也不服谁，所以先把问题确定下来，至少以后思考问题会直接一点。</p>

<!--more-->


<h3>1. 拆分与合并</h3>

<p>从现实世界来说，事物本身就是互相联系的，从这个观点来看，任何对事物的拆分都是不完全正确的。</p>

<p>但是软件开发中，人的理解能力是有限的，而拆分目前看来是降低单个项目复杂度最有效的办法。</p>

<p>拆分有很多级别，最小的可能是拆分代码段，用多个函数代替单个函数，然后是用多个类代替单个类，在Java里面，还可以拆分package，然后拆分jar包，最后拆分成不同的项目。</p>

<p>之前有过很多的争执，关于一个项目要拆还是不拆，以及如何拆。关于这个，我的建议是：</p>

<ol>
<li><p>拆与不拆没有对错</p>

<p> Windows是微内核架构，Linux是单内核架构。微内核意味着内核很小，你可以通过很多个模块去补充它，内核与模块是解耦的。Linux是单内核，就表示所有内核功能会在编译时就确定。可能大家都觉得微内核更好，很多时候它确实更好，但是Linus有个经典的论断：“你不需要管理各个模块，但是你需要处理模块之间的依赖，这个可能比模块本身更复杂”。因为事物本身就是互相联系的，你觉得他们不存在耦合，只是当前使用场景用不到而已。</p></li>
<li><p>系统内部实现对外部透明，保留拆或者不拆的选择权。</p>

<p> 项目自身的复杂度，完全可以靠内部实现解决，对外保持约定好的API，这样对于以后内部的重构，会简单得多。相反，如果暴露了内部实现，那么修改就很困难了。</p></li>
<li><p>对于项目拆分，如果没有充足的理由支持拆分，就不要拆。</p>

<p> 不成熟的拆分，最常见的结果是，随着需求的变化，你不得不打破这种解耦关系，这样反而会带来更多的问题。建议是需求稳定之后，再考虑拆分。</p></li>
<li><p>在系统内部多多进行代码级别的拆分，管理复杂度。</p>

<p> 相比项目的拆分，函数和类级别的拆分成本非常低，值得多用。</p></li>
</ol>


<h3>2. 配置化与灵活性</h3>

<p>一段代码，如果使用一遍，那么我们就直接通过代码实现了。如果我们有几十上百个类似的任务，那么我们就不希望写重复的代码了，我们希望能够通过配置几个不同的参数，从而实现不同的任务。如果任何以后还有不断变化的需求，我们甚至不希望自己写配置，而是有一个运营后台来让需求方(可能是不懂开发的人)直接完成配置。</p>

<p>配置化的开发方式往往对开发者来说有很大的诱惑，从而忽略其中的成本，这个配置最近还有个很火的名字，叫做DSL。但其实配置化和灵活性是矛盾的，配置的表述能力自然要弱于通用语言。当然，也有人尝试使用配置解决所有问题，结果只不过是发明了一门很难用的语言而已。</p>

<p>我自己的框架WebMagic是一个经典的配置与灵活性权衡的例子。WebMagic是一个垂直爬虫框架，爬虫最复杂的是规则的编写，你可以认为这是一个可配置的东西。公司基于它做了一个配置后台，即使是这样，仍然有一些情况，不得不手写Java代码来实现一些功能。</p>

<p>对于这个问题，我的建议是：</p>

<ol>
<li><p>先写代码解决问题，但是提前约定接口。</p>

<p> 第一个阶段，没有谁能预测以后的需求，所以先用你熟悉的代码实现。可以根据你的输入和输出，约定程序级别的接口，相比配置化，这一般来说会容易，如果接口设计得当，也会有具有很大灵活性，以后基本无需更改。</p></li>
<li><p>在有一定积累之后，基于以往的任务做配置化。</p>

<p> 配置的内容是什么呢？首先公共逻辑肯定会在整体框架中，配置的内容应该是不同任务彼此独特的部分。这个配置格式，或者DSL的语法的约定，首先应该基于已有的任务，然后可能考虑一下未来的情况。我是个实践主义者，所以我更多的会参考已有的情况，如果发现这个配置化的框架，对之前的任务都不能满足，那么就需要思考一下它的可行性和必要性了。</p></li>
<li><p>在任何时候都保留能使用代码实现的能力。</p>

<p> 我是个实用主义者。有了配置，如果不提供代码实现的能力，而又有一些复杂的需求，那么就只能扩展配置的能力了。这样只可能会导致这个配置解决框架变得极其庞大和复杂，而相对收益却很低。这个时候，可以通过配置解决大部分问题，然后通过代码解决少量问题，也是不错的选择。</p></li>
</ol>


<h3>3. 总结</h3>

<p>其实还有很多东西没说到，以后补充吧。</p>

<p>总结一句话：软件设计要适应满足需求，同时不断演化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于业务架构的一些思考]]></title>
    <link href="http://code4craft.github.com/blog/2014/06/12/guan-yu-ye-wu-jia-gou-de-yi-xie-si-kao/"/>
    <updated>2014-06-12T07:24:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/06/12/guan-yu-ye-wu-jia-gou-de-yi-xie-si-kao</id>
    <content type="html"><![CDATA[<p>最近换了部门，接手了好几个新项目，也进行了一些重构的尝试，总结一些经验。主要针对Web开发领域，算是抛砖引玉了。</p>

<!--more-->


<h2>1. 经历的几种业务架构的方式</h2>

<p>公司是典型的SOA架构，Web层之下就是远程Service。Web层负责调用Service，Service则在内部整合缓存、数据库等内容，实现业务逻辑。</p>

<p>这样的结构没有什么问题，问题就在于Service内部的实现上。即使是Service的一个方法，内部实现也可能很复杂，这就涉及到代码分解的问题。</p>

<p>例如：在一个SNS系统中，我有一个UserService，负责User的CRUD。当然实际逻辑会比较复杂，例如新建User要创建用户，还要初始化积分、等级、收件箱等内容。那么，我该怎么做这件事呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">UserDTO</span> <span class="n">userDTO</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">updateUser</span><span class="o">(</span><span class="n">UserDTO</span> <span class="n">userDTO</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">UserDTO</span> <span class="nf">getUser</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.1 随意拆分式</h3>

<p>我们之前的结构很随意，大部分代码都直接写在Service的实现类中，Service直接访问Dao实现逻辑。如果过于复杂，则会拆分成一些小的内部Service，并把它们聚合起来。这种方式在业务不复杂的时候，其实工作的还挺好的。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0612/000228_XQfi_190591.png" alt="架构1" /></p>

<h3>1.2 水平分层式</h3>

<p>新接手的项目，老实说业务会更复杂。之前的做法是将业务分为了dal-数据库访问、domain-领域模型抽象、biz-业务逻辑、service-服务集成四层。例如一个查询数据的操作，可能要经历这么多个分层的流转，才能最终提供外部服务。这样分下来，代码的全复杂度确实也低了不少。</p>

<p>但是这个划分让我接手项目的时候困惑了很久，导致我觉得自己是不是理解能力下降了。后来在着手重构的时候，发现其实很多层次边界根本就很模糊了，甚至连参与维护者也不是很清楚。</p>

<p>过多的分层，会增加坏代码的破坏力，如果边界不是足够清晰，那就不如不分。</p>

<p>我理想的水平分层其实Web-Service-Dao已经足够了，因为他们的边界相对清晰，直接把Dao当做模型也工作得挺好，抽象出Domain来，根据已有的经验略微多余。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0612/000255_uD3s_190591.png" alt="架构2" /></p>

<h3>1.3 垂直拆分式</h3>

<p>今天在做另一个项目的时候，尝试用一个责任链的方式来做这个事情。采用了垂直拆分的方式，将完成一件事，按照不同的模型，进行了细分，分成多个Processor，接口类似下面这样。Service内部只对这些子Processor做链式调用，它甚至也不知道有多少个Processor。结果这种方法出奇的好，大家发现并行开发很方便，测试也好写了，修改也方便了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Processor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAdd</span><span class="o">(</span><span class="n">UserDTO</span> <span class="n">userDTO</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onUpdate</span><span class="o">(</span><span class="n">UserDTO</span> <span class="n">userDTO</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDelete</span><span class="o">(</span><span class="n">UserDTO</span> <span class="n">userDTO</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://static.oschina.net/uploads/space/2014/0612/000311_enMh_190591.png" alt="架构3" /></p>

<h2>2. 结论：几个架构的检验标准</h2>

<p>经过多次的折腾，也接手过不少的项目，我得出这么几个结论：</p>

<h3>2.1 一段逻辑，要能让别人轻松的定位到代码在哪里</h3>

<p>这是我参与了很多项目的感受。好的结构并不需要跟踪很多代码层次，才能发现其中的逻辑到底在哪里。相反坏的架构可能有很多层抽象，单个复杂度不高，但是一段逻辑你根本不知道在哪一层。当然也可能是逻辑本身就揉成一坨，也不容易找到想要的东西。</p>

<p>快速的发现相关逻辑，可以减少很多维护成本。</p>

<p>当然，有些架构有学习成本，但是掌握之后，能够满足这个要求，我觉得也可以算是好的架构。</p>

<h3>2.2 Web开发，可扩展性大于可复用性</h3>

<p>根据我一些有限的经验看来，在互联网领域，复用的需求，其实并不如产品需求变更来的迫切。水平分层很大的动机是复用，但是往往内部的复用程度比较有限。而面对需求的变化，水平分层基本上从上到下都进行修改。而合理的垂直拆分可以只修改一个地方，这也是所谓的开闭原则了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重玩了一会wow]]></title>
    <link href="http://code4craft.github.com/blog/2014/06/02/zhong-wan-liao-yi-hui-wow/"/>
    <updated>2014-06-02T06:16:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/06/02/zhong-wan-liao-yi-hui-wow</id>
    <content type="html"><![CDATA[<p>最近重新玩了一段WOW，边玩边回忆起大学那段疯狂的时光。WOW好像从另一条支线，串起了我对大学时光的记忆。</p>

<!--more-->


<p>最开始的那个矮人圣骑士出现在丹莫罗的白雪中，是06年4月的事了。上游戏去输入/played，总共时间接近300天。这几天脑子里开始回忆和同学一起下副本，再后来开始raid，经历了工会的起起落落。虽然最怀念的还是才开始探索游戏的乐趣，但是已经不知不觉陷入了装备的游戏中去了。</p>

<p>最近上线跟随机团打通了熊猫人的最后副本——脑残吼，打完腰酸背痛，果然是老了…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HttpClient使用坑一则——关于Post Data的encoding]]></title>
    <link href="http://code4craft.github.com/blog/2014/05/26/httpclientshi-yong-keng-yi-ze-guan-yu-postdatade-encoding/"/>
    <updated>2014-05-26T21:31:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/05/26/httpclientshi-yong-keng-yi-ze-guan-yu-postdatade-encoding</id>
    <content type="html"><![CDATA[<p>之前有个Http服务，使用Serlvet API实现的，现在遇到一个问题：一个同学使用HttpClient进行POST调用，结果中文传过来都是乱码。</p>

<!--more-->


<p>使用自制抓包工具<a href="https://github.com/code4craft/dp-idea">DP-IDEA</a>抓包分析Http请求，发现类似<code>&amp;value=%3f%3f</code>内容，并且Http头中Content-Type为<code>application/x-www-form-urlencoded</code>。上网查了才发现，Http Post请求也会默认做UrlEncoding，而HttpClient如果不设置，默认会用&#8221;ISO-8859-1&#8221;进行编码，于是改为UTF-8，问题解决！</p>

<p>PS: ISO-8859-1编码时，会将高位字符编码成63(16进制就是3F)，所以以后遇到这个可疑的字符，更加有迹可循一点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[又一次线上OOM排查经过]]></title>
    <link href="http://code4craft.github.com/blog/2014/05/15/oom-cont/"/>
    <updated>2014-05-15T22:00:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/05/15/oom-cont</id>
    <content type="html"><![CDATA[<p>最近线上一个服务又出现了频繁Full GC的情况，导致提供的业务经常超时。问题出现非常不稳定，经过两周的时候，终于又捕捉到了一次Full GC，于是联系运维做Heap Dump之后，经过一系列分析，终于解决问题。这次的问题稍微复杂一点，但是也比较有代表性，用到了VisualVM和MAT两个工具，继续记录如下。</p>

<!--more-->


<h2>现象</h2>

<p>这次使用公司的<a href="https://github.com/dianping/cat">CAT</a>监控平台看到的内存表现如下：</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/062243_4GUj_190591.png" alt="http://static.oschina.net/uploads/space/2014/0516/062243_4GUj_190591.png" /></p>

<p>可以看到，具体表现是：</p>

<ol>
<li>在很长一段时间内(数个小时)，New GC比较频繁，Full GC较少(一小时个位数)。</li>
<li>过了某一时间点后，Full GC增加，New GC则减少。</li>
<li>将服务切换下线后，Memory Free逐渐回升，Full GC减少。</li>
</ol>


<p>然后观察某一时刻的JMAP histo的内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> num     #instances         #bytes  class name
</span><span class='line'>----------------------------------------------
</span><span class='line'>   1:       5958517     5840833584  [C
</span><span class='line'>   2:         37983      706246056  [B
</span><span class='line'>   3:       5960539      190737248  java.lang.String
</span><span class='line'>   4:       1522282      126603936  [Ljava.lang.Object;
</span><span class='line'>   5:       3692000       88608000  java.lang.Double</span></code></pre></td></tr></table></div></figure>


<p>可以看到&#8221;[C&#8221;即&#8221;char[]&ldquo;占用内存达到了5.8G，它正是String的内部结构，换句话说，因为存在了大量的大String导致这个问题。</p>

<p>联系运维进行了Heap Dump之后，就开始了分析的过程。因为服务器内存有8G，所以相应的DUMP也有8G，对分析也造成了一点小困难。</p>

<p>下面是一些工具的使用过程，操作系统是OS X 10.8。</p>

<h2>使用VisualVM分析</h2>

<p>首先使用VisualVM对Heap Dump进行分析。分析需要比较大的内存，而VisualVM默认的内存是256M，所以需要先设置<code>/Applications/VisualVM.app/Contents/Resources/visualvm/etc/visualvm.conf</code>中的最大内存量，这里我们设置成了4G<code>-J-Xmx4096m</code>。</p>

<p>好了，现在打开dump文件，整个分析过程共占用内存2G，仍然在可接受范围。之后分析内存，可以看到跟之前histo一样的类关系。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/074246_GKl4_190591.png" alt="visual vm class" /></p>

<p>不同的是，这时候可以点进去，查看具体的对象。这里看到，竟然有几个大的String占用了756M的内存，看来我们找到问题了。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/074742_7S5S_190591.png" alt="visual vm object " /></p>

<p>发现一个奇怪的现象：“计算保留大小”之后，这些String的保留大小都是0。</p>

<p>保留大小是什么呢？</p>

<p>它是分析工具从GC roots开始查找，找到的所有不会回收的对象，然后按照引用关系，计算出这个“对象以及它引用的对象”的内存大小。这里很有趣的是，这些对象的保留大小都是0。</p>

<p>开始我甚至以为是工具出了问题，后来想想，其实答案很简单：这些大String是临时对象，没有什么对象持有它——通过分析这些String的依赖关系也说明了这一点。这些对象是可以被回收的，换句话说，并不是有明显的内存泄露。</p>

<p>这个“没有对象持有的String”很有意思，让我想到了，会不会是log的过程中，产生了这个String？因为log的时候，会调用对象的toString()方法，而一个大对象的toString()可能是很大的。查看了一下String的内容，是<code>[Class[field1=xxx,field2=yyy]]</code>这种结构，几乎可以肯定是toString()的结果，那么我们现在只要查看一下具体的内容，到底是哪里太大就可以了。</p>

<p>可惜的是，VisualVM里我尝试了各种方法，都没有办法Dump出这个对象的数据，甚至还尝试了VisualVM提供的OQL。</p>

<p><a href="http://visualvm.java.net/oqlhelp.html">OQL</a>是一种类SQL的表达式，同时整合了一些Javascript的函数功能，但是它的缺点就是太慢了…最后尝试用OQL Dump对象未果。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/075904_N7Sp_190591.png" alt="visual vm oql" /></p>

<h2>使用MAT分析</h2>

<p>转而尝试一下MAT。Eclipse MAT(Memory Analyzer Tool)是一个强大的内存分析工具，它可以方便的分析内存泄露的问题。实际使用之后，确实也感觉到比VisualVM更加强大一些。</p>

<p>我们使用MAT打开Dump文件，这也是一个漫长的过程。与VisualVM不同的是，MAT分析的时候，会在本地产生几个临时文件保存分析结果，所以相应的内存占用会小一些(1G左右)，第二次打开也会快很多。</p>

<p>打开完成后，我们看到可以看到几个占用内存较大的对象，这就是最可疑的内存泄漏源。意外的是Size显示的只有1.3GB，而且我们的大String都没在里面。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/071417_UaCv_190591.png" alt="mat" /></p>

<p>开始我们一度认为是Dump文件有错，后来上网搜索才知道，因为MAT的主要目标是排查内存占用量，所以默认大小是不计算不可达对象的——而我们的String都是不可达对象。对应Eclipse的文档里有介绍<a href="http://wiki.eclipse.org/MemoryAnalyzer/FAQ#How_to_analyse_unreachable_objects">http://wiki.eclipse.org/MemoryAnalyzer/FAQ#How_to_analyse_unreachable_objects</a>。</p>

<p>于是我们按照说明，在&#8221;Preferences=>Memory Analyzer&#8221;中勾选&#8221;Keep Unreachable Objects&#8221;，删除索引文件Dump同路径下的所有&#8221;.index&#8221;，即可看到所有的对象。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/081748_lx9g_190591.png" alt="mat-with-unreachable" /></p>

<p>点击Histogram，即可看到类的占用。在类上选择&#8221;List Objects&#8221;，即可看到所有对象。在对象上选择&#8221;Copy=>Value to File&#8221;，即可保存到文件。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/082102_7Tks_190591.png" alt="mat-objects" /></p>

<h2>原理</h2>

<p>之后我们通过分析对象，发现是因为某个用于缓存的对象使用了一个List结构，但是添加元素的没有去重，导致List越来越大造成的。这个对象本身占用内存只有110M，但是toString()出来的字符串达到700M的大小，所以引起了频繁的GC——最开始对象小的时候是New GC，后来对象大了，直接进入了年老代，就变成了Full GC。</p>

<h2>总结</h2>

<p>回到之前的问题，通过这次分析，我们可以这么总结：</p>

<ol>
<li><p>将服务切换下线后，Memory Free逐渐回升，Full GC减少，Heap Dump的可达对象较少</p>

<p> 这种情况不是内存泄露，有可能是对象创建开销太大造成的。</p></li>
<li><p>在1的前提下，New GC很频繁</p>

<p> 这种情况可能是频繁创建小对象，或者创建一些较大的对象(尚不足以直接进入年老代)</p></li>
<li><p>在1的前提下，Full GC很频繁</p>

<p> 这种情况是频繁创建大对象，或者创建了一些超大对象导致的。</p></li>
<li><p>第3种情况下，大对象toString()产生的大String很可能是罪魁祸首</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[减肥中]]></title>
    <link href="http://code4craft.github.com/blog/2014/05/12/ondiet/"/>
    <updated>2014-05-12T23:04:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/05/12/ondiet</id>
    <content type="html"><![CDATA[<p>Github马拉松进行了78天了，希望也以同样的毅力坚持减肥。</p>

<!--more-->


<p>今天看了一篇文章：<a href="http://www.panghufei.com/?p=11163">http://www.panghufei.com/?p=11163</a>，以及BBC的纪录片<a href="http://v.youku.com/v_show/id_XNTYyODM5MjE2.html">视频: BBC 关于减肥你应该知道的十件事</a>。</p>

<p>纪录片很好，总结出来几点：</p>

<ol>
<li>用更小的盘子吃；</li>
<li>用高蛋白的食物、用粥类防止饥饿；</li>
<li>小习惯也能改变体重。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平静]]></title>
    <link href="http://code4craft.github.com/blog/2014/04/27/ping-jing/"/>
    <updated>2014-04-27T21:36:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/04/27/ping-jing</id>
    <content type="html"><![CDATA[<p>最近工作有些变动，有点忙。加上WebMagic也发展了一些用户，做了不少支持的工作，也发布了一些版本。终于前几天累倒了，感冒头痛，只能休息。</p>

<p>晚上买了个优酷的一年会员，又看了遍《勇敢的心》。之前因为太长没有看完，这次看的时候，听着平静的苏格兰风笛，有种恍若隔世的感觉。之前做事情太急躁，走得慢一点，才能看更多的风景。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件开发是否存在Law?]]></title>
    <link href="http://code4craft.github.com/blog/2014/04/15/ruan-jian-kai-fa-shi-fou-cun-zai-law/"/>
    <updated>2014-04-15T06:57:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/04/15/ruan-jian-kai-fa-shi-fou-cun-zai-law</id>
    <content type="html"><![CDATA[<p>昨天跟架构师讨论一个项目的设计，谈到MVC模式。MVC模式，是先从View设计还是先从Model设计？</p>

<!--more-->


<p>架构师的观点是，只要使用了某个模式，其中就存在必然的&#8221;Law&#8221;，不遵循就会误入歧途。例如MVC必须要从Model写起，因为Model是稳定的，是“对自然界的建模”，与业务无关，而View是易变的，是具体业务的展现。</p>

<p>我是实用主义者，我认为一个稳定的Model是需要领域积累的，一开始就做到一个稳定的Model，应对不断变化的需求非常难。很多时候从View写起，可以迅速实现业务。当业务发展到一定阶段，再抽象出一个Model也是水到渠成的事情。开发的过程本身也是对领域加深认识的一个过程。</p>

<p>但是也有些现状是“你不去想就不会有”，一堆View拼凑起来的项目太多了，其实最开始用一个不稳定的Model，加以迭代，最终变成稳定的，也是一个很好的过程？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淡然]]></title>
    <link href="http://code4craft.github.com/blog/2014/03/30/dan-ran/"/>
    <updated>2014-03-30T22:36:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/03/30/dan-ran</id>
    <content type="html"><![CDATA[<p>马上就是29岁生日了，家里的小家伙也开始会逗我玩了，会求抱抱了。以前陪小家伙感觉更多的是责任，现在越来越觉得她是个小人了。</p>

<p>因为毕业晚，一直都是以新人自居，做事也带着学生那会的习气，有些事情没有承担起相应的责任，比如带宝宝。这一点老婆承担了很多，我虽然也会去配合，但是终归没有那么情愿。</p>

<p>晚上把头像改成了和女儿的合照，以后以老爸自居了。虽然工作经验也有些不足，但是决定不再装嫩了，多一点责任心，年龄的事就随他去吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用SpringProfile和Mybatis进行多个数据源（H2和Mysql）的切换]]></title>
    <link href="http://code4craft.github.com/blog/2014/03/20/shi-yong-springprofilehe-mybatisjin-xing-duo-ge-shu-ju-yuan-%28h2he-mysql%29de-qie-huan/"/>
    <updated>2014-03-20T09:45:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/03/20/shi-yong-springprofilehe-mybatisjin-xing-duo-ge-shu-ju-yuan-(h2he-mysql)de-qie-huan</id>
    <content type="html"><![CDATA[<p>最近在做WebMagic的后台，遇到一个问题：后台用到了数据库，本来理想情况下是用Mysql，但是为了做到开箱即用，也整合了一个嵌入式数据库H2。这里面就有个问题了，如何用一套代码，提供对Mysql和H2两种方案的支持？博主收集了一些资料，也调试了很久，终于找到一套可行方案，记录下来。代码贴的有点多，主要是为了以后方便自己查找。</p>

<!--more-->


<h2>H2的使用</h2>

<p>H2是一个嵌入式，纯Java实现的数据库，它各方面都要好于Java的sqlitejdbc。它可以使用内存模式，也可以使用磁盘模式。具体使用可以看攻略：</p>

<p><a href="http://www.cnblogs.com/gao241/p/3480472.html">http://www.cnblogs.com/gao241/p/3480472.html</a></p>

<h2>为MyBatis同时配置两套数据源</h2>

<p>我们希望达到的效果是，不同的数据源使用不同的sql，并且这个切换最好只在配置中体现，与代码无关。所以我们选择xml的方式编写sql语句。</p>

<h3>MyBatis Spring的使用</h3>

<p>同时使用Mybatis-Spring插件，这样Mybatis可以将Mapper（也就是DAO）自动配置成Bean，非常方便。它的一个完整示例可以看这个项目：<a href="https://github.com/mybatis/jpetstore-6">https://github.com/mybatis/jpetstore-6</a>。这里我配置如下：</p>

<h4>配置Bean</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basePackage&quot;</span> <span class="na">value=</span><span class="s">&quot;us.codecraft.webmagic.dao&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;mapperLocations&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath*:/config/mapper/**/*.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>配置Mapper</h4>

<p>对应的DAO和配置文件如下：</p>

<ul>
<li>us.codecraft.webmagic.dao.DynamicClassDao:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DynamicClassDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="n">DynamicClass</span> <span class="n">dynamicClass</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>DynamicClassDao.xml</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&quot;us.codecraft.webmagic.dao.DynamicClassDao&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&quot;add&quot;</span> <span class="na">parameterType=</span><span class="s">&quot;us.codecraft.webmagic.model.DynamicClass&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      insert into DynamicClass (`ClassName`,`SourceCode`,`AddTime`,`UpdateTime`)
</span><span class='line'>      values (#{className},#{sourceCode},now(),now())
</span><span class='line'>    <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'><span class="nt">&lt;/mapper&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用databaseIdProvider进行多个数据源的SQL切换</h3>

<p>MyBatis支持根据不同的数据库名来进行SQL语句的切换。做法是初始化<code>SqlSessionFactoryBean</code>的时候，配置一个<code>databaseIdProvider</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;vendorProperties&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;properties&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;props&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;SQL Server&quot;</span><span class="nt">&gt;</span>sqlserver<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;DB2&quot;</span><span class="nt">&gt;</span>db2<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;Oracle&quot;</span><span class="nt">&gt;</span>oracle<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;MySQL&quot;</span><span class="nt">&gt;</span>mysql<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;H2&quot;</span><span class="nt">&gt;</span>h2<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/props&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;databaseIdProvider&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.ibatis.mapping.VendorDatabaseIdProvider&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;properties&quot;</span> <span class="na">ref=</span><span class="s">&quot;vendorProperties&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;databaseIdProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;databaseIdProvider&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;mapperLocations&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath*:/config/mapper/**/*.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Mapper的xml里，把相应的语句加上<code>databaseId="xxx"</code>就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>
</span><span class='line'><span class="cp">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&quot;us.codecraft.webmagic.dao.DynamicClassDao&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&quot;add&quot;</span> <span class="na">parameterType=</span><span class="s">&quot;us.codecraft.webmagic.model.DynamicClass&quot;</span> <span class="na">databaseId=</span><span class="s">&quot;mysql&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      insert into DynamicClass (`ClassName`,`SourceCode`,`AddTime`,`UpdateTime`)
</span><span class='line'>      values (#{className},#{sourceCode},now(),now())
</span><span class='line'>    <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&quot;add&quot;</span> <span class="na">parameterType=</span><span class="s">&quot;us.codecraft.webmagic.model.DynamicClass&quot;</span> <span class="na">databaseId=</span><span class="s">&quot;h2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      insert into DynamicClass (`ClassName`,`SourceCode`,`AddTime`,`UpdateTime`)
</span><span class='line'>      values (#{className},#{sourceCode},now(),now())
</span><span class='line'>    <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/mapper&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Spring Profile</h2>

<p>Profile是Spring 3.1后新增的特性，简单来说，就是根据不同的环境，读取不同的配置。这些配置可以放在一起，但是单独生效。贴个代码吧，很容易说明问题了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xmlns:jdbc=</span><span class="s">&quot;http://www.springframework.org/schema/jdbc&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>
</span><span class='line'>          <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://127.0.0.1:3306/WebMagic?characterEncoding=UTF-8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">value=</span><span class="s">&quot;webmagic&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;webmagic&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;beans</span> <span class="na">profile=</span><span class="s">&quot;test&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>
</span><span class='line'>              <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;org.h2.Driver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:h2:mem:WebMagic;DB_CLOSE_DELAY=-1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--Refer to https://github.com/springside/springside4/wiki/H2-Database --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;jdbc:initialize-database</span> <span class="na">data-source=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ignore-failures=</span><span class="s">&quot;ALL&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;jdbc:script</span> <span class="na">location=</span><span class="s">&quot;classpath:sql/h2/schema.sql&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="c">&lt;!--&lt;jdbc:script location=&quot;classpath:data/h2/import-data.sql&quot; encoding=&quot;UTF-8&quot;/&gt;--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/jdbc:initialize-database&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/beans&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;beans</span> <span class="na">profile=</span><span class="s">&quot;standalone&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>
</span><span class='line'>              <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;org.h2.Driver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:h2:file:~/.h2/WebMagic;AUTO_SERVER=TRUE&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--Refer to https://github.com/springside/springside4/wiki/H2-Database --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;jdbc:initialize-database</span> <span class="na">data-source=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ignore-failures=</span><span class="s">&quot;ALL&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;jdbc:script</span> <span class="na">location=</span><span class="s">&quot;classpath:sql/h2/schema.sql&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="c">&lt;!--&lt;jdbc:script location=&quot;classpath:data/h2/import-data.sql&quot; encoding=&quot;UTF-8&quot;/&gt;--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/jdbc:initialize-database&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/beans&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>设置Profile有不同的方式。</p>

<p>在JUnit里面，使用注解@ActiveProfile即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;classpath*:/config/spring/applicationContext*.xml&quot;</span><span class="o">})</span>
</span><span class='line'><span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractTest</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Web项目则是在web.xml里设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param-name&gt;</span>spring.profiles.active<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param-value&gt;</span>product<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'><span class="nt">&lt;/init-param&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此配置，就可以达到在不同的环境使用不同bean的目的！</p>

<h2>参考资料</h2>

<ul>
<li>H2数据库攻略 <a href="http://www.cnblogs.com/gao241/p/3480472.html">http://www.cnblogs.com/gao241/p/3480472.html</a></li>
<li>spring+mybatis 多数据源整合 <a href="http://blog.csdn.net/fhx007/article/details/12530735">http://blog.csdn.net/fhx007/article/details/12530735</a></li>
<li>如何用Spring 3.1的Environment和Profile简化工作 <a href="http://www.importnew.com/1099.html">http://www.importnew.com/1099.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一次OOM故障排查经过]]></title>
    <link href="http://code4craft.github.com/blog/2014/03/05/yi-ci-oomgu-zhang-pai-cha-jing-guo/"/>
    <updated>2014-03-05T10:00:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/03/05/yi-ci-oomgu-zhang-pai-cha-jing-guo</id>
    <content type="html"><![CDATA[<p>本文是一次线上OOM故障排查的经过，内容比较基础但是真实，主要是记录一下，没有OOM排查经验的同学也可以参考。</p>

<!--more-->


<h2>现象</h2>

<p>我们之前有一个计算作业。最近经常出现不稳定，无法正常响应的情况。具体表现是：各种连接超时，从mysql、mongodb和zookeeper到netty，能超时的都超时过了。其他看不到太多有效的异常。</p>

<p>所以我们首先怀疑的是网络问题，打电话跟运维确认，运维说网络问题的可能性几乎为0，因为我们的机器是虚机，宿主机上的其他设备都运转正常。程序问题的可能性更大。继续从应用日志和tomcat的catalina.out中查找日志，发现有一些OutOfMemoryError异常。实际上，出现这个异常就代表内存不够了。</p>

<p>我们使用cat（公司的Java监控平台，已开源<a href="https://github.com/dianping/cat">https://github.com/dianping/cat</a>）查看堆使用的情况，看到如下的东西：</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0305/093930_DljD_190591.png" alt="cat oom" /></p>

<p>Memory Free已经接近了0，同时产生了大量的fullgc。</p>

<p>回到之前的连接timeout，我们知道，Java的连接timeout，除了网络传输的时间，也包括了Java程序处理的时间，所以OOM导致timeout也不奇怪了。</p>

<h2>工具和排查</h2>

<p>之前JVM分析做的很少，在同事的帮助下，结合一点资料，完成了基本的分析。</p>

<p>首先可用的是</p>

<pre><code>jmap -histo PID
</code></pre>

<p>这个命令会将内存中最终保存的对象列出来。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0305/095032_407L_190591.png" alt="jmap-histo" /></p>

<p>其中&#8221;[&ldquo;表示数组，例如&rdquo;[B&#8221;是byte[]，具体可以看<code>Class.getName()</code>的Javadoc。</p>

<p>但是这个只能粗略定位原因，如果要仔细分析，需要知道是哪些个对象持有了它，这个时候，就需要dump内存下来，再离线分析了。</p>

<p>dump内存的命令是：</p>

<pre><code>jmap -dump:format=b,file=/home/admin/dump.bin PID
</code></pre>

<p>此操作异常耗时，我跟运维在假死的机器上尝试了几次，竟然把tomcat进程干掉了，使用时还是小心为妙…</p>

<p>我这里使用<code>VisualVM</code>进行分析，大致效果如下：</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0305/095802_NpnZ_190591.png" alt="visual-vm" /></p>

<p>这里选择“计算保留大小”。这个保留大小是递归计算实例之间的依赖，得到的总大小。因为去掉了循环依赖，所以并不完全准确，但是用于排查够了。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0305/231519_981J_190591.png" alt="visual-vm2" /></p>

<p>最后排查出的结果，是公司的RPC中间件使用了ThreadLocal来保存一个context，但是最后却没有释放。按照架构组的说明，升级了版本，问题解决！</p>
]]></content>
  </entry>
  
</feed>
