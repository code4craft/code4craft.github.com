<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[代码人生]]></title>
  <link href="http://code4craft.github.com/atom.xml" rel="self"/>
  <link href="http://code4craft.github.com/"/>
  <updated>2013-11-19T11:51:45+08:00</updated>
  <id>http://code4craft.github.com/</id>
  <author>
    <name><![CDATA[黄亿华]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Struts2一个[安全问题]的分析报告]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/18/struts2/"/>
    <updated>2013-11-18T09:42:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/18/struts2</id>
    <content type="html"><![CDATA[<h2>一：起因</h2>

<p>最近公司代码被扫出有一个xss漏洞，检查之后，发现大致是这样一个页面：</p>

<figure class='code'><figcaption><span>DemoAction </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoAction</span> <span class="kd">extends</span> <span class="n">ActionSupport</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;success&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>模板用的是freemarker，大致是这样子：</p>

<figure class='code'><figcaption><span>demo.ftl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">class=</span><span class="s">&quot;G_N&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">&quot;top&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>${id}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们访问url<code>/demo?id=&lt;script&gt;alert("xss!")&lt;/script&gt;</code>，会发现id的参数原封不动的打印到了页面上，就会出现反射型xss!</p>

<h2>二：问题流程</h2>

<p>分析漏洞原因前，先要稍微看一下struts结构(自己画的，可能不严谨)：</p>

<p><img src="http://static.oschina.net/uploads/space/2013/1115/001209_ikf2_190591.jpg" alt="struts2" /></p>

<p>OGNL是底层的表达式引擎，是联系起上下文和模板输出的桥梁。</p>

<p>XWork是个什么东西呢？它可以理解为一个请求-响应模式的通用框架(不仅仅局限于Web)，这个Action就是一个命令。而struts2可以说是XWork在web领域的一个特定实现。</p>

<p>XWork包括Action/Interceptor/Result几个大部分，还有用于执行流程的ActionProxy和ActionInvoker，以及处理数据的ActionContext和ValueStack。</p>

<p>所以参数的转换和注入是在XWork里进行。Struts的主要执行流程在<code>DefaultActionInvocation</code>里。大致解释一下流程：</p>

<p>当Struts捕获到参数时，会交由ognl进行参数转换。我们都知道Struts是通过setter方法进行的参数注入，更进一步的，它是通过ognl表达式来查找方法，并进行属性注入，代码在<code>OgnlRuntime.setProperty</code>里。</p>

<p>那么如果注入不成功呢？<code>OgnlRuntime</code>会抛出<code>MethodFailedException</code>，然后<code>ConversionErrorInterceptor</code>会将<code>原始参数</code>注入到<code>invocation.getStack()</code>中去，而最终freemarker会读取这个原始数据，并打印到页面上(<code>FreemarkerResult</code>)！这个时候，无论字段最终值是什么都不重要了，因为在ognl的Stack里，它已经用原始值给override了！插一句，其实这个值貌似是为了debug用的，会返回名字为&#8221;input&#8221;的result，这样会返回找不到方法的404页面，但是公司使用的貌似不太好用，仍然会正常返回！</p>

<figure class='code'><figcaption><span>ConversionErrorInterceptor </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">fakie</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// if there were some errors, put the original (fake) values in place right before the result</span>
</span><span class='line'>    <span class="n">stack</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="n">ORIGINAL_PROPERTY_OVERRIDE</span><span class="o">,</span> <span class="n">fakie</span><span class="o">);</span>
</span><span class='line'>    <span class="n">invocation</span><span class="o">.</span><span class="na">addPreResultListener</span><span class="o">(</span><span class="k">new</span> <span class="n">PreResultListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeResult</span><span class="o">(</span><span class="n">ActionInvocation</span> <span class="n">invocation</span><span class="o">,</span> <span class="n">String</span> <span class="n">resultCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Map</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">fakie</span> <span class="o">=</span> <span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;)</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getInvocationContext</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">ORIGINAL_PROPERTY_OVERRIDE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">fakie</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                 <span class="c1">//注入</span>
</span><span class='line'>                <span class="n">invocation</span><span class="o">.</span><span class="na">getStack</span><span class="o">().</span><span class="na">setExprOverrides</span><span class="o">(</span><span class="n">fakie</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三：求解</h2>

<p>那么怎么解决这个问题呢？本着回馈社区的精神，给Struts2官方发了一封邮件，并上传了demo到<a href="https://github.com/code4craft/xssdemo">https://github.com/code4craft/xssdemo</a>。然后过了一天有个叫Lukasz Lenart的大叔程序员回复我了，老外还是很客气的，回答也很及时(算上时差)。首先确认了问题的存在，然后说这不是一个bug，你可以用${id?html}来进行输出转义。我觉得这个解决方案虽然管用，但是是比较反直观的，因为一般人都会直觉上因为这里只是读取Action中的getter取值，既然是基本类型，哪会还需要转义？本来想喷回去的，又搜了一下这个Lukasz Lenart的来历，然后出来这么个：</p>

<p><img src="http://static.oschina.net/uploads/space/2013/1118/212211_F15d_190591.jpg" alt="lukasz" /></p>

<p><img src="http://static.oschina.net/uploads/space/2013/1118/215911_jxug_190591.jpeg" alt="s" /></p>

<p>被lead亮瞎了！亲力亲为，这才是开源项目的氛围嘛！</p>

<p>不过呢，即使大神&amp;作者都发话了，我还是希望有框架内的方案，或许默认对<code>ConversionErrorInterceptor</code>注入时进行HtmlEscape是个不错的主意？于是有了<code>EscapedStrutsConversionErrorInterceptor</code>:</p>

<figure class='code'><figcaption><span>EscapedStrutsConversionErrorInterceptor </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EscapedStrutsConversionErrorInterceptor</span> <span class="kd">extends</span> <span class="n">StrutsConversionErrorInterceptor</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">escape</span><span class="o">(</span><span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">StringEscapeUtils</span><span class="o">.</span><span class="na">escapeHtml4</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">value</span><span class="o">));</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">escape</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">escape</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;escape &quot;</span><span class="o">+</span><span class="n">value</span><span class="o">+</span><span class="s">&quot; to &quot;</span><span class="o">+</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">escape</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在项目里将默认的<code>converionError</code>替换为我们的新类就可以了！怎么定义stack?看看struts-core包里的struts-default.xml就知道了！(PS:自定义interceptor是Struts里很有用的技巧，大家不妨自己研究一下)。修改过的代码：<a href="https://github.com/code4craft/xssdemo/blob/master/src/main/resources/config/struts/struts.xml">https://github.com/code4craft/xssdemo/blob/master/src/main/resources/config/struts/struts.xml</a></p>

<p>参考资料：</p>

<ol>
<li>《Struts2技术内幕》<a href="http://book.douban.com/subject/7154446/">http://book.douban.com/subject/7154446/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小轮子一枚-高仿express的Java服务器]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/17/express-dot-java/"/>
    <updated>2013-11-17T18:36:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/17/express-dot-java</id>
    <content type="html"><![CDATA[<p>之前做了个Java项目<a href="https://github.com/code4craft/mocksocks">MockSocks</a>，要做UI，用Swing写实在是又low又费劲，跟前端同事聊起node-webkit，觉得很不错。但是我大部分业务都在Java上，于是就涉及到Java与js通信问题。</p>

<p>当然最常用的解决方案就是用Java写一个Web后端。但是这样解决太重，大部分时间都要花费在web的配置上，最终还要使用一个容器去启动它，程序流程也无法由我来控制了。</p>

<p>其实挺喜欢JMX的控制方式，只是用其他语言连接它成本有点高。于是就想仿照JMX的方式写一个Web Server，同时可嵌入到应用中。直接使用Jetty又太原生态了，URL路由/参数映射和转换总是要做的，于是参考了express的语法，就有了一个非常小的Web框架<a href="https://github.com/code4craft/express.java">express.java</a>。</p>

<p>本来开始雄心勃勃的要用netty自己写一个，但是后来遇到尴尬的地方：自己写一套HttpMessage类，设计API其实挺麻烦的，设计得好更是需要时间。如果要重用HttpServletRequest/Response呢，实现起来又太费劲。于是后来还是直接用Jetty写了，就不重复造轮子了。</p>

<p>Web框架已经到了汗牛充栋的地步，所以也没想跟谁谁比，完成的是自己的需求就够了。这东西不支持任何servlet规范(HttpServletRequest/Response两个对象基于servlet 3.0)，要的就是简单。</p>

<p>这个WebServer可以在程序内启动，由<code>UrlRouter</code>来完成路由，并路由到对应的<code>Controller</code>上。比较大的特色就是支持动态增加Controller和映射，这样对于新增是非常方便的。例如我有个service里有个状态<code>count</code>，那么我可以这么写：</p>

<figure class='code'><figcaption><span>ServiceMonitor </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServiceMonitor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">WebServer</span> <span class="n">webServer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ServiceMonitor</span><span class="o">(</span><span class="n">WebServer</span> <span class="n">webServer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">webServer</span> <span class="o">=</span> <span class="n">webServer</span><span class="o">;</span>
</span><span class='line'>        <span class="n">monitor</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">webServer</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/count&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">AjaxController</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">Object</span> <span class="nf">ajax</span><span class="o">(</span><span class="n">ParamMap</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">ResultMap</span><span class="o">.</span><span class="na">create</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;count&quot;</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">WebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">WebServer</span><span class="o">.</span><span class="na">jettyServer</span><span class="o">().</span><span class="na">port</span><span class="o">(</span><span class="mi">8080</span><span class="o">);</span>
</span><span class='line'>      <span class="n">ServiceMonitor</span> <span class="n">serviceMonitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceMonitor</span><span class="o">(</span><span class="n">server</span><span class="o">);</span>
</span><span class='line'>      <span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">serviceMonitor</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然这样分散式分配其实会带来一些url的管理问题，不过小项目呢，应该是更方便了。没有想过用这个写web应用，所以目前的定位就是这样子了。</p>

<p>顺便玩了玩angular.js以及less、boostrap、node-webkit等东东。</p>

<p><img src="http://static.oschina.net/uploads/space/2013/1117/212244_eFUQ_190591.png" alt="mocksocks" /></p>

<p>这只猴子是一个博客中找到的，出自一个自由设计师之手，貌似已经卖给某个客户了<a href="http://blog.coghillcartooning.com/2436/monkey-cartoon-character-sketch/">http://blog.coghillcartooning.com/2436/monkey-cartoon-character-sketch/</a>。估计真正开源的时候，会把它换掉吧，目前仅仅自己用用，也就无所谓了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebMagic-Avalon计划启动]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/11/webmagic-avalon-start/"/>
    <updated>2013-11-11T07:50:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/11/webmagic-avalon-start</id>
    <content type="html"><![CDATA[<p>一直以来都有个想法，想要将爬虫做到可配置化，同时可复用这些配置。然后将这些配置做成可复用，可分享，可搜索的，这样就不会经常有一堆人重复劳动了！</p>

<p>双11的时候启动这个项目，希望解放苦逼的程序员，以后多点时间去谈恋爱，陪家人！</p>

<!--more-->


<h3>1. 将爬虫脚本化</h3>

<p>用尽量自然，简单的语言达到爬虫配置的目的，初定使用JRuby，雏形大概是这样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="n">css</span> <span class="s">&quot;div.BlogTitle h1&quot;</span>
</span><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="n">css</span> <span class="s">&quot;div.BlogContent&quot;</span>
</span><span class='line'><span class="n">urls</span> <span class="s">&quot;http://my\\.oschina\\.net/flashsword/blog/\\d+&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>见博客：<a href="http://my.oschina.net/flashsword/blog/175349">在webmagic中加入了自定义语言</a></p>

<h3>2. 完整的管理后台</h3>

<p>完整的管理后台，包括：</p>

<ul>
<li><p>规则的选择</p></li>
<li><p>爬虫的管理</p></li>
<li><p>爬虫的监控</p></li>
</ul>


<h3>3. 脚本分享</h3>

<p>一个脚本要做到可分享，可能包括几个描述性内容：</p>

<ul>
<li><p>适配的URL</p></li>
<li><p>简单描述</p></li>
<li><p>抽取结果</p></li>
</ul>


<p>最后做到一个平台，可以自由发布和搜索脚本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[无责任励志一则-成功就是把你做的事做精致]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/08/wu-ze-ren-li-zhi/"/>
    <updated>2013-11-08T20:27:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/08/wu-ze-ren-li-zhi</id>
    <content type="html"><![CDATA[<p>我们常说，这个世界太浮躁。实际上也是如此，今年小孩出生，同时又买了房子，生活上的压力顿时压下来，差点趴下了。但是我是个老实人，急躁又有什么用呢，还不是每天上班下班，下班看书写代码，没有那个业余找钱的能力，于是也就算了，安心搞点好玩的。</p>

<!--more-->


<p>记得去年给自己定了个目标，今年要在技术上有所进步，并且能够在一流的开源项目里贡献代码。于是我尝试了读tomcat和spring的源码，结果根本没能坚持下去。因为根本没那么多时间去阅读代码，也坚持不下去，最后都是不了了之。现在想来，根本不是对这些项目感兴趣，其实平时用到的功能也不全，完全是因为觉得它们很牛逼。</p>

<p>但是或许是无心插柳吧，之前写了一个爬虫框架webmagic，随便放到了github上。我这个人比较喜欢分享，因为都是自己趟过的坑，也不希望别人再进去，所以就写了一两篇文章介绍了下。结果喜欢的人不少，还有了一些粉丝了。后来收集了一些反馈意见，就开始了开源的旅程。我以前在点点做抓博客文章的事情，具体就是写正则去抽取网页内容，其实是很没意思的活，但是至少积累了不少领域经验，于是对写webmagic产生了很大的影响。webmagic现在star和fork都过百了，在github Java项目中排800名左右，虽然不算很厉害，但是对我来说已经是超出预料了。有人问我开源做什么东西好，我的答案是，把自己最熟悉的东西做好，在自己的应用场景，提炼出东西，再开源，是最好的。当然，其实没有必要为了开源而开源，就像《大教堂与集市》里说的，开源的产品，只是戳到自己的痛处了，自己开发出来，并推广给大家而已。</p>

<p>维护开源软件是枯燥的，因为有很多问题需要回答，无论是专业的不专业的，下至maven的使用，上至设计思想。但是我也知道用户的宝贵，所以基本上事无巨细，我都会一一回答。我把webmagic当成一个产品来做，希望更多人了解它和喜欢它。</p>

<p>从个人角度，确实也希望树立自己的知名度(工资高点=.=)，但是生活在这个时代，谁有那么崇高呢。你产生价值，得到回馈，也是应该的。</p>

<p>意外的惊喜是，因为webmagic需要写一些demo，结果写demo时遇到一个HttpClient的bug，后来反馈到了Apache，并提交了patch，结果就这么被接收了。虽然这个项目不如Apache其他项目那么知名，但是就跟它名字一样，在Java界基本是Http客户端的不二之选。于是我终于在快年底完成了今年的目标了。</p>

<p>今天在看Hadoop的东西，看到其实HDFS是Nutch为了保存海量文件而开发的，而Hadoop本身也是起源于项目需要。</p>

<p>现在的工作，我一直在做一些跑job的事情，大家都觉得挺无聊。但是想想，其实那么高端大气的Hadoop也是从跑job开始的。何不好好干呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[qcon见闻]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/03/qconjian-wen/"/>
    <updated>2013-11-03T19:12:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/03/qconjian-wen</id>
    <content type="html"><![CDATA[<h1>第一天</h1>

<p>之前在并发编程网<a href="http://ifeve.com">http://ifeve.com</a>发过两篇关于netty的文章，就混进了编辑群，正好群主有两站Qcon上海的票，我又刚好在上海，就拿了一张票，请了天假，奔赴现场了。</p>

<!--more-->


<p>会议人依然很多，各个赞助商都在门口签到发送礼品，领了两个娃娃，正好给女儿。不得不说七牛在社区方面的工作还是很到位的，娃娃做的很用心，还送了一件挺不错的T恤。</p>

<p><img src="http://static.oschina.net/uploads/space/2013/1101/211210_rzYo_190591.jpeg" alt="toy" /></p>

<p>上午的keynote全部是英文演讲，虽然来的都是twitter、github的大牛，但是演讲内容太泛，除了瞻仰了风采之外，收获不算很大。twitter讲到了他们的RPC框架finagle，倒是可以研究一下。twitter的开源项目还是很受欢迎的，既有bootstrap，又有storm，这个finagle应该也不错。</p>

<p>下午奔了几个会场。阿里外贸讲前端优化、SEO以及CDN中遇到的坑，感觉挺不错，都是宝贵的经验。豆瓣讲到自己的工程师文化，讲到工程师自发的维护code平台，自下而上的工具开发论相当不错。有个观点很新颖：团队工具最好由开发自己维护，不要用专人去负责，否则负责人为了刷存在感，总会开发些不实用的功能…</p>

<p>code平台晚些会开源。</p>

<p>听了几个报告，感想：其实所有技术人都有一个开源梦，极少数真是想藏着不给人看，多数是因为没有精力将代码提高到可开源水平(依赖内部工具、耦合业务代码、文档测试不全、代码质量不高)。开源对于公司来说，确实成本不小，在国内除了积累声望外也没有什么回报(极少有人反馈代码)。</p>

<hr />

<h1>第二天</h1>

<p>今天上午处理一些公司的事情，没有去成，错过了安全方面的讲座，挺可惜的。</p>

<h2>Apache Traffic Server</h2>

<p>下午第一个听了阿里CDN团队的永豪对于Apache Traffic Server的讲解，偏运维方面，好多东西不懂，不过倒是知道了ATS这个东西。ATS采用多线程+事件机制，默认支持集群，比起nginx倒是方便了很多。阿里CDN团队还出过Tsar。他们在尝试将配置用lua实现(remap)，估计日后会合并到主干。可能在很多人眼里运维就是配一大堆配置文件的人，看日后会不会有改变。阿里在开源方面真算是走上了正轨，积累了业界声望，至少在我看来对于招收人才是非常有利的。</p>

<h2>深度学习</h2>

<p>第二个听了百度IDL的首席科学家张潼带来的深度学习的介绍。其中细数了机器学习在企业的应用，干货挺多，至少对于我这个外行更是如此。大数据在企业分为三个方向：</p>

<ul>
<li><p>Infrastructure</p>

<p>  数据研究的设施，像hadoop、storm、spark均属此类。也包括把数据拿到CPU/GPU上计算。</p></li>
<li><p>Data analysis</p>

<p>  数据分析，建模、算法，参数调优等。</p></li>
<li><p>System intergtation</p>

<p>  系统集成，最终将机器学习的结果整合到产品中，产生商业价值。</p></li>
</ul>


<p>百度的机器学习主要用于CTR预估和语音以及图像的处理。百度的广告数据已经达到了千亿规模，用的是Logistic Regression。而图像和语音用的是深度学习，深度学习的精髓是最接近人的大脑，同时它可以从最原始的特征选择出最上层的特征，学习越多越抽象，而且这个最上层的特征通常是有意义的。这样同于特征提取，可能在一个星期内就完成人工十年都做不到的特征选择工作。百度这方面做的挺不错的，据说图片匹配已经超过google了。</p>

<p>还有些分布式方面的内容，包括CPU与GPU的区别和任务分配模式，需要时倒是可以了解一下。</p>

<h2>Java 8</h2>

<p>作为一个Java码农，不得不说Java8，于是去听了Oracle专家带来的J2SE的55个特性的讲座。当时顺便开了IDEA，边听边试，岂不快哉！</p>

<p>说到Java8先说Lambda，关于Lambda我写过一篇博客，我觉得报告中有个说法很对：Allow you to treat code as data. 在VM层级是使用invokedynamic机制实现的。<a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html">http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html</a></p>

<p>另外并发方面支持Fork-Join了，集合类都增加了并发支持，有人说Java8是抄scala的，感觉倒有那么点意思…</p>

<h2>Moco</h2>

<p>Moco这个框架之前就关注过，因为自己也计划写一个类似的东西。作者郑烨@dreamhead是个35岁的大龄码农，倒是挺有亲切感。Moco之前有说过，就是用Mockito的语法和JSON配置来实现一个webserver。后来拉了代码看了一下，作者是个与时俱进的Java Coder，用了guava/netty4.0/gradle等新玩意。</p>

<p>作者写了10年博客，有个《你应该更新的Java知识》系列，可以去搜一下。</p>

<p>有趣的时晚上报告的时候，与作者刚好坐到了旁边，但是反而不知道说什么了，码农嘛，有点不善言辞。</p>

<h2>鬼脚七夜话</h2>

<p>鬼脚七夜话是晚上的座谈活动，实际上比起白天的报告，这个收获更大一些。最大的收获是学到了角色时间管理法。还有就是也了解了几个微信公众号，有点意思。鬼脚七说自己的经验是每天坚持写自媒体，写一年半年试试。想起当初自己写webmagic时29天的连续strike，还是挺有感触的。</p>

<p>还有一个就是大牛一部分是技术，一部分是吹出来的，感谢蔡学镛独到的见解。</p>

<p>晚上跟朋友谈起Java8，引出了函数式编程的话题，然后就被推荐学学Haskell。函数式编程有不可变对象和函数组成，有点意思，研究一下。</p>

<hr />

<h1>第三天</h1>

<p>第三天宝宝生病，去了趟医院才来。第一场听了鸟哥的Yax框架。我是鸟哥的粉丝，报告非常技术，符合技术人员的特质。</p>

<p>下午的讲座就比较泛泛，不是很喜欢。虽然有鬼脚七和蔡学镛的讲座，但是比起前一天的鬼脚七夜话，各方面都差远了，感觉就是来宣传的。google glass的现场demo倒是有点意思，google glass2出了，支持近视眼镜，以后便宜了可以入一个。</p>

<p>就这么多了，结束的时候稍微有点失落，不过补充了码农的能量，可以继续下去了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术路线的选择]]></title>
    <link href="http://code4craft.github.com/blog/2013/10/30/ji-zhu-lu-xian-de-xuan-ze/"/>
    <updated>2013-10-30T21:52:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/10/30/ji-zhu-lu-xian-de-xuan-ze</id>
    <content type="html"><![CDATA[<p>最近技术上有所倦怠，webmagic也没有维护了，netty系列文章也没继续写了，mocksocks也常常是写到一半不知从何下手。</p>

<!---more--->


<p>工作上没有什么挑战，搞搞Java web开发，可说游刃有余，并且把事情倒是做到了自己满意的程度。可惜做用户产品，技术一直都不是主导，我至多能把程序做的快一点，好维护一点，效率高一点，bug少一点，仅此而已。说实话，对于做的事情并不是很满意。</p>

<p>之前一直告诉自己，现在是韬光养晦，把基础弄弄好，实际上现在除了工作年限外，日常工作的积累已经不多了。</p>

<p>看到各种大牛在微博上就技术问题谈笑风生，再看身边的资深工程师、项目骨干、领导，都觉得技术层面低了好几个层次。自己的目标自然是技术大牛，说实在的，有点耐不住了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java字节码织入技术概述]]></title>
    <link href="http://code4craft.github.com/blog/2013/10/20/java-bytecode/"/>
    <updated>2013-10-20T16:52:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/10/20/java-bytecode</id>
    <content type="html"><![CDATA[<p>十问：</p>

<ul>
<li>什么是Java字节码？</li>
</ul>


<!-- more -->


<p>Class文件的结构：</p>

<pre><code>   ClassFile {
          u4             magic;
          u2             minor_version;
          u2             major_version;
          u2             constant_pool_count;
          cp_info        constant_pool[constant_pool_count-1];
          u2             access_flags;
          u2             this_class;
          u2             super_class;
          u2             interfaces_count;
          u2             interfaces[interfaces_count];
          u2             fields_count;
          field_info     fields[fields_count];
          u2             methods_count;
          method_info    methods[methods_count];
          u2             attributes_count;
          attribute_info attributes[attributes_count];
   }
</code></pre>

<p><img src="http://static.oschina.net/uploads/space/2013/1020/193328_GPX0_190591.png" alt="在此输入图片描述" /></p>

<pre><code>javap -verbose Downloader
</code></pre>

<p>最开始是常量池，保存类名/方法/字面量等信息。</p>

<ul>
<li>Java字节码在JVM里如何保存？</li>
</ul>


<p>字节码是类文件</p>

<ul>
<li><p>字节码和ClassLoader的关系？</p>

<p>  -XX:+TraceClassLoading</p></li>
<li><p>字节码修改能做的事？</p></li>
<li><p>字节码修改不能做的事？</p>

<p>  Java加载Class文件后会做&#8221;连接&#8221;操作，就是把符号表的彼此引用连接起来。</p></li>
<li><p>常用的字节码修改工具？</p></li>
</ul>


<h2>参考书目</h2>

<p>《深入理解Java虚拟机》</p>

<p>《The Java® Virtual Machine Specification-Java SE 7 Edition》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MockSocks开发日志之三-为NIO设置Socks代理]]></title>
    <link href="http://code4craft.github.com/blog/2013/10/20/mocksockskai-fa-ri-zhi-zhi-san-wei-nioshe-zhi-socksdai-li/"/>
    <updated>2013-10-20T16:28:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/10/20/mocksockskai-fa-ri-zhi-zhi-san-wei-nioshe-zhi-socksdai-li</id>
    <content type="html"><![CDATA[<h2>回顾</h2>

<p>时隔3个月，MockSocks终于又能继续开发了。这个项目是目前为止做过的最有技术挑战的一个，目标是做成一个后端应用的fiddler，可以监控应用对外的网络流量、分析协议、重定向、并针对每个协议进行修改，同时可以录制和回放。项目也得到了部门总监和其他leader的肯定，可以多花心思弄弄好。</p>

<p>因为项目的核心是一个Socks代理，通过这个代理捕获双方的流量，并进行后续的操作。</p>

<!--- more --->


<h2>Server</h2>

<p>Socks Server方面使用netty构建了一个，原本觉得无比复杂的东西，借助netty倒是变得很简单了，具体实现方式在这篇博客：<a href="http://my.oschina.net/flashsword/blog/169361">http://my.oschina.net/flashsword/blog/169361</a>。学习netty期间用心写了几篇文章，也结交了一些朋友，倒是挺开心的。可惜netty系列文章没有完成，估计要等我MockSocks开发完才能继续了。</p>

<h2>配置Client</h2>

<p>server端开发完后，就轮到client端了。JDK的OIO是支持全局代理的，只需在JVM参数中配置<code>-DsocksProxyHost=xxx -DsocksProxyPort=xxx</code>即可。遗憾的是，这个配置对NIO是不起作用的。</p>

<p>后来考虑过几种办法：</p>

<ol>
<li><p>因为公司项目用到NIO的部分，主要也是通过netty做的。那么改netty的API，使其支持代理，是最简单的做法。使用netty构建一个socks client也是得心应手。但是这种做法不够彻底，且不具有通用性。</p></li>
<li><p>修改NIO的接口SocketChannel.open()的实现，使其返回一个可以使用代理的SocketChannel。这种方法最彻底，但是涉及到JDK一些底层API，有些还没有暴露出来，实现难度有点大。</p></li>
</ol>


<p>后来决定采用方法2，顺便学习一下。</p>

<p><code>SelectorProviderImpl</code>、<code>SocketChannelImpl</code>都是VM的私有API，只有下载JDK源码才能看到。下载openjdk源码后，在<code>jdk/src/share/classes/</code>目录可找到。</p>

<p><code>SelectorProvider.provider()</code>是JDK自己的一个扩展点，会根据不同的OS选择不同的SelectorProvider，OSX是KQueue。尝试自己写了一个SocketChannel的子类，做一个全局代理，结果被SelectorImpl摆了一道，里面要求必须实现<code>sun.nio.ch.SelChImpl</code>接口，而这个接口是包级可见的。</p>

<p>抱着侥幸心理，尝试将自己的新类写到<code>sun.nio.ch</code>包下，结果编译通过，加载提示无法访问其父类接口<code>sun.nio.ch.SelChImpl</code>，<s>看来sun对自家的包是做了一些保留的</p>

<p>看了一遍《深入理解Java虚拟机》关于ClassLoader那章，确定</p>

<p>尝试用agent修改代码。后来沮丧的发现，agent的<code>ClassFileTransformer</code>无法获取到系统级别的class，但是看ByteMan介绍，它倒是可以做到，有必要研究一番。</s></p>

<p>后来跟RednaxelaFX提问之后，确认了JVM是根据ClassCloader+package来确定一个包的，所以要使自己写的类能访问<code>sun.nio</code>包的内容，必须使用Boostrap Classloader来加载。后来在javaagent里配置了相应参数，搞定！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今天把mou整崩溃了]]></title>
    <link href="http://code4craft.github.com/blog/2013/09/24/jin-tian-ba-mouzheng-beng-kui-liao/"/>
    <updated>2013-09-24T20:17:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/09/24/jin-tian-ba-mouzheng-beng-kui-liao</id>
    <content type="html"><![CDATA[<p>一直觉得Mou写markdown，小巧灵活，久而久之也喜欢把一些临时文本放在里面。</p>

<p>结果晚上回来的时候打不开了，内存飙到1.6G，CPU跑到200%多，死活打不开。作为markdown重度患者，简直要崩溃了。</p>

<!---more--->


<p>怀疑是打开了非法的文件导致。删了App重新装，问题依旧，不知道是把临时文件存在哪的。用进程管理器找到打开的文件，将疑似缓存的文件都删了(<code>~/Library</code>下面几个)，依然没有用！</p>

<p>后来都要绝望的时候，竟然蹦出来了，原来是之前随便贴了一些数据，估计是有markdown的保留字，导致Mou解析出错了！下次还是不要乱拷数据到Mou里了吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[名词王国里的新政-解读Java8之lambda表达式]]></title>
    <link href="http://code4craft.github.com/blog/2013/09/15/ming-ci-wang-guo-li-de-xin-zheng-jie-du-java8zhi-lambdabiao-da-shi/"/>
    <updated>2013-09-15T08:36:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/09/15/ming-ci-wang-guo-li-de-xin-zheng-jie-du-java8zhi-lambdabiao-da-shi</id>
    <content type="html"><![CDATA[<p>前几天在reddit上看到Java8 M8 Developer Preview版本已经发布了，不免想要尝鲜一把。Developer Preview版本已经所有Feature都完成了，Java8的特性可以在这里看到<a href="http://openjdk.java.net/projects/jdk8/features">http://openjdk.java.net/projects/jdk8/features</a>，下载地址：<a href="http://jdk8.java.net/download.html">http://jdk8.java.net/download.html</a>。</p>

<!--more-->


<h2>下载及配置</h2>

<p>Intellij IDEA已经完美支持Java8了。首先打开Project Structure，在Project里设置新的JDK路径，并设置Modules=>Source=>Language Level为8.0即可。</p>

<p>现在我们可以使用Java8编写程序了！但是当我们开开心心编写完，享受到高级的lambda表达式后，运行程序，会提示：<code>java: Compilation failed: internal java compiler error</code>！这是因为javacc的版本还不对，在Compiler=>Java Compiler里将项目对应的javacc版本选为1.8即可。</p>

<p>什么？你说你用Eclipse？好像目前还没有稳定版！想尝鲜的，可以看看这个地址<a href="http://stackoverflow.com/questions/13295275/programming-java-8-in-eclipse">http://stackoverflow.com/questions/13295275/programming-java-8-in-eclipse</a>，大致是先checkout Eclipse JDT的beta java8分支，然后在Eclipse里运行这个项目，从而启动一个支持java8的Eclipse…不过应该难不倒作为geek的你吧！</p>

<h2>体验lambda表达式</h2>

<p>好了，我们开始体验Java8的新特性-lambda表达式吧！现在我们的匿名类可以写成这样子了：</p>

<figure class='code'><figcaption><span>java8中的lambda </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Foo&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>而之前的写法只能是这样子：</p>

<figure class='code'><figcaption><span>以前的java匿名函数 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Foo&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样一看，我们似乎就是匿名类写起来简单了一点啊？而第二种方法，借助便捷的IDE，好像编写效率也没什么差别？博主开始也是这样认为，仔细学习之后，才知道其中的奥妙所在！</p>

<p>这里有一个重要的信息，就是<strong><code>()-&gt;{}</code>这里代表一个函数，而非一个对象。</strong>可能这么说比较抽象，我们还是代码说话吧：</p>

<figure class='code'><figcaption><span>函数作为参数 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">LambdaTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bar</span><span class="o">(){</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="nl">LambdaTest:</span><span class="o">:</span><span class="n">bar</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看懂了么？这里<code>LambdaTest::bar</code>代表一个函数(用C++的同学笑了)，而new Thread(Runnable runnable)的参数，可以接受是一个函数作为参数！</p>

<p>是不是觉得很神奇，颠覆了Java思维？在剖析原理以前，博主暂且卖个关子，我们先来讲讲什么是lambda表达式。</p>

<h2>什么是lambda表达式</h2>

<h3>lambda表达式的由来</h3>

<p>絮叨几句，现代编程语言的lamdba表达式都来自1930年代初，阿隆佐·邱奇(Alonzo Church)提出的λ演算(Lambda calculus)理论。λ演算的核心思想就是“万物皆函数”。一个λ算子即一个函数，其一般形式是<code>λx.x + 2</code>。一个λ算子可以作为另一个λ算子的输入，从而构建一个高阶的函数。λ演算是函数式编程的鼻祖，大名鼎鼎的编程语言Lisp就是基于λ演算而建立。用过Lisp的应该都清楚，它的语法很简单，但是却有包容万物的能力。</p>

<p>可能搞计算机的对邱奇比较陌生，但是提起和邱奇同时代的另外一个人，大家就会觉得如雷贯耳了，那就是阿兰·图灵。邱奇成名的时候，图灵还是个大学生。邱奇和图灵一起发表了邱奇-图灵论题，并分别提出了λ演算和图灵机，加上哥德尔提出的递归函数一起，在理论上确定了什么是可计算性。至于什么是可计算性，其实博主也说不清楚，但是现代所有计算机程序语言，都可以认为是从三种之一发展而来，并与之等价的。仅此一点，其影响深远，可想而知。当年教我们《计算理论》的是一个德高望重的教授，人称宋公，每次讲到那个辉煌的年代，总是要停下来，神情专注的感叹一句：“伟大啊！”想想确实挺伟大，人家图灵大学时候就奠定了现代计算机的基础，而我们那会大概还在打DOTA…</p>

<p>附上大神们的照片，大家感受一下：</p>

<p><img src="http://static.oschina.net/uploads/space/2013/0914/160058_HLj3_190591.png" alt="turing etc." /></p>

<h3>现代编程语言中的lambda表达式</h3>

<p>好了扯远了，神游过了那个伟大的时代，我们继续思考如何编代码做需求吧…</p>

<p>现代语言的lambda表达式，大概具备几个特征(博主自己归纳的，如有不严谨，欢迎指正)：</p>

<ol>
<li>函数可作为输入；</li>
<li>函数可作为输出；</li>
<li>函数可作用在函数上，形成高阶函数。</li>
<li>函数支持lambda格式的定义。</li>
</ol>


<p>其实有了1、2，3也就是顺水推舟的事情，而4其实没有太大的必要性，因为一般语言都有自己的函数定义方式，4仅仅是作为一种补充。当然实现了4的语言，一般都会说：“你看我实现了lambda表达式！”(望向Java8和Python同学)</p>

<h2>在Java8中使用lambda表达式</h2>

<h3>FunctionalInterface</h3>

<p>Java中的lambda无法单独出现，它需要一个接口来盛放。这个接口必须使用@FunctionalInterface作为注解，并且只有一个未实现的方法。等等，什么叫接口中未实现的方法？恭喜你，猜对了！Java8的接口也可以写实现了。是不是觉得Interface和AbstractClass更加傻傻分不清楚了？但是AbstractClass是无法使用@FunctionalInterface注解的，官方的解释是为了防止AbstractClass的构造函数做一些事情，可能会导致一些调用者意料不到的事情发生。</p>

<p>好了，我们来看一点代码，Runnable接口现在变成了这个样子：</p>

<figure class='code'><figcaption><span>Runnable接口新定义 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@FunctionalInterface</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Runnable</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们可以将任意无参数的lambda表达式赋值给Runnable:</p>

<figure class='code'><figcaption><span>向runnable传递闭包 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Runnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello lambda!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>  <span class="n">runnable</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>lambda表达式本质上是一个函数，所以我们还可以用更加神奇的赋值：</p>

<figure class='code'><figcaption><span>向runnable传递闭包 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloLambda</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">hellolambda</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello lambda!&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Runnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="nl">HelloLambda:</span><span class="o">:</span><span class="n">hellolambda</span><span class="o">;</span>
</span><span class='line'>          <span class="n">runnable</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里看到这里，大家大概明白了，lambda表达式其实只是个幌子，更深层次的含义是：函数在Java里面可以作为一个实体进行表示了。这就意味着，在Java8里，函数既可以作为函数的参数，也可以作为函数的返回值，即具有了lambda演算的所有特性。</p>

<h3>Function系列API</h3>

<p>看到这里，可能大家会有疑问？什么样的函数和什么样的lambda表达式属于同一类型？答案是参数和返回值的类型共同决定函数的类型。例如Runnable的run方法不接受参数，也没有返回值，那么Runnable接口则可以用任意没有参数且没有返回值的函数来赋值。这样概念上来说，Runnable表示的含义就<strong>从一个对象变成了一个方法</strong>。</p>

<p>这一点在Java8中的java.util.function包里的代码得到了验证。以最具有代表性的Function接口为例：</p>

<figure class='code'><figcaption><span>Function接口 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@FunctionalInterface</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">R</span> <span class="nf">apply</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了Function，我们可以这样写：</p>

<figure class='code'><figcaption><span>Function接口的赋值 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">convert</span> <span class="o">=</span> <span class="nl">String:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">;</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">convert</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个东东是不是很像Javascript中的函数对象？</p>

<p>可惜的是，这里的Function算是个半成品，它只能表示一个有单个参数，并有非void返回值的函数。像System.out.println()这种方法，因为返回值为void，是无法赋值为Function的！</p>

<p>怎么办？java.util.function包提供了一个不那么完美的解决方案：多定义几个FunctionalInterface呗！</p>

<p>于是，在Java8里有了：</p>

<ul>
<li>Supplier: 没有参数，只有返回值的函数</li>
<li>Consumer: 一个参数，返回值为void的函数</li>
<li>BiFunction: 两个参数，一个返回值的函数</li>
<li>BiConsumer: 两个参数，没有返回值的函数</li>
<li>&hellip;</li>
</ul>


<p>对于这些个API，我也没有什么力气吐槽了，反正我也想不出更好的方法…大家趁机，多学几个单词吧，嗯。</p>

<h2>总结：名词王国的新政</h2>

<p>相信很多同学都看过这篇著名的文章：<a href="http://lcwangchao.github.io/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/2012/07/02/excution_in_the_kingdom_of_nouns/">名词王国里的死刑</a>。这篇文章吐槽了Java里，动词(方法)在Java里总是要依附于某个名词(对象/类)存在。</p>

<p>现在动词在名词王国终于有了一个身份了。当然这个动词需要先取得一个名词的身份(FunctionInterface)，然后才能名正言顺的幸存下来。好在Oracle国王预先为他们留了一些身份(Function、Consumer、Supplier、BiFunction&hellip;)，所以大多数动词都已经找到了自己的位置。System.out.println(String)现在是Consumer<String>了，String.valueOf(Integer)现在是Function&lt;Integer,String>了，Collection.size()现在是Supplier<Integer>了…。要为一些较长参数的方法获取一个身份，也是挺容易的(定义一个新的FunctionInterface接口)。</p>

<p>我相信这个影响是深远的。例如下面一段代码，可以同一行代码将一个List<Integer>转换成一个List<String>：</p>

<figure class='code'><figcaption><span>List<Integer>转换成List<String> </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">intList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">toList</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然问题也存在。因为包含了闭包等因素，FunctionInterface的序列化/反序列化会是一个相当复杂的事情。熟悉Java的开发者，也会因为lambda的引入，带来了一些困惑。俗话说活到老学到老，我倒是不介意这个新功能，你说呢？</p>

<p>本系列文章还有余下几部分，敬请期待：</p>

<p><a href="">lambda表达式与闭包</a></p>

<p><a href="">Java8 lambda表达式原理分析</a></p>

<h2>参考文献：</h2>

<ol>
<li><a href="http://blog.sciencenet.cn/blog-414166-628109.html">http://blog.sciencenet.cn/blog-414166-628109.html</a></li>
<li><a href="http://www.global-sci.org/mc/issues/3/no2/freepdf/80s.pdf">http://www.global-sci.org/mc/issues/3/no2/freepdf/80s.pdf</a></li>
<li><a href="http://en.wikipedia.org/wiki/Lambda_calculus">http://en.wikipedia.org/wiki/Lambda_calculus</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[体验到了open-source的魅力]]></title>
    <link href="http://code4craft.github.com/blog/2013/08/18/ti-yan-dao-liao-open-sourcede-mei-li/"/>
    <updated>2013-08-18T21:58:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/08/18/ti-yan-dao-liao-open-sourcede-mei-li</id>
    <content type="html"><![CDATA[<p>webmagic从第一个正式版本到现在大概有一个月了，这一个月一直在提交代码，Longest Streak已经达到了25天，打破了开发blackhole时15天的记录了。webmagic确实是我最得意的一个项目，结合了领域经验和编码功底，包括注释和编码都是精雕细琢的。</p>

<!--more-->


<p>webmagic在oschina上推了两次，反响都挺好，读过源码的都说相当不错。webmagic的fork/star比相当高，看来大家都想改改，这也说明确实源码挺容易理解，挺好！一方面也说明功能不是很够，其实这也是以后的一个方向。</p>

<p>周五的时候往sonatype提交了一个JIRA，希望提交到maven中央库，走上了国际化的路线呢！既然国际化了，也就把注释和readme全部改成了英文。虽然完全是体力活，但是本着坚持终归会有回报的想法，还是很认真的去做了。上周开始用番茄工作法来管理时间，周末这两天都完成了6、7个番茄，比平时工作日都要高，看来果然兴趣才是生产力。</p>

<p>最高兴的是，有一个做爬虫的朋友<a href="https://github.com/yuany">@yuany</a>对webmagic很有兴趣，交流之后，决定把他加到webmagic的合作者里来。因为我工作中没有写爬虫，所以能有个经常写爬虫的合作者是相当好的，应该能把webmagic的易用性提高不少的。</p>

<p>后来对他的提交做了merge，好多我以前写的丑的地方还给做了重构，感觉挺开心的。学习、交流、提高，同时能产生有用的代码，这就是我最初的目标了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工作满两年时候的总结]]></title>
    <link href="http://code4craft.github.com/blog/2013/08/03/sum/"/>
    <updated>2013-08-03T15:15:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/08/03/sum</id>
    <content type="html"><![CDATA[<p>最近工作处于低靡状态。公司玩转型，但是也没转出个啥效果。组里转到前端开发了，产品方向不定，至今也没做出个啥玩意来。工作内容缺少挑战性，更多是跟产品形态打交道了。不是很喜欢这个领域。升职的事也说不准，虽然自己只有两年工作经验，但是由于读书太久，岁数却接近30了，有点危机感。</p>

<p>生活上丰富多彩。女儿出生了，开始操心起来了。压力也大了些，要计划买房了。老婆工作不顺利，不过她自己也没太大所谓，随遇而安吧。</p>

<p>业余项目也挺丰富。BlackHoleJ和webmagic有了不少star了，都有了公司级用户，也得到了不少赞扬。</p>

<!--more-->


<p>webmagic反响出乎意料的好，还有用户去建了一个群，有个朋友基于这个做了一个企业级别的抓取工具(带管理后台的)，朋友们都戏称我教主了。能把这些东西分享出来，并得到肯定，这肯定是非常开心的。这个工具还有很多后续工作要做，最近为了它忙的头昏眼花的，孩子都有好多时候是老婆在带。所幸老婆非常认可我的业余爱好，但是自己多少也得学会安排时间了。</p>

<p>从毕业两年来，技术上的进步我自己是满意的，特别是还有能拿得出手的作品。今后的重点应该是深度为主。今年之后的计划是，好好把自己之前挖的几个坑：webmagic、MonkeySocks和taijicaptcha搞搞，都是有市场有挑战的东西。</p>

<p>另一方面，好好学学与人交往。必须要克服一下了，不然以后的职业发展不好走。</p>

<p>以一个健康的节奏生活并工作下去。</p>

<p>顺便写一下，发布octopress的时候提示：</p>

<pre><code>(&lt;unknown&gt;): did not find expected key while parsing a block mapping at line 2 column 1 in /Users/yihua/codecraft/pages/code4craft/source/_posts/2013-08-03-sum.markdown
</code></pre>

<p>结果是title里面，用到了四个&#8221;&ldquo;&rdquo;&ldquo;。改为&rdquo;&ldquo;之后，generate通过！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webmagic的设计机制及原理-如何开发一个Java爬虫]]></title>
    <link href="http://code4craft.github.com/blog/2013/07/18/webmagicde-she-ji-ji-zhi-ji-yuan-li/"/>
    <updated>2013-07-18T14:52:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/07/18/webmagicde-she-ji-ji-zhi-ji-yuan-li</id>
    <content type="html"><![CDATA[<p><img src="http://code4craft.github.io/images/posts/spider.jpeg" alt="image" /></p>

<p>之前就有网友在博客里留言，觉得webmagic的实现比较有意思，想要借此研究一下爬虫。最近终于集中精力，花了三天时间，终于写完了这篇文章。之前垂直爬虫写了一年多，webmagic框架写了一个多月，这方面倒是有一些心得，希望对读者有帮助。</p>

<h2>webmagic的目标</h2>

<p>一般来说，一个爬虫包括几个部分：</p>

<ul>
<li><p>页面下载</p>

<p> 页面下载是一个爬虫的基础。下载页面之后才能进行其他后续操作。</p></li>
<li><p>链接提取</p>

<p> 一般爬虫都会有一些初始的种子URL，但是这些URL对于爬虫是远远不够的。爬虫在爬页面的时候，需要不断发现新的链接。</p></li>
<li><p>URL管理</p>

<p> 最基础的URL管理，就是对已经爬过的URL和没有爬的URL做区分，防止重复爬取。</p></li>
<li><p>内容分析和持久化</p>

<p> 一般来说，我们最终需要的都不是原始的HTML页面。我们需要对爬到的页面进行分析，转化成结构化的数据，并存储下来。</p></li>
</ul>


<p>不同的爬虫，对这几部分的要求是不一样的。</p>

<!--more-->


<p>对于通用型的爬虫，例如搜索引擎蜘蛛，需要指对互联网大部分网页无差别进行抓取。这时候难点就在于页面下载和链接管理上&mdash;如果要高效的抓取更多页面，就必须进行更快的下载；同时随着链接数量的增多，需要考虑如果对大规模的链接进行去重和调度，就成了一个很大的问题。一般这些问题都会在大公司有专门的团队去解决，比如这里有一篇来自淘宝的<a href="http://www.searchtb.com/2011/07/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96%E9%9B%86%E7%BE%A4.html?spm=0.0.0.0.hHzGxv">快速构建实时抓取集群</a>。</p>

<p>而垂直类型的爬虫要解决的问题则不一样，比如想要爬取一些网站的新闻、博客信息，一般抓取数量要求不是很大，难点则在于如何高效的定制一个爬虫，可以精确的抽取出网页的内容，并保存成结构化的数据。这方面需求很多，webmagic就是为了解决这个目的而开发的。</p>

<p>使用Java语言开发爬虫是比较复杂的。虽然Java有很强大的页面下载、HTML分析工具，但是每个都有不小的学习成本，而且这些工具本身都不是专门为爬虫而生，使用起来也没有那么顺手。我曾经有一年的时间都在开发爬虫，重复的开发让人头痛。Java还有一个比较成熟的框架<a href="https://code.google.com/p/crawler4j/"><strong>crawler4j</strong></a>，但是它是为通用爬虫而设计的，扩展性差一些，满足不了我的业务需要。我也有过自己开发框架的念头，但是终归觉得抽象的不是很好。直到发现python的爬虫框架<a href="http://scrapy.org/"><strong>scrapy</strong></a>，它将爬虫的生命周期拆分的非常清晰，我参照它进行了模块划分，并用Java的方式去实现了它，于是就有了webmagic。</p>

<p>代码已经托管到github，地址是<a href="https://github.com/code4craft/webmagic">https://github.com/code4craft/webmagic</a>，Javadoc：<a href="http://code4craft.github.io/webmagic/docs/">http://code4craft.github.io/webmagic/docs/</a></p>

<p>webmagic的实现还参考了另一个Java爬虫<a href="https://gitcafe.com/laiweiwei/Spiderman"><strong>SpiderMan</strong></a>。SpiderMan是一个全栈式的Java爬虫，它的设计思想跟webmagic稍有不同，它希望将Java语言的实现隔离，仅仅让用户通过配置就完成一个垂直爬虫。理论上，SpiderMan功能更强大，很多功能已经内置，而webmagic则比较灵活，适合熟悉Java语法的开发者，可以比较非常方便的进行扩展和二次开发。</p>

<hr />

<h2>webmagic的模块划分</h2>

<p>webmagic目前的核心代码都在<strong>webmagic-core</strong>中，<strong>webmagic-samples</strong>里有一些定制爬虫的例子，可以作为参考。而<strong>webmagic-plugin</strong>目前还不完善，后期准备加入一些常用的功能。下面主要介绍webmagic-core的内容。</p>

<p>前面说到，webmagic参考了scrapy的模块划分，分为Spider(整个爬虫的调度框架)、Downloader(页面下载)、PageProcessor(链接提取和页面分析)、Scheduler(URL管理)、Pipeline(离线分析和持久化)几部分。只不过scrapy通过middleware实现扩展，而webmagic则通过定义这几个接口，并将其不同的实现注入主框架类Spider来实现扩展。</p>

<p><img src="http://code4craft.github.io/images/posts/webmagic-0.1.0.png" alt="image" /></p>

<h3>Spider类-核心调度</h3>

<p>Spider是爬虫的入口类，Spider的接口调用采用了链式的API设计，其他功能全部通过接口注入Spider实现，下面是启动一个比较复杂的Spider的例子。</p>

<figure class='code'><figcaption><span>启动一个Spider </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="n">Spider</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">sinaBlogProcessor</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">scheduler</span><span class="o">(</span><span class="k">new</span> <span class="n">FileCacheQueueScheduler</span><span class="o">(</span><span class="s">&quot;/data/temp/webmagic/cache/&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">pipeline</span><span class="o">(</span><span class="k">new</span> <span class="n">FilePipeline</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">thread</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>  
</span></code></pre></td></tr></table></div></figure>


<p>Spider的核心处理流程非常简单，代码如下：</p>

<figure class='code'><figcaption><span>Spider核心流程 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="kd">private</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Page</span> <span class="n">page</span> <span class="o">=</span> <span class="n">downloader</span><span class="o">.</span><span class="na">download</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">page</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">sleep</span><span class="o">(</span><span class="n">site</span><span class="o">.</span><span class="na">getSleepTime</span><span class="o">());</span>
</span><span class='line'>              <span class="k">return</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">pageProcessor</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">page</span><span class="o">);</span>
</span><span class='line'>          <span class="n">addRequest</span><span class="o">(</span><span class="n">page</span><span class="o">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">Pipeline</span> <span class="n">pipeline</span> <span class="o">:</span> <span class="n">pipelines</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">pipeline</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">sleep</span><span class="o">(</span><span class="n">site</span><span class="o">.</span><span class="na">getSleepTime</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Downloader-页面下载</h3>

<p>页面下载是一切爬虫的开始。</p>

<p>大部分爬虫都是通过模拟http请求，接收并分析响应来完成。这方面，JDK自带的<strong>HttpURLConnection</strong>可以满足最简单的需要，而<strong>Apache HttpClient</strong>(4.0后整合到HttpCompenent项目中)则是开发复杂爬虫的不二之选。它支持自定义HTTP头(对于爬虫比较有用的就是User-agent、cookie等)、自动redirect、连接复用、cookie保留、设置代理等诸多强大的功能。</p>

<p>webmagic使用了HttpClient 4.2，并封装到了<strong>HttpClientDownloader</strong>。学习HttpClient的使用对于构建高性能爬虫是非常有帮助的，官方的<a href="http://hc.apache.org/httpcomponents-client-ga/tutorial/html/">Tutorial</a>就是很好的学习资料。目前webmagic对HttpClient的使用仍在初步阶段，不过对于一般抓取任务，已经够用了。</p>

<p>下面是一个使用HttpClient最简单的例子：</p>

<figure class='code'><figcaption><span>HttpClient简单使用 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'>        <span class="n">HttpGet</span> <span class="n">httpGet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="s">&quot;http://youhost/xxx&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HttpResponse</span> <span class="n">httpResponse</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">httpGet</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">httpResponse</span><span class="o">.</span><span class="na">getEntity</span><span class="o">().</span><span class="na">getContent</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于一些Javascript动态加载的网页，仅仅使用http模拟下载工具，并不能取到页面的内容。这方面的思路有两种：一种是抽丝剥茧，分析js的逻辑，再用爬虫去重现它(比如在网页中提取关键数据，再用这些数据去构造Ajax请求，最后直接从响应体获取想要的数据)；
另一种就是：内置一个浏览器，直接获取最后加载完的页面。这方面，js可以使用<strong>PhantomJS</strong>，它内部集成了webkit。而Java可以使用<strong>Selenium</strong>，这是一个非常强大的浏览器模拟工具。考虑以后将它整理成一个独立的Downloader，集成到webmagic中去。</p>

<p>一般没有必要去扩展Downloader。</p>

<h3>PageProcessor-页面分析及链接抽取</h3>

<p>这里说的页面分析主要指HTML页面的分析。页面分析可以说是垂直爬虫最复杂的一部分，在webmagic里，PageProcessor是定制爬虫的核心。通过编写一个实现PageProcessor接口的类，就可以定制一个自己的爬虫。</p>

<p>页面抽取最基本的方式是使用正则表达式。正则表达式好处是非常通用，解析文本的功能也很强大。但是正则表达式最大的问题是，不能真正对HTML进行语法级别的解析，没有办法处理关系到HTML结构的情况(例如处理标签嵌套)。例如，我想要抽取一个&lt;div>里的内容，可以这样写：&#8221;&lt;div>(.*?)&lt;/div>&ldquo;。但是如果这个div内部还包含几个子div，这个时候使用正则表达式就会将子div的&rdquo;&lt;/div>&ldquo;作为终止符截取。为了解决这个问题，我们就需要进行HTML的分析。</p>

<p>HTML分析是一个比较复杂的工作，Java世界主要有几款比较方便的分析工具：</p>

<h4><strong>Jsoup</strong></h4>

<p>Jsoup是一个集强大和便利于一体的HTML解析工具。它方便的地方是，可以用于支持用jquery中css selector的方式选取元素，这对于熟悉js的开发者来说基本没有学习成本。</p>

<figure class='code'><figcaption><span>Jsoup的CSS Selector </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="s">&quot;blabla&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">JSoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Elements</span> <span class="n">links</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="s">&quot;a[href]&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jsoup还支持白名单过滤机制，对于网站防止XSS攻击也是很好的。</p>

<h4><strong>HtmlParser</strong></h4>

<p>HtmlParser的功能比较完备，也挺灵活，但谈不上方便。这个项目很久没有维护了，最新版本是2.1。HtmlParser的核心元素是Node，对应一个HTML标签，支持getChildren()等树状遍历方式。HtmlParser另外一个核心元素是NodeFilter，通过实现NodeFilter接口，可以对页面元素进行筛选。这里有一篇HtmlParser的使用文章：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-crawler/">使用 HttpClient 和 HtmlParser 实现简易爬虫</a>。</p>

<h4><strong>Apache tika</strong></h4>

<p>tika是专为抽取而生的工具，还支持PDF、Zip甚至是Java Class。使用tika分析HTML，需要自己定义一个抽取内容的Handler并继承<code>org.xml.sax.helpers.DefaultHandler</code>，解析方式就是xml标准的方式。crawler4j中就使用了tika作为解析工具。SAX这种流式的解析方式对于分析大文件很有用，我个人倒是认为对于解析html意义不是很大。</p>

<figure class='code'><figcaption><span>使用tika进行HTML解析 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">HtmlParser</span> <span class="n">htmlParser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HtmlParser</span><span class="o">();</span>
</span><span class='line'>      <span class="n">htmlParser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">page</span><span class="o">.</span><span class="na">getContentData</span><span class="o">()),</span>
</span><span class='line'>       <span class="n">contentHandler</span><span class="o">,</span> <span class="n">metadata</span><span class="o">,</span> <span class="k">new</span> <span class="n">ParseContext</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>HtmlCleaner与XPath</strong></h4>

<p>HtmlCleaner最大的优点是：支持XPath的方式选取元素。XPath是一门在XML中查找信息的语言，也可以用于抽取HTML元素。XPath与CSS Selector大部分功能都是重合的，但是CSS Selector专门针对HTML，写法更简洁，而XPath则是通用的标准，可以精确到属性值。XPath有一定的学习成本，但是对经常需要编写爬虫的人来说，这点投入绝对是值得的。</p>

<p>学习XPath可以参考w3school的<a href="http://www.w3school.com.cn/xpath/">XPath 教程</a>。下面是使用HtmlCleaner和xpath进行抽取的一段代码：</p>

<figure class='code'><figcaption><span>使用HtmlCleaner和XPath抽取元素 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="n">HtmlCleaner</span> <span class="n">htmlCleaner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HtmlCleaner</span><span class="o">();</span>
</span><span class='line'>      <span class="n">TagNode</span> <span class="n">tagNode</span> <span class="o">=</span> <span class="n">htmlCleaner</span><span class="o">.</span><span class="na">clean</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Object</span><span class="o">[]</span> <span class="n">objects</span> <span class="o">=</span> <span class="n">tagNode</span><span class="o">.</span><span class="na">evaluateXPath</span><span class="o">(</span><span class="s">&quot;xpathStr&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>几个工具的对比</h4>

<p>在这里评价这些工具的主要标准是“方便”。就拿抽取页面所有链接这一基本任务来说，几种代码分别如下：</p>

<p>XPath:</p>

<figure class='code'><figcaption><span>XPath提取链接 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="n">tagNode</span><span class="o">.</span><span class="na">evaluateXPath</span><span class="o">(</span><span class="s">&quot;//a/@href&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>CSS Selector:</p>

<figure class='code'><figcaption><span>CSS Selector提取链接 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="c1">//使用类似js的实现</span>
</span><span class='line'>      <span class="n">$</span><span class="o">(</span><span class="s">&quot;a[href]&quot;</span><span class="o">).</span><span class="na">attr</span><span class="o">(</span><span class="s">&quot;href&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>HtmlParser：</p>

<figure class='code'><figcaption><span>HtmlParser提取链接 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">Parser</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Parser</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="n">NodeFilter</span> <span class="n">aFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TagNameFilter</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">NodeList</span> <span class="n">nodes</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">extractAllNodesThatMatch</span><span class="o">(</span><span class="n">aFilter</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nodes</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Node</span> <span class="n">eachNode</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="na">elementAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">eachNode</span> <span class="k">instanceof</span> <span class="n">LinkTag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">LinkTag</span> <span class="n">linkTag</span> <span class="o">=</span> <span class="o">(</span><span class="n">LinkTag</span><span class="o">)</span> <span class="n">eachNode</span><span class="o">;</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">linkTag</span><span class="o">.</span><span class="na">extractLink</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>XPath是最简单的，可以精确选取到href属性值；而CSS Selector则次之，可以选取到HTML标签，属性值需要调用函数去获取；而HtmlParser和SAX则需要手动写程序去处理标签了，比较麻烦。</p>

<h4>webmagic的Selector</h4>

<p><strong>Selector</strong>是webmagic为了简化页面抽取开发的独立模块，是整个项目中我最得意的部分。这里整合了CSS Selector、XPath和正则表达式，并可以进行链式的抽取，很容易就实现强大的功能。即使你使用自己开发的爬虫工具，webmagic的Selector仍然值得一试。</p>

<p>例如，我已经下载了一个页面，现在要抽取某个区域的所有包含&#8221;blog&#8221;的链接，我可以这样写：</p>

<figure class='code'><figcaption><span>webmagic的链式抽取 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="c1">//content是用别的爬虫工具抽取到的正文</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="s">&quot;blabla&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">links</span> <span class="o">=</span> <span class="n">Html</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">content</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">$</span><span class="o">(</span><span class="s">&quot;div.title&quot;</span><span class="o">)</span>  <span class="c1">//css 选择，Java里虽然很少有$符号出现，不过貌似$作为方法名是合法的</span>
</span><span class='line'>      <span class="o">.</span><span class="na">xpath</span><span class="o">(</span><span class="s">&quot;//@href&quot;</span><span class="o">)</span>  <span class="c1">//提取链接</span>
</span><span class='line'>      <span class="o">.</span><span class="na">regex</span><span class="o">(</span><span class="s">&quot;.*blog.*&quot;</span><span class="o">)</span> <span class="c1">//正则匹配过滤</span>
</span><span class='line'>      <span class="o">.</span><span class="na">toStrings</span><span class="o">();</span> <span class="c1">//转换为string</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，webmagic的抓取链接需要显示的调用<code>Page.addTargetRequests()</code>去添加，这也是为了灵活性考虑的(很多时候，下一步的URL不是单纯的页面href链接，可能会根据页面模块进行抽取，甚至可能是自己拼凑出来的)。</p>

<p>补充一个有意思的话题，就是对于页面正文的自动抽取。相信用过Evernote Clearly都会对其自动抽取正文的技术印象深刻。这个技术又叫<strong>Readability</strong>，webmagic对readability有一个粗略的实现<strong>SmartContentSelector</strong>，用的是P标签密度计算的方法，在测试oschina博客时有不错的效果。</p>

<h3>Scheduler-URL管理</h3>

<p>URL管理的问题可大可小。对于小规模的抓取，URL管理是很简单的。我们只需要将待抓取URL和未抓取URL分开保存，并进行去重即可。使用JDK内置的集合类型Set、List或者Queue都可以满足需要。如果我们要进行多线程抓取，则可以选择线程安全的容器，例如LinkedBlockingQueue以及ConcurrentHashMap。</p>

<p>因为小规模的URL管理非常简单，很多框架都并不将其抽象为一个模块，而是直接融入到代码中。但是实际上，抽象出Scheduler模块，会使得框架的解耦程度上升一个档次，并非常容易进行横向扩展，这也是我从scrapy中学到的。</p>

<p>在webmagic的设计中，除了Scheduler模块，其他的处理-从下载、解析到持久化，每个任务都是互相独立的，因此可以通过多个Spider共用一个Scheduler来进行扩展。排除去重的因素，URL管理天生就是一个队列，我们可以很方便的用分布式的队列工具去扩展它，也可以基于mysql、redis或者mongodb这样的存储工具来构造一个队列，这样构建一个多线程乃至分布式的爬虫就轻而易举了。</p>

<p>URL去重也是一个比较复杂的问题。如果数据量较少，则使用hash的方式就能很好解决。数据量较大的情况下，可以使用Bloom Filter或者更复杂的方式。</p>

<p>webmagic目前有两个Scheduler的实现，<strong>QueueScheduler</strong>是一个简单的内存队列，速度较快，并且是线程安全的，<strong>FileCacheQueueScheduler</strong>则是一个文件队列，它可以用于耗时较长的下载任务，在任务中途停止后，下次执行仍然从中止的URL开始继续爬取。</p>

<h3>Pipeline-离线处理和持久化</h3>

<p>Pipeline其实也是容易被忽略的一部分。大家都知道持久化的重要性，但是很多框架都选择直接在页面抽取的时候将持久化一起完成，例如crawer4j。但是Pipeline真正的好处是，将页面的在线分析和离线处理拆分开来，可以在一些线程里进行下载，另一些线程里进行处理和持久化。</p>

<p>你可以扩展Pipeline来实现抽取结果的持久化，将其保存到你想要保存的地方-本地文件、数据库、mongodb等等。Pipeline的处理目前还是在线的，但是修改为离线的也并不困难。</p>

<p>webmagic目前只支持控制台输出和文件持久化，但是持久化到数据库也是很容易的。</p>

<h2>结语</h2>

<p>webmagic确实是一个山寨的框架，本身也没有太多创新的东西，但是确实对Java爬虫的实现有了一些简化。在强大便利的功能和较高的灵活性中间，webmagic选择了后者，目标就是要打造一个熟练的Java开发者也用的比较顺手的工具，并且可以集成到自己的业务系统中，这一点我自己开发了不少这样的业务，对其灵活性还是比较有信心的。webmagic目前的代码实现还比较简单(不到2000行)，如果有兴趣的阅读代码可能也会有一些收获，也非常欢迎建议和指正。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monkeysocks架构规划]]></title>
    <link href="http://code4craft.github.com/blog/2013/07/07/monkeysocks-arch/"/>
    <updated>2013-07-07T21:35:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/07/07/monkeysocks-arch</id>
    <content type="html"><![CDATA[<blockquote><p>monkeysocks的目标是为开发以及测试提供一个稳定的环境。它使用socks代理，将录制网络流量并本地保存，并在测试时将其重放。</p></blockquote>

<h2>jsocks的改造</h2>

<p>首先对公司一个项目进行了代理，测试结果：从开始启动到完成，只有4.7M的网络流量，本地空间开销不是问题。</p>

<p>今天把jsocks修改了下，将build工具换成了maven，并独立成了项目<a href="https://github.com/code4craft/monkeysocks/jsocks">https://github.com/code4craft/jsocks</a>。后来算是把record和replay功能做完了，开始研究各种协议replay的可能性。</p>

<!--more-->


<p>replay时候，如何知道哪个请求对应响应包是个大问题。开始的方式是把request报文的md5作为key，response作为value。</p>

<h2>TCP协议分析</h2>

<p>后来使用wiredshark结合程序日志来进行分析。</p>

<p>TCP协议栈大概是这样子：
<img src="http://www.skullbox.net/diagrams/tcppacket.gif?dur=673" alt="image" /></p>

<p>下面是wiredshark抓包的截图，从ea开始才是应用层协议的内容。</p>

<p><img src="http://code4craft.github.io/images/posts/tcp-wiredshark.png" alt="image" /></p>

<h2>应用层协议分析</h2>

<p>实现replay后，拿HTTP协议做了测试，自己用程序写了个URLConnection，倒是能够实现replay，但是换到浏览器里就很难了，因为cookie总是会有些不一样(现在基本上所有站点都会写cookie吧)。如果不对应用层协议本身进行分析，那么进行包的伪造就很难了。</p>

<p>https协议对于重放攻击做了处理，每次的请求包都不一样，也无法replay成功，暂时略过。</p>

<p>后来对于测试中得重点协议&mdash;mysql的协议，进行了研究。</p>

<p>这是一个有状态的协议，状态转移图如下：</p>

<p><img src="http://dev.mysql.com/doc/internals/en/images/graphviz-db6c3eaf9f35f362259756b257b670e75174c29b.png" alt="image" /></p>

<p>详细介绍<a href="http://dev.mysql.com/doc/internals/en/client-server-protocol.html">http://dev.mysql.com/doc/internals/en/client-server-protocol.html</a>，有点hold不住的感觉啊！</p>

<p>看了Authentication部分，会由server端发送一个随机数，来避免重放攻击。这个东西启发了我，因为主动权一般都是在server端，而我们要对client进行欺骗，难度就小了很多。</p>

<h2>架构设计</h2>

<p>后来决定把架构解耦了，fake server单独作为一个模块，可以单独启动成TCP server，也可以加入到jsocks里。最后架构是这样子：</p>

<p><img src="http://code4craft.github.io/images/posts/monkeysocks-arch.png" alt="image" /></p>

<p>fake servers的实现必定是个大坑，不过能把常用协议都了解一遍，本身也很有意思不是么？</p>

<h2>开发计划：</h2>

<ul>
<li><p>实现fake servers的TCP框架。</p></li>
<li><p>研究并实现常用协议的fake server。</p></li>
<li><p>确定持久化以及报文对应的策略。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monkeysocks开发日志]]></title>
    <link href="http://code4craft.github.com/blog/2013/07/06/monkeysocks/"/>
    <updated>2013-07-06T16:09:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/07/06/monkeysocks</id>
    <content type="html"><![CDATA[<blockquote><p>monkeysocks的目标是为开发以及测试提供一个稳定的环境。</p></blockquote>

<h4>2013-7-5 动机</h4>

<p>前几天听说公司的测试团队在鼓捣数据固化的东西，说白了就是在测试启动时构建一个临时性的数据库，操作完之后再销毁，这样的好处是不造成测试副作用，同时屏蔽环境的差异。</p>

<!--more-->


<p>但是目前公司内部SOA用的太多了，仅仅靠数据库固化明显不现实，公司的架构团队做了一个将所有remote service放到本地启动的东西，但是这样子启动开销有点难以接受。有没有更可行的方案？</p>

<p>之前也有人做过一个单测的东西，可以将所有RPC调用的结果序列化成文本文件，下次调用时再序列化出来，这样其实就屏蔽了远程调用。但是Java语言层面的机制导致要把千奇八怪的对象序列化下来，本来就是不可完成的任务(有些对象本身就不是POJO，还有在getter、setter写逻辑的)。</p>

<p>于是我有一个大胆的设想：其实Java的外部依赖无非是网络IO，就是TCP/UDP包嘛，那我能不能做一个工具，录制一个稳定环境的网络流量，然后固化下来，最终在调用时进行重放，岂不是一劳永逸？</p>

<p>但是TCP/UDP毕竟是系统底层的东西，而且我想对每个Java进程单独做重放，所以只能从Java内部机制入手了。</p>

<p>有两个方法：</p>

<p>用cglib改写所有网络IO相关的接口，改用固化调用。</p>

<p>设置Java全局socks代理，并启动socks server，在socks server里做代理。</p>

<p>显然第二种方法更简单，有四两拨千斤的感觉！</p>

<p>找到一个Java socks server，jsocks，最初版本比较老，google code上有一个改进版，用的是ant，因为以后要集成肯定要用maven，于是就做了点maven化的处理，考虑以后单独做成一个项目，现在先改了测试下可行性吧。<a href="https://github.com/code4craft/monkeysocks/jsocks">https://github.com/code4craft/jsocks</a></p>

<p>Java里面设置全局socksProxy的方法见<a href="http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html">http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html</a>。</p>

<p>鼓捣一下，成功启动起来，明天先对公司的项目进行试用。</p>

<h4>2013-7-6</h4>

<p>今天开始了对socks的摸索。</p>

<p>首先对公司一个项目进行了代理，测试结果：从开始启动到完成，只有4.7M的网络流量，本地空间开销不是问题。</p>

<p>想到咱这个不就是个TCP重放攻击么？了解了一下一些协议防重放攻击的机制，发现大多是在server端做，那么其实client端的请求并无不同，希望是这样！</p>

<p>研究了一下http协议，response竟然有date项，希望不会作为判断依据，要不然还要做http解析，那就纠结了！怎么觉得自己老是在研究怎么实现一个gfw呢？</p>

<p>在测试中，遇到了问题：</p>

<p>很多协议里都自带了版本号，比如<a href="http://www.hoterran.info/mysql-protocol-soucecode-2">mysql</a>、zookeeper，这样就给识别请求和伪造响应带来了难度。幸好公司内部用的工具不是太多，理论上还是在可控状态。</p>

<p>最终决定结构大概是这样子：</p>

<p><img src="http://code4craft.github.io/images/posts/mocksocks-flow-in.png" alt="image" /></p>

<p><img src="http://code4craft.github.io/images/posts/mocksocks-flow-out.png" alt="image" /></p>

<p>晚上尝试了一下，jsocks的流程写的过于凌乱，最终缓存结构也没定好，不说了，碎觉！</p>

<h4>2013-7-7</h4>

<p>鼓捣了下架构的事情，文章单独整理了下，链接：<a href="http://code4craft.github.io/blog/2013/07/07/monkeysocks-arch/">http://code4craft.github.io/blog/2013/07/06/monkeysocks-arch/</a></p>

<h4>2013-7-8</h4>

<p>今天跟水哥讨论起两个问题，假设拿到一个报文byte[]，存在两个难点，一个是对于可变部分的判断和伪造，另一个是对于包结构的近似匹配。</p>

<p>可变部分的的判断，水哥说可以用录两次，去掉不同的部分，就变成一个不变的基和一个过滤器，然后对于以后的包，就用过滤器过滤后找到这个基。</p>

<p>包结构的近似匹配，水哥提议对包的所有字节进行求和，过滤掉位置信息，似乎也是可行的方向？</p>

<p>用Java实现一个流管道：</p>

<p><a href="http://ostermiller.org/convert_java_outputstream_inputstream.html">http://ostermiller.org/convert_java_outputstream_inputstream.html</a></p>

<h4>2013-7-9</h4>

<p>使用byte和条件变量实现了一个Java流的管道，线程安全的，debug了好久终于成功，当年操作系统的知识还是没还给老师！<a href="https://github.com/code4craft/monkeysocks/blob/master/monkeysocks-server/src/main/java/com/dianping/monkeysocks/socket/StreamBuffer.java">https://github.com/code4craft/monkeysocks/blob/master/monkeysocks-server/src/main/java/com/dianping/monkeysocks/socket/StreamBuffer.java</a></p>

<p>这个东东使得伪造一个Socket成为了可能，下面就是使用Socket API实现fake servers的逻辑了。</p>

<h4>2013-7-11</h4>

<p>昨天太累了，项目又比较忙，先休息一天。</p>

<p>今天早上考虑用自己写的TCP server框架把jsocks的连接部分重写一遍(那堆代码全部在一个类中，实在是太复杂了)，想到
今天早上想了下InputStream这些玩意，觉得这样总会占用一个线程去把Stream转来转去的，弄成onReceive()这样的异步调用的话，就很容易做到链式调用了。</p>

<p>这东西太费脑子了，先休息一天半天再说。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转github之--神啊满足我的虚荣心吧]]></title>
    <link href="http://code4craft.github.com/blog/2013/07/03/show-in-github/"/>
    <updated>2013-07-03T07:47:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/07/03/show-in-github</id>
    <content type="html"><![CDATA[<h3>github版简历</h3>

<p><a href="http://resume.github.io/">http://resume.github.io/</a>上有这个东东，但是样式太难看了。看到一个挺不错的模板<a href="https://github.com/hit9/GhResume">https://github.com/hit9/GhResume</a>，就给用上了。我的简历：
<a href="http://code4craft.github.io/GhResume/">http://code4craft.github.io/GhResume/</a></p>

<h3>关注star</h3>

<p>最近做的项目在github每天会有几个star，出于虚荣心嘛，经常忍不住就会去看看，有人star了没？有人fork了没？</p>

<p>每天看太麻烦了，干脆做成一个chrome插件，带桌面通知，有新star提醒，岂不开心？</p>

<p>于是有了<a href="https://github.com/code4craft/exciting"><strong>exciting</strong></a>！ 哥也会做chrome插件了！液！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个shell下的todolist]]></title>
    <link href="http://code4craft.github.com/blog/2013/06/28/todolist/"/>
    <updated>2013-06-28T10:17:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/06/28/todolist</id>
    <content type="html"><![CDATA[<p>使用和文件保存都挺简单，试试看吧！</p>

<p><a href="http://todotxt.com/">http://todotxt.com/</a>貌似还能同步到手机端？</p>

<p>下载之后，</p>

<pre><code>ln -s xxx/todo.sh /usr/local/bin/todo
</code></pre>

<p>貌似这样会把东西存到/usr/local/bin/todo.txt里？不管了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写了个快捷保存文本的shell工具]]></title>
    <link href="http://code4craft.github.com/blog/2013/06/27/yong-pythonxie-liao-ge-xiao-gong-ju/"/>
    <updated>2013-06-27T22:14:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/06/27/yong-pythonxie-liao-ge-xiao-gong-ju</id>
    <content type="html"><![CDATA[<p>作为一个Java程序员，对脚本语言程序员自己随时写些小工具，已经羡慕很久了，于是最终开始了脚本语言的学习。</p>

<!-- more -->


<p>第一个工具是个助记程序。像工作中我们总会管理一些文本，比如内网服务器地址、git仓库地址什么的，之前一直都是要登录一个平台去拷贝下来，然后粘贴到shell里，特别麻烦。想写了个工具，为一个文本写一个助记符，然后保存到文件里，每次可以调用程序把文件读出来，再根据助记符查找到对应文本。用法可以这样：</p>

<pre><code>add alias text
get alias
</code></pre>

<p>例如：</p>

<pre><code>add getter https://github.com/code4craft/getter 
</code></pre>

<p>也可以用&#8220;符号穿插到程序里：</p>

<pre><code>git clone `get getter`
</code></pre>

<p>刚开始用python写了一遍，把文件保存到~/.getrc，并每次读出来并更新。</p>

<p>后来想了想，这个方法没有自动补全，太麻烦！有没有好办法？最终想到，干脆把name作为可执行文件名，value作为程序的输出，每个name对应一个输出，再以特定前缀开始，这样子也有自动提示了，岂不是更好？于是就有了shell版本：</p>

<pre><code>add.sh

 #!/bin/sh
FILE_PATH=/usr/local/getter
PREFIX=-
[ -d "$FILE_PATH" ] || mkdir -p $FILE_PATH
if [ -z "$1" ]
then
    echo "Usage: $0 alias [text]"
else
    FILE_NAME=$FILE_PATH/$PREFIX$1
    if [ -z "$2" ]
    then
        rm -f $FILE_NAME
    else
        echo "#!/bin/sh" &gt; $FILE_NAME
        echo "echo \"$2\"" &gt;&gt; $FILE_NAME
        chmod +x $FILE_NAME
    fi
fi
</code></pre>

<p>记得在/etc/bashrc中加一行</p>

<pre><code>export PATH=$PATH:/usr/local/getter
</code></pre>

<p>后来一想，那么如果我要保存一个可执行的shell命令，执行时是不是要<code>-xx</code>?干脆把命令直接写到脚本里，也别echo了！</p>

<pre><code>edd.sh

 #!/bin/sh
FILE_PATH=/usr/local/getter
PREFIX=-
[ -d "$FILE_PATH" ] || mkdir -p $FILE_PATH
if [ -z "$1" ]
then
    echo "Usage: $0 alias [command]"
else
    FILE_NAME=$FILE_PATH/$PREFIX$1
    if [ -z "$2" ]
    then
        rm -f $FILE_NAME
    else
        echo "#!/bin/sh" &gt; $FILE_NAME
        echo "$2 \$1 \$2 \$3" &gt;&gt; $FILE_NAME
        chmod +x $FILE_NAME
    fi
fi
</code></pre>

<p>比如之后我要保存一条命令&#8221;curl <a href="http://code4craft.github.io/blackhole/install.sh">http://code4craft.github.io/blackhole/install.sh</a> | sh&#8221;，可以这么用：</p>

<pre><code>#保存命令
edd install "curl http://code4craft.github.io/blackhole/install.sh | sh"
#执行命令
-install
</code></pre>

<p>代码已经放到了github:</p>

<p><a href="https://github.com/code4craft/getter">https://github.com/code4craft/getter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BlackHole开发日记-一次压力测试及JVM调优的经过]]></title>
    <link href="http://code4craft.github.com/blog/2013/06/23/%5B%3F%5D-ci-jvmdiao-you-de-jing-guo/"/>
    <updated>2013-06-23T06:44:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/06/23/[?]-ci-jvmdiao-you-de-jing-guo</id>
    <content type="html"><![CDATA[<p>BlackHole开发很久了，目前稳定性、性能都还可以了，但是作为一个Java程序，内存开销一直是硬伤，动不动100M内存下去了，对于单机用户实在是不太友好。</p>

<p>怎么办？优化先从分析开始！</p>

<h3>获取内存信息</h3>

<p>获取内存信息一般使用jmap。</p>

<pre><code>jmap -histo pid
</code></pre>

<p>这种方式获取到得比较简略，我们可以先把内存dump下来，再进行离线分析。jhat是一个离线内存分析工具，会开启一个web服务以供展示。</p>

<pre><code>jmap -dump:file=dumpfile pid
jhat -J-Xmx512m dumpfile
</code></pre>

<!-- more -->


<p>访问<a href="http://127.0.0.1:7000%E5%8D%B3%E5%8F%AF%E3%80%82%E9%BB%98%E8%AE%A4%E6%98%AFClass%E5%88%97%E8%A1%A8%EF%BC%8C%E7%BF%BB%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD%E3%80%82">http://127.0.0.1:7000%E5%8D%B3%E5%8F%AF%E3%80%82%E9%BB%98%E8%AE%A4%E6%98%AFClass%E5%88%97%E8%A1%A8%EF%BC%8C%E7%BF%BB%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD%E3%80%82</a></p>

<p>参考资料：</p>

<p><a href="http://www.lhelper.org/newblog/?tag=jhat">http://www.lhelper.org/newblog/?tag=jhat</a>
<a href="http://blog.csdn.net/gtuu0123/article/details/6039474">http://blog.csdn.net/gtuu0123/article/details/6039474</a></p>

<h3>详细分析</h3>

<p>以下分析仅针对JDK 7 HotSpot虚拟机。jmap -histo的结果：</p>

<pre><code>num     #instances         #bytes  class name
----------------------------------------------
 1:         28490        4057072  &lt;constMethodKlass&gt;
 2:         28490        3882464  &lt;methodKlass&gt;
 3:          2630        2820064  &lt;constantPoolKlass&gt;
 4:         46350        2412600  &lt;symbolKlass&gt;
 5:         32778        2372824  [C
 6:          2630        1990744  &lt;instanceKlassKlass&gt;
 7:          3418        1955208  [I
 8:         15491        1911568  [B
 9:          2347        1845400  &lt;constantPoolCacheKlass&gt;
10:         19246         615872  java.lang.String
11:           256         561152  [Lnet.sf.ehcache.store.chm.SelectableConcurrentHashMap$HashEntry;
12:          2930         304720  java.lang.Class
13:          3740         247280  [S
14:          4321         221520  [[I
</code></pre>

<p>其中[开头表示数组，[C [I [B 分别是char[] int[] byte[]。</p>

<p>constMethodKlass、都实现自sun.jvm.hotspot.oops.Klass，用于在永久代里保存类的信息。</p>

<p>换到JDK6之后，发现永久代的消耗下去了。</p>

<pre><code>num     #instances         #bytes  class name
----------------------------------------------
 1:         10823        3072312  [B
 2:         16605        2318720  &lt;constMethodKlass&gt;
 3:         18687        1388088  [C
 4:         16605        1328608  &lt;methodKlass&gt;
 5:         27595        1296832  &lt;symbolKlass&gt;
 6:          1699         940392  &lt;constantPoolKlass&gt;
 7:          2520         883408  [I
 8:          1699         724944  &lt;instanceKlassKlass&gt;
 9:          1472         565136  &lt;constantPoolCacheKlass&gt;
10:           256         561152  [Lnet.sf.ehcache.store.chm.SelectableConcurrentHashMap$HashEntry;
11:         12148         291552  java.lang.String
12:          4505         288320  net.sf.ehcache.Element
13:          7290         233280  java.lang.ThreadLocal$ThreadLocalMap$Entry
14:          1946         186816  java.lang.Class
15:          4509         180360  net.sf.ehcache.store.chm.SelectableConcurrentHashMap$HashEntry
</code></pre>

<p>查看一下总的内存开销(参考资料:
<a href="http://yytian.blog.51cto.com/535845/574527">http://yytian.blog.51cto.com/535845/574527</a>)</p>

<pre><code>ps -e -o 'pid,comm,args,pcpu,rsz' | grep java |  sort -nrk5
1239 java            java -jar -Djava.io.tmpdir=  0.1 52816
</code></pre>

<p>或者：</p>

<pre><code>top -pid pid
</code></pre>

<p>查看到只有52m，看来JDK7占用内存果然增加了！</p>

<h3>压力测试</h3>

<p>使用140,000个随机域名做压力测试。发现之前使用的JDK7 Developer Preview u04，在短时间产生大量对象的时候，GC会失去作用，内存迅速飙升到200M，后来更新到1.7.0u25，稳定到了130m，qps大概在49000~50000之间。</p>

<p>尝试使用ConcurrentHashMap代替EhCache，qps提高到50000~51000之间，变化不明显，EhCache还是相当优秀的。</p>

<p>为了提高吞吐量，查看GC情况:</p>

<pre><code>sudo jstat -gcutil 2960
S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT   
0.00   0.75  30.35  12.06  72.92     25    0.063     0    0.000    0.063
</code></pre>

<p>140,000个请求产生了25次YGC。</p>

<p>参考了关于JVM的调优文章<a href="http://blog.csdn.net/kthq/article/details/8618052">http://blog.csdn.net/kthq/article/details/8618052</a></p>

<p>重新设置新生代为200m，并开启并行收集：</p>

<pre><code>JVM_OPTION="-XX:+UseParallelGC -XX:NewSize=200m"
</code></pre>

<p>140,000个请求只产生了3次YGC，但是qps变化并不明显。看来新生代设置大之后，虽然YGC少了，但是一次回收的时间多了，最终其实没啥影响啊，那还是弄小一点好了。</p>

<p>看来折腾JVM效果不明显，除了内存开销之外，其他没有明显变化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[换电脑了]]></title>
    <link href="http://code4craft.github.com/blog/2013/06/22/huan-dian-nao-liao/"/>
    <updated>2013-06-22T08:57:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/06/22/huan-dian-nao-liao</id>
    <content type="html"><![CDATA[<p>公司政策，每个人给6500软妹币报销，可以买电脑。因为刚好WWDC开完，老AIR降价，本着好用和省钱的标准，就买了老AIR一台，7388包发票。</p>

<p>换到AIR最不习惯的是屏幕，PRO的屏幕是1280*800，AIR的屏幕是1440x900，所以字总是特小，原来12pt的字体非要14pt才能显示出来，MAC还没法设置默认字体，只能装了个Tinker Tool。设置之后，各种丑和切边…没办法，办公用，眼睛不累是原则！</p>

<p>换电脑之后，得把老的东西弄过来。这次RVM倒是一次成功了，换了gem的source为淘宝的，更新还挺快的。octpress又重新装了一次，好像ruby的包好多都是安装到一个目录下可用的？最后只能把原来的octpress连同博客一起拷贝过来了。</p>
]]></content>
  </entry>
  
</feed>
