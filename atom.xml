<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[非典型代码强迫症]]></title>
  <link href="http://code4craft.github.com/atom.xml" rel="self"/>
  <link href="http://code4craft.github.com/"/>
  <updated>2014-05-16T08:38:52+08:00</updated>
  <id>http://code4craft.github.com/</id>
  <author>
    <name><![CDATA[code4craft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[又一次线上OOM排查经过]]></title>
    <link href="http://code4craft.github.com/blog/2014/05/15/oom-cont/"/>
    <updated>2014-05-15T22:00:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/05/15/oom-cont</id>
    <content type="html"><![CDATA[<p>最近线上一个服务又出现了频繁Full GC的情况，导致提供的业务经常超时。问题出现非常不稳定，经过两周的时候，终于又捕捉到了一次Full GC，于是联系运维做Heap Dump之后，经过一系列分析，终于解决问题。这次的问题稍微复杂一点，但是也比较有代表性，用到了VisualVM和MAT两个工具，继续记录如下。</p>

<!--more-->


<h2>现象</h2>

<p>这次使用公司的<a href="https://github.com/dianping/cat">CAT</a>监控平台看到的内存表现如下：</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/062243_4GUj_190591.png" alt="http://static.oschina.net/uploads/space/2014/0516/062243_4GUj_190591.png" /></p>

<p>可以看到，具体表现是：</p>

<ol>
<li>在很长一段时间内(数个小时)，New GC比较频繁，Full GC较少(一小时个位数)。</li>
<li>过了某一时间点后，Full GC增加，New GC则减少。</li>
<li>将服务切换下线后，Memory Free逐渐回升，Full GC减少。</li>
</ol>


<p>然后观察某一时刻的JMAP histo的内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> num     #instances         #bytes  class name
</span><span class='line'>----------------------------------------------
</span><span class='line'>   1:       5958517     5840833584  [C
</span><span class='line'>   2:         37983      706246056  [B
</span><span class='line'>   3:       5960539      190737248  java.lang.String
</span><span class='line'>   4:       1522282      126603936  [Ljava.lang.Object;
</span><span class='line'>   5:       3692000       88608000  java.lang.Double</span></code></pre></td></tr></table></div></figure>


<p>可以看到&#8221;[C&#8221;即&#8221;char[]&ldquo;占用内存达到了5.8G，它正是String的内部结构，换句话说，因为存在了大量的大String导致这个问题。</p>

<p>联系运维进行了Heap Dump之后，就开始了分析的过程。因为服务器内存有8G，所以相应的DUMP也有8G，对分析也造成了一点小困难。</p>

<p>下面是一些工具的使用过程，操作系统是OS X 10.8。</p>

<h2>使用VisualVM分析</h2>

<p>首先使用VisualVM对Heap Dump进行分析。分析需要比较大的内存，而VisualVM默认的内存是256M，所以需要先设置<code>/Applications/VisualVM.app/Contents/Resources/visualvm/etc/visualvm.conf</code>中的最大内存量，这里我们设置成了4G<code>-J-Xmx4096m</code>。</p>

<p>好了，现在打开dump文件，整个分析过程共占用内存2G，仍然在可接受范围。之后分析内存，可以看到跟之前histo一样的类关系。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/074246_GKl4_190591.png" alt="visual vm class" /></p>

<p>不同的是，这时候可以点进去，查看具体的对象。这里看到，竟然有几个大的String占用了756M的内存，看来我们找到问题了。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/074742_7S5S_190591.png" alt="visual vm object " /></p>

<p>发现一个奇怪的现象：“计算保留大小”之后，这些String的保留大小都是0。</p>

<p>保留大小是什么呢？</p>

<p>它是分析工具从GC roots开始查找，找到的所有不会回收的对象，然后按照引用关系，计算出这个“对象以及它引用的对象”的内存大小。这里很有趣的是，这些对象的保留大小都是0。</p>

<p>开始我甚至以为是工具出了问题，后来想想，其实答案很简单：这些大String是临时对象，没有什么对象持有它——通过分析这些String的依赖关系也说明了这一点。这些对象是可以被回收的，换句话说，并不是有明显的内存泄露。</p>

<p>这个“没有对象持有的String”很有意思，让我想到了，会不会是log的过程中，产生了这个String？因为log的时候，会调用对象的toString()方法，而一个大对象的toString()可能是很大的。查看了一下String的内容，是<code>[Class[field1=xxx,field2=yyy]]</code>这种结构，几乎可以肯定是toString()的结果，那么我们现在只要查看一下具体的内容，到底是哪里太大就可以了。</p>

<p>可惜的是，VisualVM里我尝试了各种方法，都没有办法Dump出这个对象的数据，甚至还尝试了VisualVM提供的OQL。</p>

<p><a href="http://visualvm.java.net/oqlhelp.html">OQL</a>是一种类SQL的表达式，同时整合了一些Javascript的函数功能，但是它的缺点就是太慢了…最后尝试用OQL Dump对象未果。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/075904_N7Sp_190591.png" alt="visual vm oql" /></p>

<h2>使用MAT分析</h2>

<p>转而尝试一下MAT。Eclipse MAT(Memory Analyzer Tool)是一个强大的内存分析工具，它可以方便的分析内存泄露的问题。实际使用之后，确实也感觉到比VisualVM更加强大一些。</p>

<p>我们使用MAT打开Dump文件，这也是一个漫长的过程。与VisualVM不同的是，MAT分析的时候，会在本地产生几个临时文件保存分析结果，所以相应的内存占用会小一些(1G左右)，第二次打开也会快很多。</p>

<p>打开完成后，我们看到可以看到几个占用内存较大的对象，这就是最可疑的内存泄漏源。意外的是Size显示的只有1.3GB，而且我们的大String都没在里面。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/071417_UaCv_190591.png" alt="mat" /></p>

<p>开始我们一度认为是Dump文件有错，后来上网搜索才知道，因为MAT的主要目标是排查内存占用量，所以默认大小是不计算不可达对象的——而我们的String都是不可达对象。对应Eclipse的文档里有介绍<a href="http://wiki.eclipse.org/MemoryAnalyzer/FAQ#How_to_analyse_unreachable_objects">http://wiki.eclipse.org/MemoryAnalyzer/FAQ#How_to_analyse_unreachable_objects</a>。</p>

<p>于是我们按照说明，在&#8221;Preferences=>Memory Analyzer&#8221;中勾选&#8221;Keep Unreachable Objects&#8221;，删除索引文件Dump同路径下的所有&#8221;.index&#8221;，即可看到所有的对象。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/081748_lx9g_190591.png" alt="mat-with-unreachable" /></p>

<p>点击Histogram，即可看到类的占用。在类上选择&#8221;List Objects&#8221;，即可看到所有对象。在对象上选择&#8221;Copy=>Value to File&#8221;，即可保存到文件。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0516/082102_7Tks_190591.png" alt="mat-objects" /></p>

<h2>原理</h2>

<p>之后我们通过分析对象，发现是因为某个用于缓存的对象使用了一个List结构，但是添加元素的没有去重，导致List越来越大造成的。这个对象本身占用内存只有110M，但是toString()出来的字符串达到700M的大小，所以引起了频繁的GC——最开始对象小的时候是New GC，后来对象大了，直接进入了年老代，就变成了Full GC。</p>

<h2>总结</h2>

<p>回到之前的问题，通过这次分析，我们可以这么总结：</p>

<ol>
<li><p>将服务切换下线后，Memory Free逐渐回升，Full GC减少，Heap Dump的可达对象较少</p>

<p> 这种情况不是内存泄露，有可能是对象创建开销太大造成的。</p></li>
<li><p>在1的前提下，New GC很频繁</p>

<p> 这种情况可能是频繁创建小对象，或者创建一些较大的对象(尚不足以直接进入年老代)</p></li>
<li><p>在1的前提下，Full GC很频繁</p>

<p> 这种情况是频繁创建大对象，或者创建了一些超大对象导致的。</p></li>
<li><p>大对象toString()产生的大String很可能是罪魁祸首</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[减肥中]]></title>
    <link href="http://code4craft.github.com/blog/2014/05/12/ondiet/"/>
    <updated>2014-05-12T23:04:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/05/12/ondiet</id>
    <content type="html"><![CDATA[<p>Github马拉松进行了78天了，希望也以同样的毅力坚持减肥。</p>

<!--more-->


<p>今天看了一篇文章：<a href="http://www.panghufei.com/?p=11163">http://www.panghufei.com/?p=11163</a>，以及BBC的纪录片<a href="http://v.youku.com/v_show/id_XNTYyODM5MjE2.html">视频: BBC 关于减肥你应该知道的十件事</a>。</p>

<p>纪录片很好，总结出来几点：</p>

<ol>
<li>用更小的盘子吃；</li>
<li>用高蛋白的食物、用粥类防止饥饿；</li>
<li>小习惯也能改变体重。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平静]]></title>
    <link href="http://code4craft.github.com/blog/2014/04/27/ping-jing/"/>
    <updated>2014-04-27T21:36:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/04/27/ping-jing</id>
    <content type="html"><![CDATA[<p>最近工作有些变动，有点忙。加上WebMagic也发展了一些用户，做了不少支持的工作，也发布了一些版本。终于前几天累倒了，感冒头痛，只能休息。</p>

<p>晚上买了个优酷的一年会员，又看了遍《勇敢的心》。之前因为太长没有看完，这次看的时候，听着平静的苏格兰风笛，有种恍若隔世的感觉。之前做事情太急躁，走得慢一点，才能看更多的风景。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件开发是否存在Law?]]></title>
    <link href="http://code4craft.github.com/blog/2014/04/15/ruan-jian-kai-fa-shi-fou-cun-zai-law/"/>
    <updated>2014-04-15T06:57:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/04/15/ruan-jian-kai-fa-shi-fou-cun-zai-law</id>
    <content type="html"><![CDATA[<p>昨天跟架构师讨论一个项目的设计，谈到MVC模式。MVC模式，是先从View设计还是先从Model设计？</p>

<!--more-->


<p>架构师的观点是，只要使用了某个模式，其中就存在必然的&#8221;Law&#8221;，不遵循就会误入歧途。例如MVC必须要从Model写起，因为Model是稳定的，是“对自然界的建模”，与业务无关，而View是易变的，是具体业务的展现。</p>

<p>我是实用主义者，我认为一个稳定的Model是需要领域积累的，一开始就做到一个稳定的Model，应对不断变化的需求非常难。很多时候从View写起，可以迅速实现业务。当业务发展到一定阶段，再抽象出一个Model也是水到渠成的事情。开发的过程本身也是对领域加深认识的一个过程。</p>

<p>但是也有些现状是“你不去想就不会有”，一堆View拼凑起来的项目太多了，其实最开始用一个不稳定的Model，加以迭代，最终变成稳定的，也是一个很好的过程？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淡然]]></title>
    <link href="http://code4craft.github.com/blog/2014/03/30/dan-ran/"/>
    <updated>2014-03-30T22:36:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/03/30/dan-ran</id>
    <content type="html"><![CDATA[<p>马上就是29岁生日了，家里的小家伙也开始会逗我玩了，会求抱抱了。以前陪小家伙感觉更多的是责任，现在越来越觉得她是个小人了。</p>

<p>因为毕业晚，一直都是以新人自居，做事也带着学生那会的习气，有些事情没有承担起相应的责任，比如带宝宝。这一点老婆承担了很多，我虽然也会去配合，但是终归没有那么情愿。</p>

<p>晚上把头像改成了和女儿的合照，以后以老爸自居了。虽然工作经验也有些不足，但是决定不再装嫩了，多一点责任心，年龄的事就随他去吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用SpringProfile和Mybatis进行多个数据源（H2和Mysql）的切换]]></title>
    <link href="http://code4craft.github.com/blog/2014/03/20/shi-yong-springprofilehe-mybatisjin-xing-duo-ge-shu-ju-yuan-%28h2he-mysql%29de-qie-huan/"/>
    <updated>2014-03-20T09:45:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/03/20/shi-yong-springprofilehe-mybatisjin-xing-duo-ge-shu-ju-yuan-(h2he-mysql)de-qie-huan</id>
    <content type="html"><![CDATA[<p>最近在做WebMagic的后台，遇到一个问题：后台用到了数据库，本来理想情况下是用Mysql，但是为了做到开箱即用，也整合了一个嵌入式数据库H2。这里面就有个问题了，如何用一套代码，提供对Mysql和H2两种方案的支持？博主收集了一些资料，也调试了很久，终于找到一套可行方案，记录下来。代码贴的有点多，主要是为了以后方便自己查找。</p>

<!--more-->


<h2>H2的使用</h2>

<p>H2是一个嵌入式，纯Java实现的数据库，它各方面都要好于Java的sqlitejdbc。它可以使用内存模式，也可以使用磁盘模式。具体使用可以看攻略：</p>

<p><a href="http://www.cnblogs.com/gao241/p/3480472.html">http://www.cnblogs.com/gao241/p/3480472.html</a></p>

<h2>为MyBatis同时配置两套数据源</h2>

<p>我们希望达到的效果是，不同的数据源使用不同的sql，并且这个切换最好只在配置中体现，与代码无关。所以我们选择xml的方式编写sql语句。</p>

<h3>MyBatis Spring的使用</h3>

<p>同时使用Mybatis-Spring插件，这样Mybatis可以将Mapper（也就是DAO）自动配置成Bean，非常方便。它的一个完整示例可以看这个项目：<a href="https://github.com/mybatis/jpetstore-6">https://github.com/mybatis/jpetstore-6</a>。这里我配置如下：</p>

<h4>配置Bean</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basePackage&quot;</span> <span class="na">value=</span><span class="s">&quot;us.codecraft.webmagic.dao&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;mapperLocations&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath*:/config/mapper/**/*.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>配置Mapper</h4>

<p>对应的DAO和配置文件如下：</p>

<ul>
<li>us.codecraft.webmagic.dao.DynamicClassDao:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DynamicClassDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="n">DynamicClass</span> <span class="n">dynamicClass</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>DynamicClassDao.xml</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&quot;us.codecraft.webmagic.dao.DynamicClassDao&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&quot;add&quot;</span> <span class="na">parameterType=</span><span class="s">&quot;us.codecraft.webmagic.model.DynamicClass&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      insert into DynamicClass (`ClassName`,`SourceCode`,`AddTime`,`UpdateTime`)
</span><span class='line'>      values (#{className},#{sourceCode},now(),now())
</span><span class='line'>    <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'><span class="nt">&lt;/mapper&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用databaseIdProvider进行多个数据源的SQL切换</h3>

<p>MyBatis支持根据不同的数据库名来进行SQL语句的切换。做法是初始化<code>SqlSessionFactoryBean</code>的时候，配置一个<code>databaseIdProvider</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;vendorProperties&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;properties&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;props&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;SQL Server&quot;</span><span class="nt">&gt;</span>sqlserver<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;DB2&quot;</span><span class="nt">&gt;</span>db2<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;Oracle&quot;</span><span class="nt">&gt;</span>oracle<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;MySQL&quot;</span><span class="nt">&gt;</span>mysql<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;H2&quot;</span><span class="nt">&gt;</span>h2<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/props&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;databaseIdProvider&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.ibatis.mapping.VendorDatabaseIdProvider&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;properties&quot;</span> <span class="na">ref=</span><span class="s">&quot;vendorProperties&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;databaseIdProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;databaseIdProvider&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;mapperLocations&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath*:/config/mapper/**/*.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Mapper的xml里，把相应的语句加上<code>databaseId="xxx"</code>就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>
</span><span class='line'><span class="cp">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&quot;us.codecraft.webmagic.dao.DynamicClassDao&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&quot;add&quot;</span> <span class="na">parameterType=</span><span class="s">&quot;us.codecraft.webmagic.model.DynamicClass&quot;</span> <span class="na">databaseId=</span><span class="s">&quot;mysql&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      insert into DynamicClass (`ClassName`,`SourceCode`,`AddTime`,`UpdateTime`)
</span><span class='line'>      values (#{className},#{sourceCode},now(),now())
</span><span class='line'>    <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&quot;add&quot;</span> <span class="na">parameterType=</span><span class="s">&quot;us.codecraft.webmagic.model.DynamicClass&quot;</span> <span class="na">databaseId=</span><span class="s">&quot;h2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      insert into DynamicClass (`ClassName`,`SourceCode`,`AddTime`,`UpdateTime`)
</span><span class='line'>      values (#{className},#{sourceCode},now(),now())
</span><span class='line'>    <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/mapper&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Spring Profile</h2>

<p>Profile是Spring 3.1后新增的特性，简单来说，就是根据不同的环境，读取不同的配置。这些配置可以放在一起，但是单独生效。贴个代码吧，很容易说明问题了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xmlns:jdbc=</span><span class="s">&quot;http://www.springframework.org/schema/jdbc&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>
</span><span class='line'>          <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://127.0.0.1:3306/WebMagic?characterEncoding=UTF-8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">value=</span><span class="s">&quot;webmagic&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;webmagic&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;beans</span> <span class="na">profile=</span><span class="s">&quot;test&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>
</span><span class='line'>              <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;org.h2.Driver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:h2:mem:WebMagic;DB_CLOSE_DELAY=-1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--Refer to https://github.com/springside/springside4/wiki/H2-Database --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;jdbc:initialize-database</span> <span class="na">data-source=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ignore-failures=</span><span class="s">&quot;ALL&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;jdbc:script</span> <span class="na">location=</span><span class="s">&quot;classpath:sql/h2/schema.sql&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="c">&lt;!--&lt;jdbc:script location=&quot;classpath:data/h2/import-data.sql&quot; encoding=&quot;UTF-8&quot;/&gt;--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/jdbc:initialize-database&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/beans&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;beans</span> <span class="na">profile=</span><span class="s">&quot;standalone&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>
</span><span class='line'>              <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;org.h2.Driver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:h2:file:~/.h2/WebMagic;AUTO_SERVER=TRUE&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--Refer to https://github.com/springside/springside4/wiki/H2-Database --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;jdbc:initialize-database</span> <span class="na">data-source=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ignore-failures=</span><span class="s">&quot;ALL&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;jdbc:script</span> <span class="na">location=</span><span class="s">&quot;classpath:sql/h2/schema.sql&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="c">&lt;!--&lt;jdbc:script location=&quot;classpath:data/h2/import-data.sql&quot; encoding=&quot;UTF-8&quot;/&gt;--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/jdbc:initialize-database&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/beans&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>设置Profile有不同的方式。</p>

<p>在JUnit里面，使用注解@ActiveProfile即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;classpath*:/config/spring/applicationContext*.xml&quot;</span><span class="o">})</span>
</span><span class='line'><span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractTest</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Web项目则是在web.xml里设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param-name&gt;</span>spring.profiles.active<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param-value&gt;</span>product<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'><span class="nt">&lt;/init-param&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此配置，就可以达到在不同的环境使用不同bean的目的！</p>

<h2>参考资料</h2>

<ul>
<li>H2数据库攻略 <a href="http://www.cnblogs.com/gao241/p/3480472.html">http://www.cnblogs.com/gao241/p/3480472.html</a></li>
<li>spring+mybatis 多数据源整合 <a href="http://blog.csdn.net/fhx007/article/details/12530735">http://blog.csdn.net/fhx007/article/details/12530735</a></li>
<li>如何用Spring 3.1的Environment和Profile简化工作 <a href="http://www.importnew.com/1099.html">http://www.importnew.com/1099.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一次OOM故障排查经过]]></title>
    <link href="http://code4craft.github.com/blog/2014/03/05/yi-ci-oomgu-zhang-pai-cha-jing-guo/"/>
    <updated>2014-03-05T10:00:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/03/05/yi-ci-oomgu-zhang-pai-cha-jing-guo</id>
    <content type="html"><![CDATA[<p>本文是一次线上OOM故障排查的经过，内容比较基础但是真实，主要是记录一下，没有OOM排查经验的同学也可以参考。</p>

<!--more-->


<h2>现象</h2>

<p>我们之前有一个计算作业。最近经常出现不稳定，无法正常响应的情况。具体表现是：各种连接超时，从mysql、mongodb和zookeeper到netty，能超时的都超时过了。其他看不到太多有效的异常。</p>

<p>所以我们首先怀疑的是网络问题，打电话跟运维确认，运维说网络问题的可能性几乎为0，因为我们的机器是虚机，宿主机上的其他设备都运转正常。程序问题的可能性更大。继续从应用日志和tomcat的catalina.out中查找日志，发现有一些OutOfMemoryError异常。实际上，出现这个异常就代表内存不够了。</p>

<p>我们使用cat（公司的Java监控平台，已开源<a href="https://github.com/dianping/cat">https://github.com/dianping/cat</a>）查看堆使用的情况，看到如下的东西：</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0305/093930_DljD_190591.png" alt="cat oom" /></p>

<p>Memory Free已经接近了0，同时产生了大量的fullgc。</p>

<p>回到之前的连接timeout，我们知道，Java的连接timeout，除了网络传输的时间，也包括了Java程序处理的时间，所以OOM导致timeout也不奇怪了。</p>

<h2>工具和排查</h2>

<p>之前JVM分析做的很少，在同事的帮助下，结合一点资料，完成了基本的分析。</p>

<p>首先可用的是</p>

<pre><code>jmap -histo PID
</code></pre>

<p>这个命令会将内存中最终保存的对象列出来。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0305/095032_407L_190591.png" alt="jmap-histo" /></p>

<p>其中&#8221;[&ldquo;表示数组，例如&rdquo;[B&#8221;是byte[]，具体可以看<code>Class.getName()</code>的Javadoc。</p>

<p>但是这个只能粗略定位原因，如果要仔细分析，需要知道是哪些个对象持有了它，这个时候，就需要dump内存下来，再离线分析了。</p>

<p>dump内存的命令是：</p>

<pre><code>jmap -dump:format=b,file=/home/admin/dump.bin PID
</code></pre>

<p>此操作异常耗时，我跟运维在假死的机器上尝试了几次，竟然把tomcat进程干掉了，使用时还是小心为妙…</p>

<p>我这里使用<code>VisualVM</code>进行分析，大致效果如下：</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0305/095802_NpnZ_190591.png" alt="visual-vm" /></p>

<p>这里选择“计算保留大小”。这个保留大小是递归计算实例之间的依赖，得到的总大小。因为去掉了循环依赖，所以并不完全准确，但是用于排查够了。</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0305/231519_981J_190591.png" alt="visual-vm2" /></p>

<p>最后排查出的结果，是公司的RPC中间件使用了ThreadLocal来保存一个context，但是最后却没有释放。按照架构组的说明，升级了版本，问题解决！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一点自我分析]]></title>
    <link href="http://code4craft.github.com/blog/2014/02/16/yi-dian-zi-wo-fen-xi/"/>
    <updated>2014-02-16T08:34:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/02/16/yi-dian-zi-wo-fen-xi</id>
    <content type="html"><![CDATA[<p>毕业也有两年多了，昨天跟一个老同学打了个电话，他说的混的不行如何如何，我觉得自己倒是混得还好。但是当他说到混得不好依然工资比我多一半时，我陷入了深深的思考…</p>

<!--more-->


<p>从小我就不擅长与人交流。本科四年，大潮流都是享受自由，安心学习的人并不多。不同的是我学业荒废得更多。后来勉强考上研，读研的时候，应该说我是很认真的了，每天大部分时间都在看论文，就这自己的一亩三分地往里钻。可惜导师一直也不怎么管我们，学术方向也是迟迟未定，最后也没做出个名堂。</p>

<p>毕业的时候最失败的事就是没有与人交流。那会同学都去IBM实习了，我自己却不以为然，觉得想去个有挑战的。但是公司的一套技术体系又不熟，准备去阿里和百度的实习，却没有相应的知识准备，连Linux基本操作什么都不会，最后也没成功。后来才知道名企实习经验对找工作的重要性，但是也就晚了。</p>

<p>毕业那会做了个异于常人的选择，我放弃了淘宝的offer，最后去了创新工场，想要参与创业，工资比大家都低一截。后来才理解，应届生创业？在哪都是把你当做劳动力使。</p>

<p>第一份工作我去了点点网，应该说那会还是有点自闭的，因为周围的人工程水平都比我高，那会连Spring都不会。好在虽然工资不高，但是带我的同事还是很好的，水平也过硬，靠着我自己认真学习，在半年之后已经能够独放一面了，做一般的需求都没什么问题。</p>

<p>一年之后我换了工作，来了上海。来之前我经过一年的项目开发，已经属于任何活都能干的了。那会特别自信，觉得自己很厉害了。现在才觉得自己眼界太窄，技术的路很宽，但是由于缺乏与外界的交流，有些东西真的差的还远。</p>

<p>来上海我面试了几个公司，盛大、点评和一号店，其中盛大的面试官是最tough的，问到一些JVM或者AOP的东西，都答得不怎么好，当时没有警觉，因为点评和一号店的都过了，现在才发现其中的问题。</p>

<p>在点评一年，接触了一些真正意义上的专家。我觉得这一年虽然做项目不算多，但是对于我做技术是帮助最大的。一年前我觉得自己还是个技术菜鸟，一年后就得到了很多人的认可。</p>

<p>总结一下，我觉得最大的收获是我找到了自己的一套学习方法。</p>

<p>第一是写博客。我之前也在点点上写博客，多是简单的记录。后来搬到oschina，依然坚持写博客，刚开始只有几个人关注。但是我依然坚持写，有一天，我写的文章突然就上了oschina首页，有了几千的访问量。我们几个朋友之间还奔走相告。这坚定了我继续写博客的信心，同时对质量也有了更多要求。有的时候写一篇博客要花三四天，当然这样也有了更多人的认可。现在经常有人说“看过我的博客”，不得不说还是有点小自豪的。</p>

<p>第二是github。做开发最重要的是写代码写代码，我在业余的时候写了不少项目，比如之前的DNS服务器BlackHole，比如后来的爬虫框架WebMagic。WebMagic因为需求比较广泛，加上我更新比较勤快，以及oschina这个平台，也获得了不少的关注量。</p>

<p>好像说到这里乱掉了？其实我觉得最重要的就是，做事情一定要了解行业一流水平，多交流，不要畏惧，并且找到适合自己的学习方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对自己好一点]]></title>
    <link href="http://code4craft.github.com/blog/2014/02/12/good-to-you/"/>
    <updated>2014-02-12T22:49:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/02/12/good-to-you</id>
    <content type="html"><![CDATA[<p>生活是需要刺激的。</p>

<!--more-->


<p>记得在学校的时候，想要跑步，又觉得无聊，就买了个一百多的飞利浦运动耳机，可以入耳的那种。那会一百多块算是个巨款，相当于一周生活费。但是有了它，我坚持了接近5个月的跑步，作为一个胖子，我也交到了第一个女朋友，也就是现在的孩儿他妈。</p>

<p>记得去年突发奇想，花300多块买了个Intellij个人版，结果编程兴趣盎然，一年写了十几个开源项目，其中还有一个得到很多人的关注，小小的出了把名。</p>

<p>现在编程又有点厌倦了，用什么刺激一下呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码管理进入大数据时代]]></title>
    <link href="http://code4craft.github.com/blog/2014/01/29/hg-internal/"/>
    <updated>2014-01-29T14:01:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/01/29/hg-internal</id>
    <content type="html"><![CDATA[<p>最近Facebook在它们的博客中发布了文章，说到它们扩展了Mercurial（一种代码管理工具），以管理它们日渐庞大的代码。Facebook的代码量有多大？<a href="http://www.informationisbeautiful.net/visualizations/million-lines-of-code/">informationisbeautiful</a>这个网站发布过可视化一个软件代码量的介绍，Facebook的代码量大约是6000万行，超过了Windows Vista和Visual Studio 2012。</p>

<!--more-->


<p>当然这6000万行代码并没有保存在同一个仓库里。根据Facebook的文章，它们主代码仓库，大概有1700万行代码和44000个文件，并且每周有数千的提交。这样大的数据量下，我们常用的版本控制工具，包括git都不好使了，为什么呢？</p>

<p>我们先了解一下版本控制工具的原理。版本控制工具（Version Control System，以下简称VCS，请与CVS分开）从早期的集中式版本控制（CVS，SVN）发展到现在的分布式版本控制（git，Mercurial），使用方式、版本策略变化了很多，但是底层的原理变化并不大。VCS的底层大概可以分为两部分：元数据（版本信息）的管理和变更集（变更文件）的管理。</p>

<p>当我们进行一次提交的时候，首先VCS会产生一个版本号来唯一标记这次提交，在SVN里，这个版本号是一个自增整数，而在git里，它是一个40个字符的SHA1值，而在Mercurial则更复杂一点，它既有自增ID，又有SHA1值。然后VCS会扫描文件，看看哪些文件内容进行了修改，并把这次修改的索引信息保存下来，这就是这次提交的元数据。</p>

<p>而这次被修改的文件，它也会保存下来，在git中，整个项目一次提交的内容都会被压缩并存成一个文件，以该次提交的SHA1值作为文件名，并以树形结构保存下来，又叫tree object。在Mercurial里，它会把该项目的所有提交都打包压缩到changlog文件里，并以版本号来区分，这种格式又叫Revlog。相比之下，git的文件组织更加松耦合一点，所以甚至有人认为git是一种nosql数据库 :D</p>

<p>这里有点意思的是，代码君一直以为VCS对于单个文件的修改是“增量存储”的，而实际上，它是一个全量快照，但是经过了压缩的。后来想想也容易理解，如果是增量存储，那么切换版本的时候，需要把改变一个个摞上去，这个时间是难以接受的！在空间与时间之间，大家都一致选择了浪费空间换取时间！</p>

<p>那么当文件数量大的时候，会出现什么问题呢？</p>

<p>首先，每次提交的速度会变慢，因为每次提交都需要扫描所有文件系统，来判断是否有文件变更。如何解决呢？Facebook之前自己开发过一套监控文件变更的工具WatchMan。它会保存一个目录的文件树，并在操作系统那里注册-每当有文件改变时都会通知它，然后它会维护一个“是否更改”的记录。又是一个典型的“用空间换时间”的做法！然后它们定制了Mercurial，与WatchMan做了适配，于是每次提交的时候，Mercurial就无需扫描文件更改，只需要接收一个“变更文件列表”就行了！</p>

<p>其次，随着版本数增加，因为包含了所有历史文件，整个代码库会变得很巨大。用过git的朋友都知道，clone一个大项目的时间会很漫长，而有的时候，我们只需要最新的一个版本。其实大家都能想到做法是什么了吧？没错，定制过的Mercurial在clone和pull的时候，都只会复制最新版本以及元数据到本地，变更文件是不复制的，而在checkout到指定版本的时候，才会进行复制！有点意思的是，它们觉得这个复制都有点慢，于是使用了Memecached作为文件缓存。</p>

<p>另外，Mercurial大部分代码都是用Python开发，进行定制会比git方便不少，大家是不是有点想试一试呢？Mercurial的意思是“水银“，所以它又叫hg，它的代码地址是<a href="http://selenic.com/repo/hg/">http://selenic.com/repo/hg/</a>。大家这就开始自己的VCS hack之旅吧！</p>

<p>参考资料：</p>

<ul>
<li><a href="https://code.facebook.com/posts/218678814984400/scaling-mercurial-at-facebook/">https://code.facebook.com/posts/218678814984400/scaling-mercurial-at-facebook/</a></li>
<li><a href="https://code.google.com/p/support/wiki/DVCSAnalysis">https://code.google.com/p/support/wiki/DVCSAnalysis</a></li>
<li><a href="http://mercurial.selenic.com/wiki/DeveloperInfo">http://mercurial.selenic.com/wiki/DeveloperInfo</a></li>
<li><a href="http://git-scm.com/book/en/Git-Internals-Git-Objects">http://git-scm.com/book/en/Git-Internals-Git-Objects</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年总结]]></title>
    <link href="http://code4craft.github.com/blog/2013/12/15/2013-review/"/>
    <updated>2013-12-15T23:41:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/12/15/2013-review</id>
    <content type="html"><![CDATA[<p>今年是我跟老婆结婚第二年，也是工作第三年，女儿出生、买了房、工作顺利，一切都走上了正轨。</p>

<!--more-->


<h2>生活</h2>

<p>女儿出生是我今年第一大事。老婆一直想要我陪护，但是因为病房不足，所以还是一个人进了产房。7月21号下午4点，老婆被推进产房，当时她脸上满是焦急，和痛苦。期间我忐忑不安，但是老婆非常坚强的完成了顺产。当宝宝被推出来的时候，我的眼泪都忍不住了，只有感觉到浓浓的血缘之情。老婆你真棒！</p>

<p>宝宝出生之后，工作的动力更大了，可能自己也成熟了不少吧。</p>

<p>生活上的事情我做的也不多，还好有父母以及岳母的帮忙。宝宝到现在很健康，多亏了他们，当然，还有老婆。</p>

<p>在父母的资助下，10月份的时候开始了买房之旅，折腾一个月终于敲定，每个月9k的房贷，也是个不小的压力。</p>

<p>今年的生活上，我做的能打个70分，为我老婆打个90分。</p>

<hr />

<h2>工作</h2>

<p>今年工作算是持续进步的一年，也有了一些成果。</p>

<p>今年读的书不多，但是读了好几个项目的源码：jafka、httpclient、jsoup、netty、struts、spring，最重要的是积累了一套自己阅读源码的方式。代码写的更漂亮了，也有一些深层思考了。</p>

<p>写了84篇博客。几个源码解读系列博客，都得到不少朋友的支持，能给人创造价值，感觉是很不错的。其中自我感觉最好的是Netty系列，还没写完，可以继续完善。</p>

<p>5月份开源的webmagic在oschina上收获了不少人气，在完善过程中也认识了不少朋友。现在都有一点知名了呢。这个项目明年会继续完善，并做一些大动作。</p>

<p>为开源项目HttpClient提交patch成功，虽然难度不大，但是毕竟是个好的开始。</p>

<p>工作上得到了领导的肯定，邮件项目和一些日常工作都有了比较好的成绩，应该能得到进一步发展。</p>

<p>长期的目标是能自己出本书，但是自己积累还远远不够，需要继续坚持。</p>

<p>今年的工作和学习能打个90分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始使用hive]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/21/kai-shi-shi-yong-hive/"/>
    <updated>2013-11-21T17:18:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/21/kai-shi-shi-yong-hive</id>
    <content type="html"><![CDATA[<p>终于到周末了！这周事情不多，仅仅是用hive迁移一个跑脚本的程序，结果写了一周都没弄好，被hive操的生活不能自理了！加上负责的事情逐渐多起来，也变得有点忙了。</p>

<!--more-->


<p>接触一个新领域，总会有控制不住的感觉。开发流程、工具、思路都是新的，还有一些说不清道不明的问题。我也自认为对开发有些心得了，什么东西都能鼓捣鼓捣，但是真正在生产环境，面对对于一个新的领域，仍然会感到手足无措。</p>

<p>我们这边有工作十几年的C++高手，但是换到Java依然会需要向人请教，真可谓隔行如隔山！这大概就是说程序员吃青春饭的原因吧！</p>

<p>其实我挺喜欢挑战，但是对于这么一个跑一遍都要几十分钟的东西来说，实在喜欢不起来。难怪大数据的人才值钱，这东西实在太枯燥了，生命都浪费在执行上了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts2一个[安全问题]的分析报告]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/18/struts2/"/>
    <updated>2013-11-18T09:42:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/18/struts2</id>
    <content type="html"><![CDATA[<h2>一：起因</h2>

<p>最近公司代码被扫出有一个xss漏洞，检查之后，发现大致是这样一个页面：</p>

<figure class='code'><figcaption><span>DemoAction </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoAction</span> <span class="kd">extends</span> <span class="n">ActionSupport</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;success&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>模板用的是freemarker，大致是这样子：</p>

<figure class='code'><figcaption><span>demo.ftl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">class=</span><span class="s">&quot;G_N&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">&quot;top&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>${id}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们访问url<code>/demo?id=&lt;script&gt;alert("xss!")&lt;/script&gt;</code>，会发现id的参数原封不动的打印到了页面上，就会出现反射型xss!</p>

<p>代码在<a href="https://github.com/code4craft/xssdemo">https://github.com/code4craft/xssdemo</a>里的xss-demo tag下。</p>

<h2>二：问题流程</h2>

<p>分析漏洞原因前，先要稍微看一下struts结构(自己画的，可能不严谨)：</p>

<p><img src="http://static.oschina.net/uploads/space/2013/1115/001209_ikf2_190591.jpg" alt="struts2" /></p>

<p>OGNL是底层的表达式引擎，是联系起上下文和模板输出的桥梁。</p>

<p>XWork是个什么东西呢？它可以理解为一个请求-响应模式的通用框架(不仅仅局限于Web)，这个Action就是一个命令。而struts2可以说是XWork在web领域的一个特定实现。</p>

<p>XWork包括Action/Interceptor/Result几个大部分，还有用于执行流程的ActionProxy和ActionInvoker，以及处理数据的ActionContext和ValueStack。</p>

<p>所以参数的转换和注入是在XWork里进行。Struts的主要执行流程在<code>DefaultActionInvocation</code>里。大致解释一下流程：</p>

<p>当Struts捕获到参数时，会交由ognl进行参数转换。我们都知道Struts是通过setter方法进行的参数注入，更进一步的，它是通过ognl表达式来查找方法，并进行属性注入，代码在<code>OgnlRuntime.setProperty</code>里。</p>

<p>那么如果注入不成功呢？<code>OgnlRuntime</code>会抛出<code>MethodFailedException</code>，然后<code>ConversionErrorInterceptor</code>会将<code>原始参数</code>注入到<code>invocation.getStack()</code>中去，而最终freemarker会读取这个原始数据，并打印到页面上(<code>FreemarkerResult</code>)！这个时候，无论字段最终值是什么都不重要了，因为在ognl的Stack里，它已经用原始值给override了！插一句，其实这个值貌似是为了debug用的，会返回名字为&#8221;input&#8221;的result，这样会返回找不到方法的404页面，但是公司使用的貌似不太好用，仍然会正常返回！</p>

<figure class='code'><figcaption><span>ConversionErrorInterceptor </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">fakie</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// if there were some errors, put the original (fake) values in place right before the result</span>
</span><span class='line'>    <span class="n">stack</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="n">ORIGINAL_PROPERTY_OVERRIDE</span><span class="o">,</span> <span class="n">fakie</span><span class="o">);</span>
</span><span class='line'>    <span class="n">invocation</span><span class="o">.</span><span class="na">addPreResultListener</span><span class="o">(</span><span class="k">new</span> <span class="n">PreResultListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeResult</span><span class="o">(</span><span class="n">ActionInvocation</span> <span class="n">invocation</span><span class="o">,</span> <span class="n">String</span> <span class="n">resultCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Map</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">fakie</span> <span class="o">=</span> <span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;)</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getInvocationContext</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">ORIGINAL_PROPERTY_OVERRIDE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">fakie</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                 <span class="c1">//注入</span>
</span><span class='line'>                <span class="n">invocation</span><span class="o">.</span><span class="na">getStack</span><span class="o">().</span><span class="na">setExprOverrides</span><span class="o">(</span><span class="n">fakie</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三：求解</h2>

<p>那么怎么解决这个问题呢？本着回馈社区的精神，给Struts2官方发了一封邮件，并上传了demo到<a href="https://github.com/code4craft/xssdemo">https://github.com/code4craft/xssdemo</a>。然后过了一天有个叫Lukasz Lenart的大叔程序员回复我了，老外还是很客气的，回答也很及时(算上时差)。首先确认了问题的存在，然后说这不是一个bug，你可以用${id?html}来进行输出转义。我觉得这个解决方案虽然管用，但是是比较反直观的，因为一般人都会直觉上因为这里只是读取Action中的getter取值，既然是基本类型，哪会还需要转义？本来想喷回去的，又搜了一下这个Lukasz Lenart的来历，然后出来这么个：</p>

<p><img src="http://static.oschina.net/uploads/space/2013/1118/212211_F15d_190591.jpg" alt="lukasz" /></p>

<p><img src="http://static.oschina.net/uploads/space/2013/1118/215911_jxug_190591.jpeg" alt="s" /></p>

<p>被lead亮瞎了！亲力亲为，这才是开源项目的氛围嘛！</p>

<p>不过呢，即使大神&amp;作者都发话了，我还是希望有框架内的方案，或许默认对<code>ConversionErrorInterceptor</code>注入时进行HtmlEscape是个不错的主意？于是有了<code>EscapedStrutsConversionErrorInterceptor</code>:</p>

<figure class='code'><figcaption><span>EscapedStrutsConversionErrorInterceptor </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EscapedStrutsConversionErrorInterceptor</span> <span class="kd">extends</span> <span class="n">StrutsConversionErrorInterceptor</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">escape</span><span class="o">(</span><span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">StringEscapeUtils</span><span class="o">.</span><span class="na">escapeHtml4</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">value</span><span class="o">));</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">escape</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">escape</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;escape &quot;</span><span class="o">+</span><span class="n">value</span><span class="o">+</span><span class="s">&quot; to &quot;</span><span class="o">+</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">escape</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在项目里将默认的<code>converionError</code>替换为我们的新类就可以了！怎么定义stack?看看struts-core包里的struts-default.xml就知道了！(PS:自定义interceptor是Struts里很有用的技巧，大家不妨自己研究一下)。修改过的代码：<a href="https://github.com/code4craft/xssdemo/blob/master/src/main/resources/config/struts/struts.xml">https://github.com/code4craft/xssdemo/blob/master/src/main/resources/config/struts/struts.xml</a></p>

<p>当然还有一种办法，就是直接在request参数中过滤。但是这里就要区分哪些需要过滤，哪些不要过滤。我们公司使用了一套在字段上加注解的方法，解决了这个问题，也是可行的，不过就需要修改代码了。</p>

<p>参考资料：</p>

<ol>
<li>《Struts2技术内幕》<a href="http://book.douban.com/subject/7154446/">http://book.douban.com/subject/7154446/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小轮子一枚-高仿express的Java服务器]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/17/express-dot-java/"/>
    <updated>2013-11-17T18:36:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/17/express-dot-java</id>
    <content type="html"><![CDATA[<p>之前做了个Java项目<a href="https://github.com/code4craft/mocksocks">MockSocks</a>，要做UI，用Swing写实在是又low又费劲，跟前端同事聊起node-webkit，觉得很不错。但是我大部分业务都在Java上，于是就涉及到Java与js通信问题。</p>

<p>当然最常用的解决方案就是用Java写一个Web后端。但是这样解决太重，大部分时间都要花费在web的配置上，最终还要使用一个容器去启动它，程序流程也无法由我来控制了。</p>

<p>其实挺喜欢JMX的控制方式，只是用其他语言连接它成本有点高。于是就想仿照JMX的方式写一个Web Server，同时可嵌入到应用中。直接使用Jetty又太原生态了，URL路由/参数映射和转换总是要做的，于是参考了express的语法，就有了一个非常小的Web框架<a href="https://github.com/code4craft/express.java">express.java</a>。</p>

<!--more-->


<p>本来开始雄心勃勃的要用netty自己写一个，但是后来遇到尴尬的地方：自己写一套HttpMessage类，设计API其实挺麻烦的，设计得好更是需要时间。如果要重用HttpServletRequest/Response呢，实现起来又太费劲。于是后来还是直接用Jetty写了，就不重复造轮子了。</p>

<p>Web框架已经到了汗牛充栋的地步，所以也没想跟谁谁比，完成的是自己的需求就够了。这东西不支持任何servlet规范(HttpServletRequest/Response两个对象基于servlet 3.0)，要的就是简单。</p>

<p>这个WebServer可以在程序内启动，由<code>UrlRouter</code>来完成路由，并路由到对应的<code>Controller</code>上。比较大的特色就是支持动态增加Controller和映射，这样对于新增是非常方便的。例如我有个service里有个状态<code>count</code>，那么我可以这么写：</p>

<figure class='code'><figcaption><span>ServiceMonitor </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServiceMonitor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">WebServer</span> <span class="n">webServer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ServiceMonitor</span><span class="o">(</span><span class="n">WebServer</span> <span class="n">webServer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">webServer</span> <span class="o">=</span> <span class="n">webServer</span><span class="o">;</span>
</span><span class='line'>        <span class="n">monitor</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">webServer</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/service/count&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">AjaxController</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">Object</span> <span class="nf">ajax</span><span class="o">(</span><span class="n">ParamMap</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">ResultMap</span><span class="o">.</span><span class="na">create</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;count&quot;</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">WebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">WebServer</span><span class="o">.</span><span class="na">jettyServer</span><span class="o">().</span><span class="na">port</span><span class="o">(</span><span class="mi">8080</span><span class="o">);</span>
</span><span class='line'>      <span class="n">ServiceMonitor</span> <span class="n">serviceMonitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceMonitor</span><span class="o">(</span><span class="n">server</span><span class="o">);</span>
</span><span class='line'>      <span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">serviceMonitor</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然这样分散式分配其实会带来一些url的管理问题，不过小项目呢，应该是更方便了。没有想过用这个写web应用，所以目前的定位就是这样子了。</p>

<p>顺便玩了玩angular.js以及less、boostrap、node-webkit等东东。</p>

<p><img src="http://static.oschina.net/uploads/space/2013/1117/212244_eFUQ_190591.png" alt="mocksocks" /></p>

<p>这只猴子是一个博客中找到的，出自一个自由设计师之手，貌似已经卖给某个客户了<a href="http://blog.coghillcartooning.com/2436/monkey-cartoon-character-sketch/">http://blog.coghillcartooning.com/2436/monkey-cartoon-character-sketch/</a>。估计真正开源的时候，会把它换掉吧，目前仅仅自己用用，也就无所谓了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebMagic-Avalon计划启动]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/11/webmagic-avalon-start/"/>
    <updated>2013-11-11T07:50:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/11/webmagic-avalon-start</id>
    <content type="html"><![CDATA[<p>一直以来都有个想法，想要将爬虫做到可配置化，同时可复用这些配置。然后将这些配置做成可复用，可分享，可搜索的，这样就不会经常有一堆人重复劳动了！</p>

<p>双11的时候启动这个项目，希望解放苦逼的程序员，以后多点时间去谈恋爱，陪家人！</p>

<!--more-->


<h3>1. 将爬虫脚本化</h3>

<p>用尽量自然，简单的语言达到爬虫配置的目的，初定使用JRuby，雏形大概是这样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="n">css</span> <span class="s">&quot;div.BlogTitle h1&quot;</span>
</span><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="n">css</span> <span class="s">&quot;div.BlogContent&quot;</span>
</span><span class='line'><span class="n">urls</span> <span class="s">&quot;http://my\\.oschina\\.net/flashsword/blog/\\d+&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>见博客：<a href="http://my.oschina.net/flashsword/blog/175349">在webmagic中加入了自定义语言</a></p>

<h3>2. 完整的管理后台</h3>

<p>完整的管理后台，包括：</p>

<ul>
<li><p>规则的选择</p></li>
<li><p>爬虫的管理</p></li>
<li><p>爬虫的监控</p></li>
</ul>


<h3>3. 脚本分享</h3>

<p>一个脚本要做到可分享，可能包括几个描述性内容：</p>

<ul>
<li><p>适配的URL</p></li>
<li><p>简单描述</p></li>
<li><p>抽取结果</p></li>
</ul>


<p>最后做到一个平台，可以自由发布和搜索脚本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[无责任励志一则-成功就是把你做的事做精致]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/08/wu-ze-ren-li-zhi/"/>
    <updated>2013-11-08T20:27:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/08/wu-ze-ren-li-zhi</id>
    <content type="html"><![CDATA[<p>我们常说，这个世界太浮躁。实际上也是如此，今年小孩出生，同时又买了房子，生活上的压力顿时压下来，差点趴下了。但是我是个老实人，急躁又有什么用呢，还不是每天上班下班，下班看书写代码，没有那个业余找钱的能力，于是也就算了，安心搞点好玩的。</p>

<!--more-->


<p>记得去年给自己定了个目标，今年要在技术上有所进步，并且能够在一流的开源项目里贡献代码。于是我尝试了读tomcat和spring的源码，结果根本没能坚持下去。因为根本没那么多时间去阅读代码，也坚持不下去，最后都是不了了之。现在想来，根本不是对这些项目感兴趣，其实平时用到的功能也不全，完全是因为觉得它们很牛逼。</p>

<p>但是或许是无心插柳吧，之前写了一个爬虫框架webmagic，随便放到了github上。我这个人比较喜欢分享，因为都是自己趟过的坑，也不希望别人再进去，所以就写了一两篇文章介绍了下。结果喜欢的人不少，还有了一些粉丝了。后来收集了一些反馈意见，就开始了开源的旅程。我以前在点点做抓博客文章的事情，具体就是写正则去抽取网页内容，其实是很没意思的活，但是至少积累了不少领域经验，于是对写webmagic产生了很大的影响。webmagic现在star和fork都过百了，在github Java项目中排800名左右，虽然不算很厉害，但是对我来说已经是超出预料了。有人问我开源做什么东西好，我的答案是，把自己最熟悉的东西做好，在自己的应用场景，提炼出东西，再开源，是最好的。当然，其实没有必要为了开源而开源，就像《大教堂与集市》里说的，开源的产品，只是戳到自己的痛处了，自己开发出来，并推广给大家而已。</p>

<p>维护开源软件是枯燥的，因为有很多问题需要回答，无论是专业的不专业的，下至maven的使用，上至设计思想。但是我也知道用户的宝贵，所以基本上事无巨细，我都会一一回答。我把webmagic当成一个产品来做，希望更多人了解它和喜欢它。</p>

<p>从个人角度，确实也希望树立自己的知名度(工资高点=.=)，但是生活在这个时代，谁有那么崇高呢。你产生价值，得到回馈，也是应该的。</p>

<p>意外的惊喜是，因为webmagic需要写一些demo，结果写demo时遇到一个HttpClient的bug，后来反馈到了Apache，并提交了patch，结果就这么被接收了。虽然这个项目不如Apache其他项目那么知名，但是就跟它名字一样，在Java界基本是Http客户端的不二之选。于是我终于在快年底完成了今年的目标了。</p>

<p>今天在看Hadoop的东西，看到其实HDFS是Nutch为了保存海量文件而开发的，而Hadoop本身也是起源于项目需要。</p>

<p>现在的工作，我一直在做一些跑job的事情，大家都觉得挺无聊。但是想想，其实那么高端大气的Hadoop也是从跑job开始的。何不好好干呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[qcon见闻]]></title>
    <link href="http://code4craft.github.com/blog/2013/11/03/qconjian-wen/"/>
    <updated>2013-11-03T19:12:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/11/03/qconjian-wen</id>
    <content type="html"><![CDATA[<h1>第一天</h1>

<p>之前在并发编程网<a href="http://ifeve.com">http://ifeve.com</a>发过两篇关于netty的文章，就混进了编辑群，正好群主有两张Qcon上海的票，我又刚好在上海，就拿了一张票，请了天假，奔赴现场了。</p>

<!--more-->


<p>会议人依然很多，各个赞助商都在门口签到发送礼品，领了两个娃娃，正好给女儿。不得不说七牛在社区方面的工作还是很到位的，娃娃做的很用心，还送了一件挺不错的T恤。</p>

<p><img src="http://static.oschina.net/uploads/space/2013/1101/211210_rzYo_190591.jpeg" alt="toy" /></p>

<p>上午的keynote全部是英文演讲，虽然来的都是twitter、github的大牛，但是演讲内容太泛，除了瞻仰了风采之外，收获不算很大。twitter讲到了他们的RPC框架finagle，倒是可以研究一下。twitter的开源项目还是很受欢迎的，既有bootstrap，又有storm，这个finagle应该也不错。</p>

<p>下午奔了几个会场。阿里外贸讲前端优化、SEO以及CDN中遇到的坑，感觉挺不错，都是宝贵的经验。豆瓣讲到自己的工程师文化，讲到工程师自发的维护code平台，自下而上的工具开发论相当不错。有个观点很新颖：团队工具最好由开发自己维护，不要用专人去负责，否则负责人为了刷存在感，总会开发些不实用的功能…</p>

<p>code平台晚些会开源。</p>

<p>听了几个报告，感想：其实所有技术人都有一个开源梦，极少数真是想藏着不给人看，多数是因为没有精力将代码提高到可开源水平(依赖内部工具、耦合业务代码、文档测试不全、代码质量不高)。开源对于公司来说，确实成本不小，在国内除了积累声望外也没有什么回报(极少有人反馈代码)。</p>

<hr />

<h1>第二天</h1>

<p>今天上午处理一些公司的事情，没有去成，错过了安全方面的讲座，挺可惜的。</p>

<h2>Apache Traffic Server</h2>

<p>下午第一个听了阿里CDN团队的永豪对于Apache Traffic Server的讲解，偏运维方面，好多东西不懂，不过倒是知道了ATS这个东西。ATS采用多线程+事件机制，默认支持集群，比起nginx倒是方便了很多。阿里CDN团队还出过Tsar。他们在尝试将配置用lua实现(remap)，估计日后会合并到主干。可能在很多人眼里运维就是配一大堆配置文件的人，看日后会不会有改变。阿里在开源方面真算是走上了正轨，积累了业界声望，至少在我看来对于招收人才是非常有利的。</p>

<h2>深度学习</h2>

<p>第二个听了百度IDL的首席科学家张潼带来的深度学习的介绍。其中细数了机器学习在企业的应用，干货挺多，至少对于我这个外行更是如此。大数据在企业分为三个方向：</p>

<ul>
<li><p>Infrastructure</p>

<p>  数据研究的设施，像hadoop、storm、spark均属此类。也包括把数据拿到CPU/GPU上计算。</p></li>
<li><p>Data analysis</p>

<p>  数据分析，建模、算法，参数调优等。</p></li>
<li><p>System intergtation</p>

<p>  系统集成，最终将机器学习的结果整合到产品中，产生商业价值。</p></li>
</ul>


<p>百度的机器学习主要用于CTR预估和语音以及图像的处理。百度的广告数据已经达到了千亿规模，用的是Logistic Regression。而图像和语音用的是深度学习，深度学习的精髓是最接近人的大脑，同时它可以从最原始的特征选择出最上层的特征，学习越多越抽象，而且这个最上层的特征通常是有意义的。这样同于特征提取，可能在一个星期内就完成人工十年都做不到的特征选择工作。百度这方面做的挺不错的，据说图片匹配已经超过google了。</p>

<p>还有些分布式方面的内容，包括CPU与GPU的区别和任务分配模式，需要时倒是可以了解一下。</p>

<h2>Java 8</h2>

<p>作为一个Java码农，不得不说Java8，于是去听了Oracle专家带来的J2SE的55个特性的讲座。当时顺便开了IDEA，边听边试，岂不快哉！</p>

<p>说到Java8先说Lambda，关于Lambda我写过一篇博客，我觉得报告中有个说法很对：Allow you to treat code as data. 在VM层级是使用invokedynamic机制实现的。<a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html">http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html</a></p>

<p>另外并发方面支持Fork-Join了，集合类都增加了并发支持，有人说Java8是抄scala的，感觉倒有那么点意思…</p>

<h2>Moco</h2>

<p>Moco这个框架之前就关注过，因为自己也计划写一个类似的东西。作者郑烨@dreamhead是个35岁的大龄码农，倒是挺有亲切感。Moco之前有说过，就是用Mockito的语法和JSON配置来实现一个webserver。后来拉了代码看了一下，作者是个与时俱进的Java Coder，用了guava/netty4.0/gradle等新玩意。</p>

<p>作者写了10年博客，有个《你应该更新的Java知识》系列，可以去搜一下。</p>

<p>有趣的时晚上报告的时候，与作者刚好坐到了旁边，但是反而不知道说什么了，码农嘛，有点不善言辞。</p>

<h2>鬼脚七夜话</h2>

<p>鬼脚七夜话是晚上的座谈活动，实际上比起白天的报告，这个收获更大一些。最大的收获是学到了角色时间管理法。还有就是也了解了几个微信公众号，有点意思。鬼脚七说自己的经验是每天坚持写自媒体，写一年半年试试。想起当初自己写webmagic时29天的连续strike，还是挺有感触的。</p>

<p>还有一个就是大牛一部分是技术，一部分是吹出来的，感谢蔡学镛独到的见解。</p>

<p>晚上跟朋友谈起Java8，引出了函数式编程的话题，然后就被推荐学学Haskell。函数式编程有不可变对象和函数组成，有点意思，研究一下。</p>

<hr />

<h1>第三天</h1>

<p>第三天宝宝生病，去了趟医院才来。第一场听了鸟哥的Yax框架。我是鸟哥的粉丝，报告非常技术，符合技术人员的特质。</p>

<p>下午的讲座就比较泛泛，不是很喜欢。虽然有鬼脚七和蔡学镛的讲座，但是比起前一天的鬼脚七夜话，各方面都差远了，感觉就是来宣传的。google glass的现场demo倒是有点意思，google glass2出了，支持近视眼镜，以后便宜了可以入一个。</p>

<p>就这么多了，结束的时候稍微有点失落，不过补充了码农的能量，可以继续下去了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java字节码织入技术概述]]></title>
    <link href="http://code4craft.github.com/blog/2013/10/20/java-bytecode/"/>
    <updated>2013-10-20T16:52:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/10/20/java-bytecode</id>
    <content type="html"><![CDATA[<p>十问：</p>

<ul>
<li>什么是Java字节码？</li>
</ul>


<!-- more -->


<p>Class文件的结构：</p>

<pre><code>   ClassFile {
          u4             magic;
          u2             minor_version;
          u2             major_version;
          u2             constant_pool_count;
          cp_info        constant_pool[constant_pool_count-1];
          u2             access_flags;
          u2             this_class;
          u2             super_class;
          u2             interfaces_count;
          u2             interfaces[interfaces_count];
          u2             fields_count;
          field_info     fields[fields_count];
          u2             methods_count;
          method_info    methods[methods_count];
          u2             attributes_count;
          attribute_info attributes[attributes_count];
   }
</code></pre>

<p><img src="http://static.oschina.net/uploads/space/2013/1020/193328_GPX0_190591.png" alt="在此输入图片描述" /></p>

<pre><code>javap -verbose Downloader
</code></pre>

<p>最开始是常量池，保存类名/方法/字面量等信息。</p>

<ul>
<li>Java字节码在JVM里如何保存？</li>
</ul>


<p>字节码是类文件</p>

<ul>
<li><p>字节码和ClassLoader的关系？</p>

<p>  -XX:+TraceClassLoading</p></li>
<li><p>字节码修改能做的事？</p></li>
<li><p>字节码修改不能做的事？</p>

<p>  Java加载Class文件后会做&#8221;连接&#8221;操作，就是把符号表的彼此引用连接起来。</p></li>
<li><p>常用的字节码修改工具？</p></li>
</ul>


<h2>参考书目</h2>

<p>《深入理解Java虚拟机》</p>

<p>《The Java® Virtual Machine Specification-Java SE 7 Edition》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MockSocks开发日志之三-为NIO设置Socks代理]]></title>
    <link href="http://code4craft.github.com/blog/2013/10/20/mocksockskai-fa-ri-zhi-zhi-san-wei-nioshe-zhi-socksdai-li/"/>
    <updated>2013-10-20T16:28:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/10/20/mocksockskai-fa-ri-zhi-zhi-san-wei-nioshe-zhi-socksdai-li</id>
    <content type="html"><![CDATA[<h2>回顾</h2>

<p>时隔3个月，MockSocks终于又能继续开发了。这个项目是目前为止做过的最有技术挑战的一个，目标是做成一个后端应用的fiddler，可以监控应用对外的网络流量、分析协议、重定向、并针对每个协议进行修改，同时可以录制和回放。项目也得到了部门总监和其他leader的肯定，可以多花心思弄弄好。</p>

<p>因为项目的核心是一个Socks代理，通过这个代理捕获双方的流量，并进行后续的操作。</p>

<!--more-->


<h2>Server</h2>

<p>Socks Server方面使用netty构建了一个，原本觉得无比复杂的东西，借助netty倒是变得很简单了，具体实现方式在这篇博客：<a href="http://my.oschina.net/flashsword/blog/169361">http://my.oschina.net/flashsword/blog/169361</a>。学习netty期间用心写了几篇文章，也结交了一些朋友，倒是挺开心的。可惜netty系列文章没有完成，估计要等我MockSocks开发完才能继续了。</p>

<h2>配置Client</h2>

<p>server端开发完后，就轮到client端了。JDK的OIO是支持全局代理的，只需在JVM参数中配置<code>-DsocksProxyHost=xxx -DsocksProxyPort=xxx</code>即可。遗憾的是，这个配置对NIO是不起作用的。</p>

<p>后来考虑过几种办法：</p>

<ol>
<li><p>因为公司项目用到NIO的部分，主要也是通过netty做的。那么改netty的API，使其支持代理，是最简单的做法。使用netty构建一个socks client也是得心应手。但是这种做法不够彻底，且不具有通用性。</p></li>
<li><p>修改NIO的接口SocketChannel.open()的实现，使其返回一个可以使用代理的SocketChannel。这种方法最彻底，但是涉及到JDK一些底层API，有些还没有暴露出来，实现难度有点大。</p></li>
</ol>


<p>后来决定采用方法2，顺便学习一下。</p>

<p><code>SelectorProviderImpl</code>、<code>SocketChannelImpl</code>都是VM的私有API，只有下载JDK源码才能看到。下载openjdk源码后，在<code>jdk/src/share/classes/</code>目录可找到。</p>

<p><code>SelectorProvider.provider()</code>是JDK自己的一个扩展点，会根据不同的OS选择不同的SelectorProvider，OSX是KQueue。尝试自己写了一个SocketChannel的子类，做一个全局代理，结果被SelectorImpl摆了一道，里面要求必须实现<code>sun.nio.ch.SelChImpl</code>接口，而这个接口是包级可见的。</p>

<p>抱着侥幸心理，尝试将自己的新类写到<code>sun.nio.ch</code>包下，结果编译通过，加载提示无法访问其父类接口<code>sun.nio.ch.SelChImpl</code>，<s>看来sun对自家的包是做了一些保留的</p>

<p>看了一遍《深入理解Java虚拟机》关于ClassLoader那章，确定</p>

<p>尝试用agent修改代码。后来沮丧的发现，agent的<code>ClassFileTransformer</code>无法获取到系统级别的class，但是看ByteMan介绍，它倒是可以做到，有必要研究一番。</s></p>

<p>后来跟RednaxelaFX提问之后，确认了JVM是根据ClassCloader+package来确定一个包的，所以要使自己写的类能访问<code>sun.nio</code>包的内容，必须使用Boostrap Classloader来加载。后来在javaagent里配置了相应参数，搞定！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今天把mou整崩溃了]]></title>
    <link href="http://code4craft.github.com/blog/2013/09/24/jin-tian-ba-mouzheng-beng-kui-liao/"/>
    <updated>2013-09-24T20:17:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/09/24/jin-tian-ba-mouzheng-beng-kui-liao</id>
    <content type="html"><![CDATA[<p>一直觉得Mou写markdown，小巧灵活，久而久之也喜欢把一些临时文本放在里面。</p>

<p>结果晚上回来的时候打不开了，内存飙到1.6G，CPU跑到200%多，死活打不开。作为markdown重度患者，简直要崩溃了。</p>

<!---more--->


<p>怀疑是打开了非法的文件导致。删了App重新装，问题依旧，不知道是把临时文件存在哪的。用进程管理器找到打开的文件，将疑似缓存的文件都删了(<code>~/Library</code>下面几个)，依然没有用！</p>

<p>后来都要绝望的时候，竟然蹦出来了，原来是之前随便贴了一些数据，估计是有markdown的保留字，导致Mou解析出错了！下次还是不要乱拷数据到Mou里了吧！</p>
]]></content>
  </entry>
  
</feed>
