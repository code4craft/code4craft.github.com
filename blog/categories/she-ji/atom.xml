<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 设计 | 代码工匠]]></title>
  <link href="http://code4craft.github.com/blog/categories/she-ji/atom.xml" rel="self"/>
  <link href="http://code4craft.github.com/"/>
  <updated>2015-07-11T10:25:50+08:00</updated>
  <id>http://code4craft.github.com/</id>
  <author>
    <name><![CDATA[code4craft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[代码大全读书笔记]]></title>
    <link href="http://code4craft.github.com/blog/2014/07/01/dai-ma-da-quan-du-shu-bi-ji/"/>
    <updated>2014-07-01T23:01:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/07/01/dai-ma-da-quan-du-shu-bi-ji</id>
    <content type="html"><![CDATA[<p>最近项目开发比较密集，也遇到了一些方式的碰撞，这个时候再翻到《代码大全》，真是瞌睡时碰到枕头的感觉了。决定好好读一遍，记录一下。</p>

<!--more-->


<p>xxiv: 软件构建是项目必须完成的阶段，它要为小型项目75%的错误负责，为大型和中型项目50%-75%的错误负责。——我们在项目的错误中，往往只看重设计的重要性，其实大部分错误都来自软件构建（即编程）本身。</p>

<p>P11：如何利用隐喻Metaphors（对软件的建模），将影响如何解决这个问题。</p>

<p>P28：程序员是软件食物链的最后一环。架构师吃掉需求，设计师吃掉架构，而程序员则消化设计。</p>

<p>P35：前期做好准备的项目，返工的成本是最低的。如果无法做到完全的准备，准备80%的需求，并为20%留够时间是一个可行的做法。</p>

<p>P46：架构应该确定软件采用的组织结构，并尽量列举其他可能的方案以及选择最终方案的理由。依据80/20原则，架构可以对确定决定项目80%功能的20%的类进行详细说明。</p>

<p>架构设计的常规内容(挑几个觉得重要的)：</p>

<ol>
<li>程序组织 Program Orgnization</li>
<li>主要的类 Major Classes</li>
<li>数据设计 Data Design</li>
<li>业务规则 Business Rules</li>
<li>安全性 Security</li>
<li>性能 Performance</li>
<li>可伸缩性 Scalability</li>
<li>容错性</li>
</ol>


<p>P51：在软件开发的链条中，链条的强度不是等于最薄弱的环节，而是所有薄弱环节的乘积。</p>

<p>P53：架构应该描述决策的动机，谨防“我们向来这么做”的说法。有个有趣的例子：Beth 想做丈夫 Adbul 家祖传的炖肉。Adbul 说，先撒上胡椒和盐，然后去头去尾，最后放在锅里盖上盖子炖就好了。Beth 就问了，“为什么要去头去尾呢？” Abdul 回答说，我不知道，我一直这么做，这要问我妈。他打电话回家一问，母亲也说不知道，她一直这么做，这个问题要问奶奶。母亲就打了个电话给奶奶，奶奶回答说，“我不知道你为什么要去头去尾，我这么做是因为我的锅太小了装不下”。</p>

<p>P62：选择合适的编程语言很重要。如果C的表达能力是1的话，C++和Java就是2.5。而perl和python却有 6。</p>

<p>P69：“深入一种语言编程”，而不只是“使用一种语言编程”。</p>

<p>P74：设计是一个险恶(Wicked Problem)的问题——只有解决或者部分解决才能被明确的问题。</p>

<p>P75：设计是一个了无章法的过程(Sloppy Process)，优、劣设计之间的差异往往非常微妙。</p>

<p>P77：软件的首要使命是管理复杂度。人们很少把技术原因归结为项目失败的主要因素，项目的失败多数由差强人意的需求、规划和管理导致的。但是，当项目确实由技术因素导致失败时，其原因通常就是失控的复杂度。</p>

<p>P79：拆分实际上是一种“关注点分离”。</p>

<p>高代价、低效率的设计源于三种根源：</p>

<ol>
<li>用复杂的方法解决简单的问题。</li>
<li>用简单但错误的方法解决复杂的问题。</li>
<li>用不恰当的复杂方法解决复杂的问题。</li>
</ol>


<p>P81：</p>

<p>高扇入(high fan-in)：指底层工具类被更多的类使用。</p>

<p>低扇出(low fan-out)：指一个类尽量少的依赖其他的类。</p>

<p>P84：程序调用、组合、继承的依赖程度从轻到中。继承是非常重度的耦合。</p>

<p>P90：</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[没有银弹-谈谈软件设计的几个矛盾]]></title>
    <link href="http://code4craft.github.com/blog/2014/06/16/ruan-jian-she-ji-de-ji-ge-mao-dun/"/>
    <updated>2014-06-16T09:30:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/06/16/ruan-jian-she-ji-de-ji-ge-mao-dun</id>
    <content type="html"><![CDATA[<p>最近在做项目的重构和功能改进，设计做了很多，也发生了一些争执。其实总结下来，很多争执的内容其实早就是经典的问题。这些问题没有孰优孰劣，具体采用哪种方案，还得因地制宜，详细分析项目需求和复杂度之后，再做决定。之前很多人都试图只从宏观指导思想来决定设计，最后大家谁也不服谁，所以先把问题确定下来，至少以后思考问题会直接一点。</p>

<!--more-->


<h3>1. 拆分与合并</h3>

<p>从现实世界来说，事物本身就是互相联系的，从这个观点来看，任何对事物的拆分都是不完全正确的。</p>

<p>但是软件开发中，人的理解能力是有限的，而拆分目前看来是降低单个项目复杂度最有效的办法。</p>

<p>拆分有很多级别，最小的可能是拆分代码段，用多个函数代替单个函数，然后是用多个类代替单个类，在Java里面，还可以拆分package，然后拆分jar包，最后拆分成不同的项目。</p>

<p>之前有过很多的争执，关于一个项目要拆还是不拆，以及如何拆。关于这个，我的建议是：</p>

<ol>
<li><p>拆与不拆没有对错</p>

<p> Windows是微内核架构，Linux是单内核架构。微内核意味着内核很小，你可以通过很多个模块去补充它，内核与模块是解耦的。Linux是单内核，就表示所有内核功能会在编译时就确定。可能大家都觉得微内核更好，很多时候它确实更好，但是Linus有个经典的论断：“你不需要管理各个模块，但是你需要处理模块之间的依赖，这个可能比模块本身更复杂”。因为事物本身就是互相联系的，你觉得他们不存在耦合，只是当前使用场景用不到而已。</p></li>
<li><p>系统内部实现对外部透明，保留拆或者不拆的选择权。</p>

<p> 项目自身的复杂度，完全可以靠内部实现解决，对外保持约定好的API，这样对于以后内部的重构，会简单得多。相反，如果暴露了内部实现，那么修改就很困难了。</p></li>
<li><p>对于项目拆分，如果没有充足的理由支持拆分，就不要拆。</p>

<p> 不成熟的拆分，最常见的结果是，随着需求的变化，你不得不打破这种解耦关系，这样反而会带来更多的问题。建议是需求稳定之后，再考虑拆分。</p></li>
<li><p>在系统内部多多进行代码级别的拆分，管理复杂度。</p>

<p> 相比项目的拆分，函数和类级别的拆分成本非常低，值得多用。</p></li>
</ol>


<h3>2. 配置化与灵活性</h3>

<p>一段代码，如果使用一遍，那么我们就直接通过代码实现了。如果我们有几十上百个类似的任务，那么我们就不希望写重复的代码了，我们希望能够通过配置几个不同的参数，从而实现不同的任务。如果任何以后还有不断变化的需求，我们甚至不希望自己写配置，而是有一个运营后台来让需求方(可能是不懂开发的人)直接完成配置。</p>

<p>配置化的开发方式往往对开发者来说有很大的诱惑，从而忽略其中的成本，这个配置最近还有个很火的名字，叫做DSL。但其实配置化和灵活性是矛盾的，配置的表述能力自然要弱于通用语言。当然，也有人尝试使用配置解决所有问题，结果只不过是发明了一门很难用的语言而已。</p>

<p>我自己的框架WebMagic是一个经典的配置与灵活性权衡的例子。WebMagic是一个垂直爬虫框架，爬虫最复杂的是规则的编写，你可以认为这是一个可配置的东西。公司基于它做了一个配置后台，即使是这样，仍然有一些情况，不得不手写Java代码来实现一些功能。</p>

<p>对于这个问题，我的建议是：</p>

<ol>
<li><p>先写代码解决问题，但是提前约定接口。</p>

<p> 第一个阶段，没有谁能预测以后的需求，所以先用你熟悉的代码实现。可以根据你的输入和输出，约定程序级别的接口，相比配置化，这一般来说会容易，如果接口设计得当，也会有具有很大灵活性，以后基本无需更改。</p></li>
<li><p>在有一定积累之后，基于以往的任务做配置化。</p>

<p> 配置的内容是什么呢？首先公共逻辑肯定会在整体框架中，配置的内容应该是不同任务彼此独特的部分。这个配置格式，或者DSL的语法的约定，首先应该基于已有的任务，然后可能考虑一下未来的情况。我是个实践主义者，所以我更多的会参考已有的情况，如果发现这个配置化的框架，对之前的任务都不能满足，那么就需要思考一下它的可行性和必要性了。</p></li>
<li><p>在任何时候都保留能使用代码实现的能力。</p>

<p> 我是个实用主义者。有了配置，如果不提供代码实现的能力，而又有一些复杂的需求，那么就只能扩展配置的能力了。这样只可能会导致这个配置解决框架变得极其庞大和复杂，而相对收益却很低。这个时候，可以通过配置解决大部分问题，然后通过代码解决少量问题，也是不错的选择。</p></li>
</ol>


<h3>3. 总结</h3>

<p>其实还有很多东西没说到，以后补充吧。</p>

<p>总结一句话：软件设计要适应满足需求，同时不断演化。</p>
]]></content>
  </entry>
  
</feed>
