<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gfw | 非典型代码强迫症]]></title>
  <link href="http://code4craft.github.com/blog/categories/gfw/atom.xml" rel="self"/>
  <link href="http://code4craft.github.com/"/>
  <updated>2014-07-07T23:17:42+08:00</updated>
  <id>http://code4craft.github.com/</id>
  <author>
    <name><![CDATA[code4craft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BlackHole开发日志--防止DNS污染]]></title>
    <link href="http://code4craft.github.com/blog/2013/02/25/blackhole-anti-dns-poison/"/>
    <updated>2013-02-25T21:13:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/02/25/blackhole-anti-dns-poison</id>
    <content type="html"><![CDATA[<h3></h3>

<hr />

<h3>DNS污染原理</h3>

<p>DNS污染是比DNS劫持更加难以防御的一种攻击，受攻击者访问网站时可被导向其他域名，例如某“不存在的网站”被导向了一个“不存在的IP地址”。</p>

<p>DNS污染的原理如下：</p>

<p>DNS查询也是一个经典的请求-回答模式。首先，客户端发起DNS查询，这是一个UDP包。路由器在转发IP包时，对其内容做解析，若发现其是使用53端口的UDP包，并且其内容符合某些特征(普通的DNS请求都是明文)，则从旁路直接返回一个伪造的应答，将其应答指向某个特定IP。因为这个返回速度非常快，所以先于正常请求到达客户端。而客户端收到一个返回包，就认为得到了答案，不再继续接收，而正确的请求结果就被忽略了！</p>

<p><img src="/images/posts/dns-poison.png" alt="image" /></p>

<!-- more -->


<p>一般防止DNS污染有几种方法：</p>

<ul>
<li><p>修改系统hosts文件</p>

<p>  系统的hosts文件可以配置某个域名对于的IP地址，并且会优先于DNS服务器的响应，所以此方法稳定高效，缺点是host地址需要不断更新。</p></li>
<li><p>改用TCP协议而不是DNS协议发送DNS请求</p>

<p>  DNS也支持TCP协议传输，而TCP协议没有收到污染，所以可以改用TCP作为DNS下层协议。缺点是TCP速度慢，并且DNS服务器支持度有限。代表工具：Tcp-DNS-proxy <a href="https://github.com/henices/Tcp-DNS-proxy">https://github.com/henices/Tcp-DNS-proxy</a></p></li>
<li><p>使用IPv6地址发送DNS请求</p>

<p>  某些站点可以通过IPv6地址访问。代表工具：dnsproxycn <a href="http://code.google.com/p/dnsproxycn/">http://code.google.com/p/dnsproxycn/</a></p></li>
<li><p>根据污染特征过滤伪造DNS答案</p>

<p>  先截获DNS污染结果，然后分析其特征，然后将判断为污染的DNS包过滤掉。代表工具：AntiDnsPollution <a href="http://www.williamlong.info/archives/2184.html">http://www.williamlong.info/archives/2184.html</a></p></li>
</ul>


<h3>BlackHole解决方案</h3>

<p>BlackHole解决方案是第4种：向一个不存在的地址发送DNS查询，正常情况下不会有应答；若触发DNS污染，则只会有伪造包返回。记录这个伪造包的特征(一般是A记录的IP地址)，加入黑名单，下次如果收到这些包，则直接过滤。</p>

<p>其实开发BlackHole时不知道有AntiDnsPollution这款工具，完成了才知道，采取的方法不谋而合。只不过BlackHole做的更复杂一点，增加了一些功能：</p>

<ul>
<li><p>DNS污染黑名单持久化</p>

<p>  所有污染IP都会存入"安装路径/blacklist"文件，每次重启可继续读入，也支持手工修改。</p></li>
<li><p>可用IP导出host</p>

<p>  BlackHole会对IP地址做可达性判断(根据ICMP协议请求)，存在DNS污染的域名，若正确DNS地址中，同时有可达IP，则会产生一条"IP domain"的DNS记录到"安装路径/safebox"文件中，与hosts文件格式一致，可以粘贴进去，从而无须再启动BlackHole。</p></li>
<li><p>支持多DNS服务器请求</p>

<p>  BlackHole可以同时向多个DNS服务器请求，并采用最先返回的正确结果作为答案返回；同时后台会继续接收响应，并根据最终答案中IP地址的可用性进行判断，去掉不可用的IP。你可以将BlackHole的转发DNS配置为：一个ISP提供的服务器，速度较快；另一个权威的DNS服务器，结果较可信。对于大多数请求，ISP提供的DNS可以满足需要，从而降低查找时间。同时如果在公司内网中使用，还可以将公司内部DNS服务器地址配置进去，这样可以保证内部配置的某些DNS的有效性。</p></li>
<li><p>支持缓存</p>

<p>  BlackHole使用ehcache作为缓存，并且可以持久化，下次启动时可直接载入上次缓存结果。</p></li>
<li><p>可配置</p>

<p>  BlackHole还是修改hosts文件的替代方案。通过修改"config/zones"可以自定义DNS拦截规则，支持通配符"*&ldquo;。</p></li>
</ul>


<p>BlackHole的源码地址：<a href="https://github.com/code4craft/blackhole">https://github.com/code4craft/blackhole</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac使用ssh socks代理翻墙]]></title>
    <link href="http://code4craft.github.com/blog/2013/01/05/macshi-yong-ssh-socksdai-li-fan-qiang/"/>
    <updated>2013-01-05T21:46:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2013/01/05/macshi-yong-ssh-socksdai-li-fan-qiang</id>
    <content type="html"><![CDATA[<p>听说最近VPN封的厉害，都改用ssh翻墙了。在Mac下实验了一把，总算鼓捣成功。总结如下：</p>

<!-- more -->


<p>使用ssh作为socks proxy：</p>

<p>有很多软件都可以实现这个功能，例如Secret Socks，SSH Tunnerl Manager。Secret Socks不支持自动连接，同时每次都要输入密码，太麻烦了。SSH Tunnerl Manager也是要输入密码。不过SSH Tunnerl Manager有个好处，更改配置后它会把SSH命令都显示出来。原来Mac下SSH直接就可以支持socks代理，大概这样配置：</p>

<pre><code>ssh -N -p 22 -C -c -D 7070 username@hostname
</code></pre>

<p>但是这样依然无法保存密码，后来搜索到一个软件sshpass，下载编译之，运行却提示找不到/usr/libexec/ssh-askpass，后来从网上找到一个人的解决方案，发现其实这就是提供密码的脚本，于是直接在里面敲上：</p>

<pre><code>#! /bin/sh 

echo yourpassword
</code></pre>

<p>然后使用</p>

<pre><code>sshpass -pyourpassword ssh -N -p 22 -C -c -D 7070 username@hostname
</code></pre>

<p>就可以了！sshpass貌似自带断线重连功能，相当给力！</p>

<p>还有就是autoproxy的配置，在Chrome下使用SwitchySharp，在规则列表里加上<a href="https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt">https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt</a>，选择AutoProxy兼容列表即可，当然对应情景模式别忘了选成你配好的本地代理！</p>

<p>最后将启动脚本ln -s到/Library/StartupItems/，至此大功告成。</p>
]]></content>
  </entry>
  
</feed>
