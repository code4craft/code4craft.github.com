<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 软件工程 | 代码工匠]]></title>
  <link href="http://code4craft.github.com/blog/categories/ruan-jian-gong-cheng/atom.xml" rel="self"/>
  <link href="http://code4craft.github.com/"/>
  <updated>2016-03-18T00:03:23+08:00</updated>
  <id>http://code4craft.github.com/</id>
  <author>
    <name><![CDATA[code4craft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[软件开发是否存在Law?]]></title>
    <link href="http://code4craft.github.com/blog/2014/04/15/ruan-jian-kai-fa-shi-fou-cun-zai-law/"/>
    <updated>2014-04-15T06:57:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2014/04/15/ruan-jian-kai-fa-shi-fou-cun-zai-law</id>
    <content type="html"><![CDATA[<p>昨天跟架构师讨论一个项目的设计，谈到MVC模式。MVC模式，是先从View设计还是先从Model设计？</p>

<!--more-->


<p>架构师的观点是，只要使用了某个模式，其中就存在必然的"Law"，不遵循就会误入歧途。例如MVC必须要从Model写起，因为Model是稳定的，是“对自然界的建模”，与业务无关，而View是易变的，是具体业务的展现。</p>

<p>我是实用主义者，我认为一个稳定的Model是需要领域积累的，一开始就做到一个稳定的Model，应对不断变化的需求非常难。很多时候从View写起，可以迅速实现业务。当业务发展到一定阶段，再抽象出一个Model也是水到渠成的事情。开发的过程本身也是对领域加深认识的一个过程。</p>

<p>但是也有些现状是“你不去想就不会有”，一堆View拼凑起来的项目太多了，其实最开始用一个不稳定的Model，加以迭代，最终变成稳定的，也是一个很好的过程？</p>
]]></content>
  </entry>
  
</feed>
