<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 管理 | 代码工匠]]></title>
  <link href="http://code4craft.github.com/blog/categories/guan-li/atom.xml" rel="self"/>
  <link href="http://code4craft.github.com/"/>
  <updated>2016-10-30T11:46:29+08:00</updated>
  <id>http://code4craft.github.com/</id>
  <author>
    <name><![CDATA[code4craft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[最近作为团队管理者的工作和定位]]></title>
    <link href="http://code4craft.github.com/blog/2015/07/01/zui-jin-zuo-wei-tuan-dui-guan-li-zhe-de-gong-zuo-he-ding-wei/"/>
    <updated>2015-07-01T23:07:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/07/01/zui-jin-zuo-wei-tuan-dui-guan-li-zhe-de-gong-zuo-he-ding-wei</id>
    <content type="html"><![CDATA[<p>最近转管理之后，因为某些原因临时带了两个团队，其中有些工作方式又发生了改变，总结一下。</p>

<!--more-->


<h2>工作</h2>

<p>最近一段时间的工作大概包括几部分。</p>

<h3>1. 调整团队工作内容</h3>

<p>之前本来想写“决定工作内容”的，但是现在想想过于理想化了。基层管理员的能力有限，基本上不能决定不做什么。</p>

<p>帮助产品经理和各个业务方理清需求，确立可行并且合理的方案，其实是主要任务。</p>

<p>主要涉及到几个工作内容：</p>

<ol>
<li>思考方案的合理性，时间成本和维护成本。尽量避免workaround的方案，有些东西做起来一时快，维护起来是无底洞。这部分主要是跟产品经理开会，时间视产品经理的执着程度来定。不过基本上都是一条战线的，只要能满足需求，极少有产品经理对方案有要求。</li>
<li>跟其他团队扯皮，确定什么东西是谁做。这个问题很多人都偏向于自己最省事的角度考虑，需要他们跟他们讨论，从整个系统的时间成本和合理性来做事。这部分费时费力，经常会议主题还会跑偏。最后不行只能老大拍板。</li>
</ol>


<h3>2. 跟进团队工作进度</h3>

<p>跟进项目的进展，评估风险点也是开发应该做的。团队培养的好的话，早上10分钟的站会足矣。</p>

<h3>3. 处理日常琐事</h3>

<p>一般作为业务的负责人，系统运转的case、各种咨询总会第一时间落到你这里。这是业务运营逃不掉的部分，但是比较琐碎，一般成员都不太乐意处理。之前我刚转管理的时候，会极细的一一处理这些问题，慢慢的将业务拆分成几部分，各自确定负责人的时候，可能就只用转达一下了。</p>

<h2>定位</h2>

<p>我觉得定位分为对上和对下两部分。对上就是理解和实现业务价值，对下就是提高团队战斗力。</p>

<p>我觉得重点说说对下，这部分其实是基层的核心竞争力。这部分我觉得主要是：</p>

<p>合理安排工作，考虑到成员成长和自我实现的需求。如果一个leader只是觉得完成任务，是不够的。我一直对team里面的同学说，我们产出的一个是项目，一个是人，在可控的范围内，我是鼓励大家多折腾，多思考的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转型管理的一点思考]]></title>
    <link href="http://code4craft.github.com/blog/2015/05/28/zhuan-xing-guan-li-de-yi-dian-si-kao/"/>
    <updated>2015-05-28T22:05:00+08:00</updated>
    <id>http://code4craft.github.com/blog/2015/05/28/zhuan-xing-guan-li-de-yi-dian-si-kao</id>
    <content type="html"><![CDATA[<p>一个月前领导找我，说有个带团队的机会，问我有没有兴趣。我的目标是技术和管理上都要会一些，目前工作上技术路线提升已经很小，而管理基本上不会，有些挑战，所以就同意了。</p>

<p>后来的这一个月确实只能用“疲于应付”来形容，中间还因为太累头痛请假了一天。直到现在事情才稍微理顺一点，闲下来还是写写博客吧。</p>

<!--more-->


<h2>1. 价值观</h2>

<p>从开发到管理，首先个人价值发生了变化。作为开发，投资的是个人的技术能力，正所谓到技术好到哪都不怕；作为管理，投资的其实是你的团队，有了有战斗力的团队，才能做事不慌。团队的培养成本很高，而且也未必一直跟你，这也是管理不一样的地方。（当然了，无论技术还是管理，一个重要因素叫做“资历”，最终做成了什么东西，才也是最核心的竞争力。）</p>

<p>另外有意思的是，家庭和社会关系发生了变化。之前做技术，我也是一个不大不小的开源项目的发起人，个人网站也有十万以上的PV，按follow数在github上海排到前十，也跟老外谈笑风生，是很多小伙伴崇拜的对象。可是这都没有用，这没有给家里带来一分钱，老婆依然嫌弃我怎么不带小孩弄什么项目，亲戚依然觉得我是个技术型呆子。</p>

<p>然后转管理之后呢？我不太善于慷慨陈词，画大饼，上传下达也执行的不出色，在同级的管理者中间实在只算是平庸。但是呢，老婆再也不嫌我回家晚了，会体谅我是工作忙；亲戚也刮目相看了，觉得这人综合实力还不错。于是我自己也有自己变牛逼了的想法，但是究竟如何，我也不知道。</p>

<h2>2. 方法论</h2>

<p>管理说到底还是跟人打交道的学问，对上级对下级都是。对上级需要理解上级的期望，对下级需要考虑下级的需要。周末去听了一个培训课，老师讲的挺实在，“说到底这都是人性”。说真的，这可比跟代码打交道没谱多了。当然，相对来说要求也没那么高，可能写代码要求没BUG，而管理上只要没有大BUG，关键事情做好就行了。</p>
]]></content>
  </entry>
  
</feed>
